Index: src/user_service.egg-info/dependency_links 4.txt
===================================================================
diff --git a/src/user_service.egg-info/dependency_links 4.txt b/src/user_service.egg-info/dependency_links 4.txt
deleted file mode 100644
--- a/src/user_service.egg-info/dependency_links 4.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: cffi/_cffi_include 2.h
===================================================================
diff --git a/cffi/_cffi_include 2.h b/cffi/_cffi_include 2.h
deleted file mode 100644
--- a/cffi/_cffi_include 2.h	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,385 +0,0 @@
-#define _CFFI_
-
-/* We try to define Py_LIMITED_API before including Python.h.
-
-   Mess: we can only define it if Py_DEBUG, Py_TRACE_REFS and
-   Py_REF_DEBUG are not defined.  This is a best-effort approximation:
-   we can learn about Py_DEBUG from pyconfig.h, but it is unclear if
-   the same works for the other two macros.  Py_DEBUG implies them,
-   but not the other way around.
-
-   The implementation is messy (issue #350): on Windows, with _MSC_VER,
-   we have to define Py_LIMITED_API even before including pyconfig.h.
-   In that case, we guess what pyconfig.h will do to the macros above,
-   and check our guess after the #include.
-
-   Note that on Windows, with CPython 3.x, you need >= 3.5 and virtualenv
-   version >= 16.0.0.  With older versions of either, you don't get a
-   copy of PYTHON3.DLL in the virtualenv.  We can't check the version of
-   CPython *before* we even include pyconfig.h.  ffi.set_source() puts
-   a ``#define _CFFI_NO_LIMITED_API'' at the start of this file if it is
-   running on Windows < 3.5, as an attempt at fixing it, but that's
-   arguably wrong because it may not be the target version of Python.
-   Still better than nothing I guess.  As another workaround, you can
-   remove the definition of Py_LIMITED_API here.
-
-   See also 'py_limited_api' in cffi/setuptools_ext.py.
-*/
-#if !defined(_CFFI_USE_EMBEDDING) && !defined(Py_LIMITED_API)
-#  ifdef _MSC_VER
-#    if !defined(_DEBUG) && !defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(Py_REF_DEBUG) && !defined(_CFFI_NO_LIMITED_API)
-#      define Py_LIMITED_API
-#    endif
-#    include <pyconfig.h>
-     /* sanity-check: Py_LIMITED_API will cause crashes if any of these
-        are also defined.  Normally, the Python file PC/pyconfig.h does not
-        cause any of these to be defined, with the exception that _DEBUG
-        causes Py_DEBUG.  Double-check that. */
-#    ifdef Py_LIMITED_API
-#      if defined(Py_DEBUG)
-#        error "pyconfig.h unexpectedly defines Py_DEBUG, but Py_LIMITED_API is set"
-#      endif
-#      if defined(Py_TRACE_REFS)
-#        error "pyconfig.h unexpectedly defines Py_TRACE_REFS, but Py_LIMITED_API is set"
-#      endif
-#      if defined(Py_REF_DEBUG)
-#        error "pyconfig.h unexpectedly defines Py_REF_DEBUG, but Py_LIMITED_API is set"
-#      endif
-#    endif
-#  else
-#    include <pyconfig.h>
-#    if !defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(Py_REF_DEBUG) && !defined(_CFFI_NO_LIMITED_API)
-#      define Py_LIMITED_API
-#    endif
-#  endif
-#endif
-
-#include <Python.h>
-#ifdef __cplusplus
-extern "C" {
-#endif
-#include <stddef.h>
-#include "parse_c_type.h"
-
-/* this block of #ifs should be kept exactly identical between
-   c/_cffi_backend.c, cffi/vengine_cpy.py, cffi/vengine_gen.py
-   and cffi/_cffi_include.h */
-#if defined(_MSC_VER)
-# include <malloc.h>   /* for alloca() */
-# if _MSC_VER < 1600   /* MSVC < 2010 */
-   typedef __int8 int8_t;
-   typedef __int16 int16_t;
-   typedef __int32 int32_t;
-   typedef __int64 int64_t;
-   typedef unsigned __int8 uint8_t;
-   typedef unsigned __int16 uint16_t;
-   typedef unsigned __int32 uint32_t;
-   typedef unsigned __int64 uint64_t;
-   typedef __int8 int_least8_t;
-   typedef __int16 int_least16_t;
-   typedef __int32 int_least32_t;
-   typedef __int64 int_least64_t;
-   typedef unsigned __int8 uint_least8_t;
-   typedef unsigned __int16 uint_least16_t;
-   typedef unsigned __int32 uint_least32_t;
-   typedef unsigned __int64 uint_least64_t;
-   typedef __int8 int_fast8_t;
-   typedef __int16 int_fast16_t;
-   typedef __int32 int_fast32_t;
-   typedef __int64 int_fast64_t;
-   typedef unsigned __int8 uint_fast8_t;
-   typedef unsigned __int16 uint_fast16_t;
-   typedef unsigned __int32 uint_fast32_t;
-   typedef unsigned __int64 uint_fast64_t;
-   typedef __int64 intmax_t;
-   typedef unsigned __int64 uintmax_t;
-# else
-#  include <stdint.h>
-# endif
-# if _MSC_VER < 1800   /* MSVC < 2013 */
-#  ifndef __cplusplus
-    typedef unsigned char _Bool;
-#  endif
-# endif
-#else
-# include <stdint.h>
-# if (defined (__SVR4) && defined (__sun)) || defined(_AIX) || defined(__hpux)
-#  include <alloca.h>
-# endif
-#endif
-
-#ifdef __GNUC__
-# define _CFFI_UNUSED_FN  __attribute__((unused))
-#else
-# define _CFFI_UNUSED_FN  /* nothing */
-#endif
-
-#ifdef __cplusplus
-# ifndef _Bool
-   typedef bool _Bool;   /* semi-hackish: C++ has no _Bool; bool is builtin */
-# endif
-#endif
-
-/**********  CPython-specific section  **********/
-#ifndef PYPY_VERSION
-
-
-#if PY_MAJOR_VERSION >= 3
-# define PyInt_FromLong PyLong_FromLong
-#endif
-
-#define _cffi_from_c_double PyFloat_FromDouble
-#define _cffi_from_c_float PyFloat_FromDouble
-#define _cffi_from_c_long PyInt_FromLong
-#define _cffi_from_c_ulong PyLong_FromUnsignedLong
-#define _cffi_from_c_longlong PyLong_FromLongLong
-#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong
-#define _cffi_from_c__Bool PyBool_FromLong
-
-#define _cffi_to_c_double PyFloat_AsDouble
-#define _cffi_to_c_float PyFloat_AsDouble
-
-#define _cffi_from_c_int(x, type)                                        \
-    (((type)-1) > 0 ? /* unsigned */                                     \
-        (sizeof(type) < sizeof(long) ?                                   \
-            PyInt_FromLong((long)x) :                                    \
-         sizeof(type) == sizeof(long) ?                                  \
-            PyLong_FromUnsignedLong((unsigned long)x) :                  \
-            PyLong_FromUnsignedLongLong((unsigned long long)x)) :        \
-        (sizeof(type) <= sizeof(long) ?                                  \
-            PyInt_FromLong((long)x) :                                    \
-            PyLong_FromLongLong((long long)x)))
-
-#define _cffi_to_c_int(o, type)                                          \
-    ((type)(                                                             \
-     sizeof(type) == 1 ? (((type)-1) > 0 ? (type)_cffi_to_c_u8(o)        \
-                                         : (type)_cffi_to_c_i8(o)) :     \
-     sizeof(type) == 2 ? (((type)-1) > 0 ? (type)_cffi_to_c_u16(o)       \
-                                         : (type)_cffi_to_c_i16(o)) :    \
-     sizeof(type) == 4 ? (((type)-1) > 0 ? (type)_cffi_to_c_u32(o)       \
-                                         : (type)_cffi_to_c_i32(o)) :    \
-     sizeof(type) == 8 ? (((type)-1) > 0 ? (type)_cffi_to_c_u64(o)       \
-                                         : (type)_cffi_to_c_i64(o)) :    \
-     (Py_FatalError("unsupported size for type " #type), (type)0)))
-
-#define _cffi_to_c_i8                                                    \
-                 ((int(*)(PyObject *))_cffi_exports[1])
-#define _cffi_to_c_u8                                                    \
-                 ((int(*)(PyObject *))_cffi_exports[2])
-#define _cffi_to_c_i16                                                   \
-                 ((int(*)(PyObject *))_cffi_exports[3])
-#define _cffi_to_c_u16                                                   \
-                 ((int(*)(PyObject *))_cffi_exports[4])
-#define _cffi_to_c_i32                                                   \
-                 ((int(*)(PyObject *))_cffi_exports[5])
-#define _cffi_to_c_u32                                                   \
-                 ((unsigned int(*)(PyObject *))_cffi_exports[6])
-#define _cffi_to_c_i64                                                   \
-                 ((long long(*)(PyObject *))_cffi_exports[7])
-#define _cffi_to_c_u64                                                   \
-                 ((unsigned long long(*)(PyObject *))_cffi_exports[8])
-#define _cffi_to_c_char                                                  \
-                 ((int(*)(PyObject *))_cffi_exports[9])
-#define _cffi_from_c_pointer                                             \
-    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[10])
-#define _cffi_to_c_pointer                                               \
-    ((char *(*)(PyObject *, struct _cffi_ctypedescr *))_cffi_exports[11])
-#define _cffi_get_struct_layout                                          \
-    not used any more
-#define _cffi_restore_errno                                              \
-    ((void(*)(void))_cffi_exports[13])
-#define _cffi_save_errno                                                 \
-    ((void(*)(void))_cffi_exports[14])
-#define _cffi_from_c_char                                                \
-    ((PyObject *(*)(char))_cffi_exports[15])
-#define _cffi_from_c_deref                                               \
-    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[16])
-#define _cffi_to_c                                                       \
-    ((int(*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[17])
-#define _cffi_from_c_struct                                              \
-    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[18])
-#define _cffi_to_c_wchar_t                                               \
-    ((_cffi_wchar_t(*)(PyObject *))_cffi_exports[19])
-#define _cffi_from_c_wchar_t                                             \
-    ((PyObject *(*)(_cffi_wchar_t))_cffi_exports[20])
-#define _cffi_to_c_long_double                                           \
-    ((long double(*)(PyObject *))_cffi_exports[21])
-#define _cffi_to_c__Bool                                                 \
-    ((_Bool(*)(PyObject *))_cffi_exports[22])
-#define _cffi_prepare_pointer_call_argument                              \
-    ((Py_ssize_t(*)(struct _cffi_ctypedescr *,                           \
-                    PyObject *, char **))_cffi_exports[23])
-#define _cffi_convert_array_from_object                                  \
-    ((int(*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[24])
-#define _CFFI_CPIDX  25
-#define _cffi_call_python                                                \
-    ((void(*)(struct _cffi_externpy_s *, char *))_cffi_exports[_CFFI_CPIDX])
-#define _cffi_to_c_wchar3216_t                                           \
-    ((int(*)(PyObject *))_cffi_exports[26])
-#define _cffi_from_c_wchar3216_t                                         \
-    ((PyObject *(*)(int))_cffi_exports[27])
-#define _CFFI_NUM_EXPORTS 28
-
-struct _cffi_ctypedescr;
-
-static void *_cffi_exports[_CFFI_NUM_EXPORTS];
-
-#define _cffi_type(index)   (                           \
-    assert((((uintptr_t)_cffi_types[index]) & 1) == 0), \
-    (struct _cffi_ctypedescr *)_cffi_types[index])
-
-static PyObject *_cffi_init(const char *module_name, Py_ssize_t version,
-                            const struct _cffi_type_context_s *ctx)
-{
-    PyObject *module, *o_arg, *new_module;
-    void *raw[] = {
-        (void *)module_name,
-        (void *)version,
-        (void *)_cffi_exports,
-        (void *)ctx,
-    };
-
-    module = PyImport_ImportModule("_cffi_backend");
-    if (module == NULL)
-        goto failure;
-
-    o_arg = PyLong_FromVoidPtr((void *)raw);
-    if (o_arg == NULL)
-        goto failure;
-
-    new_module = PyObject_CallMethod(
-        module, (char *)"_init_cffi_1_0_external_module", (char *)"O", o_arg);
-
-    Py_DECREF(o_arg);
-    Py_DECREF(module);
-    return new_module;
-
-  failure:
-    Py_XDECREF(module);
-    return NULL;
-}
-
-
-#ifdef HAVE_WCHAR_H
-typedef wchar_t _cffi_wchar_t;
-#else
-typedef uint16_t _cffi_wchar_t;   /* same random pick as _cffi_backend.c */
-#endif
-
-_CFFI_UNUSED_FN static uint16_t _cffi_to_c_char16_t(PyObject *o)
-{
-    if (sizeof(_cffi_wchar_t) == 2)
-        return (uint16_t)_cffi_to_c_wchar_t(o);
-    else
-        return (uint16_t)_cffi_to_c_wchar3216_t(o);
-}
-
-_CFFI_UNUSED_FN static PyObject *_cffi_from_c_char16_t(uint16_t x)
-{
-    if (sizeof(_cffi_wchar_t) == 2)
-        return _cffi_from_c_wchar_t((_cffi_wchar_t)x);
-    else
-        return _cffi_from_c_wchar3216_t((int)x);
-}
-
-_CFFI_UNUSED_FN static int _cffi_to_c_char32_t(PyObject *o)
-{
-    if (sizeof(_cffi_wchar_t) == 4)
-        return (int)_cffi_to_c_wchar_t(o);
-    else
-        return (int)_cffi_to_c_wchar3216_t(o);
-}
-
-_CFFI_UNUSED_FN static PyObject *_cffi_from_c_char32_t(unsigned int x)
-{
-    if (sizeof(_cffi_wchar_t) == 4)
-        return _cffi_from_c_wchar_t((_cffi_wchar_t)x);
-    else
-        return _cffi_from_c_wchar3216_t((int)x);
-}
-
-union _cffi_union_alignment_u {
-    unsigned char m_char;
-    unsigned short m_short;
-    unsigned int m_int;
-    unsigned long m_long;
-    unsigned long long m_longlong;
-    float m_float;
-    double m_double;
-    long double m_longdouble;
-};
-
-struct _cffi_freeme_s {
-    struct _cffi_freeme_s *next;
-    union _cffi_union_alignment_u alignment;
-};
-
-_CFFI_UNUSED_FN static int
-_cffi_convert_array_argument(struct _cffi_ctypedescr *ctptr, PyObject *arg,
-                             char **output_data, Py_ssize_t datasize,
-                             struct _cffi_freeme_s **freeme)
-{
-    char *p;
-    if (datasize < 0)
-        return -1;
-
-    p = *output_data;
-    if (p == NULL) {
-        struct _cffi_freeme_s *fp = (struct _cffi_freeme_s *)PyObject_Malloc(
-            offsetof(struct _cffi_freeme_s, alignment) + (size_t)datasize);
-        if (fp == NULL)
-            return -1;
-        fp->next = *freeme;
-        *freeme = fp;
-        p = *output_data = (char *)&fp->alignment;
-    }
-    memset((void *)p, 0, (size_t)datasize);
-    return _cffi_convert_array_from_object(p, ctptr, arg);
-}
-
-_CFFI_UNUSED_FN static void
-_cffi_free_array_arguments(struct _cffi_freeme_s *freeme)
-{
-    do {
-        void *p = (void *)freeme;
-        freeme = freeme->next;
-        PyObject_Free(p);
-    } while (freeme != NULL);
-}
-
-/**********  end CPython-specific section  **********/
-#else
-_CFFI_UNUSED_FN
-static void (*_cffi_call_python_org)(struct _cffi_externpy_s *, char *);
-# define _cffi_call_python  _cffi_call_python_org
-#endif
-
-
-#define _cffi_array_len(array)   (sizeof(array) / sizeof((array)[0]))
-
-#define _cffi_prim_int(size, sign)                                      \
-    ((size) == 1 ? ((sign) ? _CFFI_PRIM_INT8  : _CFFI_PRIM_UINT8)  :    \
-     (size) == 2 ? ((sign) ? _CFFI_PRIM_INT16 : _CFFI_PRIM_UINT16) :    \
-     (size) == 4 ? ((sign) ? _CFFI_PRIM_INT32 : _CFFI_PRIM_UINT32) :    \
-     (size) == 8 ? ((sign) ? _CFFI_PRIM_INT64 : _CFFI_PRIM_UINT64) :    \
-     _CFFI__UNKNOWN_PRIM)
-
-#define _cffi_prim_float(size)                                          \
-    ((size) == sizeof(float) ? _CFFI_PRIM_FLOAT :                       \
-     (size) == sizeof(double) ? _CFFI_PRIM_DOUBLE :                     \
-     (size) == sizeof(long double) ? _CFFI__UNKNOWN_LONG_DOUBLE :       \
-     _CFFI__UNKNOWN_FLOAT_PRIM)
-
-#define _cffi_check_int(got, got_nonpos, expected)      \
-    ((got_nonpos) == (expected <= 0) &&                 \
-     (got) == (unsigned long long)expected)
-
-#ifdef MS_WIN32
-# define _cffi_stdcall  __stdcall
-#else
-# define _cffi_stdcall  /* nothing */
-#endif
-
-#ifdef __cplusplus
-}
-#endif
Index: cffi/_imp_emulation 2.py
===================================================================
diff --git a/cffi/_imp_emulation 2.py b/cffi/_imp_emulation 2.py
deleted file mode 100644
--- a/cffi/_imp_emulation 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,83 +0,0 @@
-
-try:
-    # this works on Python < 3.12
-    from imp import *
-
-except ImportError:
-    # this is a limited emulation for Python >= 3.12.
-    # Note that this is used only for tests or for the old ffi.verify().
-    # This is copied from the source code of Python 3.11.
-
-    from _imp import (acquire_lock, release_lock,
-                      is_builtin, is_frozen)
-
-    from importlib._bootstrap import _load
-
-    from importlib import machinery
-    import os
-    import sys
-    import tokenize
-
-    SEARCH_ERROR = 0
-    PY_SOURCE = 1
-    PY_COMPILED = 2
-    C_EXTENSION = 3
-    PY_RESOURCE = 4
-    PKG_DIRECTORY = 5
-    C_BUILTIN = 6
-    PY_FROZEN = 7
-    PY_CODERESOURCE = 8
-    IMP_HOOK = 9
-
-    def get_suffixes():
-        extensions = [(s, 'rb', C_EXTENSION)
-                      for s in machinery.EXTENSION_SUFFIXES]
-        source = [(s, 'r', PY_SOURCE) for s in machinery.SOURCE_SUFFIXES]
-        bytecode = [(s, 'rb', PY_COMPILED) for s in machinery.BYTECODE_SUFFIXES]
-        return extensions + source + bytecode
-
-    def find_module(name, path=None):
-        if not isinstance(name, str):
-            raise TypeError("'name' must be a str, not {}".format(type(name)))
-        elif not isinstance(path, (type(None), list)):
-            # Backwards-compatibility
-            raise RuntimeError("'path' must be None or a list, "
-                               "not {}".format(type(path)))
-
-        if path is None:
-            if is_builtin(name):
-                return None, None, ('', '', C_BUILTIN)
-            elif is_frozen(name):
-                return None, None, ('', '', PY_FROZEN)
-            else:
-                path = sys.path
-
-        for entry in path:
-            package_directory = os.path.join(entry, name)
-            for suffix in ['.py', machinery.BYTECODE_SUFFIXES[0]]:
-                package_file_name = '__init__' + suffix
-                file_path = os.path.join(package_directory, package_file_name)
-                if os.path.isfile(file_path):
-                    return None, package_directory, ('', '', PKG_DIRECTORY)
-            for suffix, mode, type_ in get_suffixes():
-                file_name = name + suffix
-                file_path = os.path.join(entry, file_name)
-                if os.path.isfile(file_path):
-                    break
-            else:
-                continue
-            break  # Break out of outer loop when breaking out of inner loop.
-        else:
-            raise ImportError(name, name=name)
-
-        encoding = None
-        if 'b' not in mode:
-            with open(file_path, 'rb') as file:
-                encoding = tokenize.detect_encoding(file.readline)[0]
-        file = open(file_path, mode, encoding=encoding)
-        return file, file_path, (suffix, mode, type_)
-
-    def load_dynamic(name, path, file=None):
-        loader = machinery.ExtensionFileLoader(name, path)
-        spec = machinery.ModuleSpec(name=name, loader=loader, origin=path)
-        return _load(spec)
Index: env/pyvenv 3.cfg
===================================================================
diff --git a/env/pyvenv 3.cfg b/env/pyvenv 3.cfg
deleted file mode 100644
--- a/env/pyvenv 3.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Library/Frameworks/Python.framework/Versions/3.11/bin
-include-system-site-packages = false
-version = 3.11.4
-executable = /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11
-command = /Library/Frameworks/Python.framework/Versions/3.11/bin/python3 -m venv /Users/derrickbass/Documents/nomad/env
Index: src/user_service.egg-info/SOURCES 2.txt
===================================================================
diff --git a/src/user_service.egg-info/SOURCES 2.txt b/src/user_service.egg-info/SOURCES 2.txt
deleted file mode 100644
--- a/src/user_service.egg-info/SOURCES 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,6 +0,0 @@
-setup.py
-src/user_service.egg-info/PKG-INFO
-src/user_service.egg-info/SOURCES.txt
-src/user_service.egg-info/dependency_links.txt
-src/user_service.egg-info/requires.txt
-src/user_service.egg-info/top_level.txt
\ No newline at end of file
Index: EdStatsCountry-Series.csv
===================================================================
diff --git a/EdStatsCountry-Series.csv b/EdStatsCountry-Series.csv
deleted file mode 100644
--- a/EdStatsCountry-Series.csv	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,614 +0,0 @@
-"CountryCode","SeriesCode","DESCRIPTION",
-"ABW","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ABW","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"AFG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"AFG","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"AFG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"AFG","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"AFG","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"AFG","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"AFG","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"AFG","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"AGO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"AGO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ALB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ALB","SP.POP.TOTL","Data sources : Institute of Statistics, Eurostat",
-"AND","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"AND","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ARE","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ARE","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ARG","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"ARG","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"ARG","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"ARG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ARG","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"ARG","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"ARG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ARG","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"ARM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ARM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ASM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ASM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ATG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ATG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"AUS","SP.POP.TOTL","Data sources : Australian Bureau of Statistics",
-"AUS","SP.POP.1564.TO.ZS","Including Other Territories comprising Jervis Bay Territory, Christmas Island and the Cocos (Keeling) Islands. ",
-"AUS","SP.POP.GROW","Data sources: Australian Bureau of Statistics",
-"AUS","SP.POP.TOTL.MA.ZS","Including Other Territories comprising Jervis Bay Territory, Christmas Island and the Cocos (Keeling) Islands. ",
-"AUS","SP.POP.TOTL.FE.ZS","Including Other Territories comprising Jervis Bay Territory, Christmas Island and the Cocos (Keeling) Islands. ",
-"AUS","SP.POP.0014.TO.ZS","Including Other Territories comprising Jervis Bay Territory, Christmas Island and the Cocos (Keeling) Islands. ",
-"AUT","SP.POP.GROW","Data sources : Eurostat",
-"AUT","SP.POP.TOTL","Data sources : Eurostat",
-"AZE","SP.POP.TOTL","Data sources : Eurostat, State Statistical Committee, United Nations World Population Prospects",
-"AZE","SP.POP.GROW","Data sources: Eurostat, State Statistical Committee, United Nations World Population Prospects",
-"BDI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BDI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BEL","SP.POP.TOTL","Data sources : Eurostat",
-"BEL","SP.POP.GROW","Data sources : Eurostat",
-"BEN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BEN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BFA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BFA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BGD","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BGD","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BGR","SP.POP.TOTL","Data sources : Eurostat",
-"BGR","SP.POP.GROW","Data sources : Eurostat",
-"BHR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BHR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BHS","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BHS","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BIH","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BIH","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BLR","SP.POP.TOTL","Data sources : National Statistical Committee of the Republic of Belarus",
-"BLR","SP.POP.GROW","Data sources: National Statistical Committee of the Republic of Belarus",
-"BLZ","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BLZ","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BMU","SP.POP.TOTL","Data sources : Bermuda Government Department of Statistics",
-"BMU","SP.POP.GROW","Data sources: Bermuda Government Department of Statistics",
-"BOL","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BOL","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BRA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BRA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BRB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BRB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BRN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BRN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BTN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"BTN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BWA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"BWA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CAF","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CAF","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CAN","SP.POP.TOTL","Data sources : Statistics Canada",
-"CAN","SP.POP.GROW","Data sources: Statistics Canada",
-"CHE","SP.POP.GROW","Data sources : Eurostat",
-"CHE","SP.POP.TOTL","Data sources : Eurostat",
-"CHI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CHI","SP.POP.0014.TO.ZS","Refers to Guernsey, and Jersey.",
-"CHI","SP.POP.1564.TO.ZS","Refers to Guernsey, and Jersey.",
-"CHI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CHI","SP.POP.TOTL.FE.ZS","Refers to Guernsey, and Jersey.",
-"CHI","SP.POP.TOTL.MA.ZS","Refers to Guernsey, and Jersey.",
-"CHL","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CHL","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CHN","SP.POP.TOTL","Data sources : National Bureau of Statistics",
-"CHN","SP.POP.0014.TO.ZS","Excluding Hong Kong SAR, Macao SAR, Taiwan.",
-"CHN","SP.POP.1564.TO.ZS","Excluding Hong Kong SAR, Macao SAR, Taiwan.",
-"CHN","SP.POP.GROW","Data sources: National Bureau of Statistics",
-"CHN","SP.POP.TOTL.MA.ZS","Excluding Hong Kong SAR, Macao SAR, Taiwan.",
-"CHN","SP.POP.TOTL.FE.ZS","Excluding Hong Kong SAR, Macao SAR, Taiwan.",
-"CIV","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CIV","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CMR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CMR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"COD","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"COD","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"COG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"COG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"COL","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"COL","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"COM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"COM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CPV","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CPV","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CRI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CRI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CUB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CUB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CYM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CYM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CYP","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"CYP","NY.GDP.PCAP.PP.KD","Data are for areas under the effective control of the Government of the Republic of Cyprus.",
-"CYP","SP.POP.TOTL.FE.ZS","Including Northern-Cyprus.",
-"CYP","SP.POP.TOTL.MA.ZS","Including Northern-Cyprus.",
-"CYP","NY.GNP.PCAP.CD","Data are for areas under the effective control of the Government of the Republic of Cyprus.",
-"CYP","NY.GNP.PCAP.PP.CD","Data are for areas under the effective control of the Government of the Republic of Cyprus.",
-"CYP","SP.POP.0014.TO.ZS","Including Northern-Cyprus.",
-"CYP","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"CYP","NY.GDP.PCAP.PP.CD","Data are for areas under the effective control of the Government of the Republic of Cyprus.",
-"CYP","SP.POP.1564.TO.ZS","Including Northern-Cyprus.",
-"CYP","NY.GDP.PCAP.CD","Data are for areas under the effective control of the Government of the Republic of Cyprus.",
-"CYP","NY.GDP.PCAP.KD","Data are for areas under the effective control of the Government of the Republic of Cyprus.",
-"CZE","SP.POP.TOTL","Data sources : Eurostat",
-"CZE","SP.POP.GROW","Data sources : Eurostat",
-"DEU","SP.POP.GROW","Data sources : Eurostat",
-"DEU","SP.POP.TOTL","Data sources : Eurostat",
-"DJI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"DJI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"DMA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"DMA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"DNK","SP.POP.TOTL","Data sources : Eurostat",
-"DNK","SP.POP.GROW","Data sources : Eurostat",
-"DOM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"DOM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"DZA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"DZA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ECU","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ECU","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"EGY","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"EGY","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ERI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ERI","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"ERI","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"ERI","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"ERI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ERI","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"ERI","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"ERI","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"ESP","SP.POP.TOTL","Data sources : Eurostat",
-"ESP","SP.POP.GROW","Data sources : Eurostat",
-"EST","SP.POP.GROW","Data sources : Eurostat",
-"EST","SP.POP.TOTL","Data sources : Eurostat",
-"ETH","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ETH","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"FIN","SP.POP.GROW","Data sources : Eurostat",
-"FIN","SP.POP.TOTL","Data sources : Eurostat",
-"FJI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"FJI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"FRA","SP.POP.GROW","Data sources: Eurostat, United Nations World Population Prospects. Including the French overseas departments of French Guiana, Guadeloupe, Martinique, Mayotte, and Réunion.",
-"FRA","SP.POP.TOTL.MA.ZS","Including the four French overseas departments (French Guyana, Guadeloupe, Martinique and Réunion)",
-"FRA","SP.POP.TOTL.FE.ZS","Including the four French overseas departments (French Guyana, Guadeloupe, Martinique and Réunion)",
-"FRA","SP.POP.TOTL","Data sources : Eurostat, United Nations World Population Prospects. Including the French overseas departments of French Guiana, Guadeloupe, Martinique, Mayotte, and Réunion.",
-"FRA","SP.POP.0014.TO.ZS","Including the four French overseas departments (French Guyana, Guadeloupe, Martinique and Réunion)",
-"FRA","SP.POP.1564.TO.ZS","Including the four French overseas departments (French Guyana, Guadeloupe, Martinique and Réunion)",
-"FRO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"FRO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"FSM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"FSM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GAB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GAB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GBR","SP.POP.GROW","Data sources: Eurostat",
-"GBR","SP.POP.TOTL","Data sources : Eurostat",
-"GEO","SP.POP.TOTL","Data sources : GeoStats. GeoStats. Adjusted to mid-year population using geometric mean for the years where mid-year population figures are not available. Excluding Abkhazia and South Ossetia.",
-"GEO","SP.POP.0014.TO.ZS","Including Abkhazia and South Ossetia.",
-"GEO","NY.GDP.PCAP.PP.CD","Excludes Abkhazia and South Ossetia.",
-"GEO","SP.POP.1564.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"GEO","SP.POP.0014.TO","Derived using ratio of age group from WPP and World Bank population.",
-"GEO","SP.POP.1564.TO.ZS","Including Abkhazia and South Ossetia.",
-"GEO","NY.GDP.PCAP.KD","Excludes Abkhazia and South Ossetia.",
-"GEO","SP.POP.1564.TO","Derived using ratio of age group from WPP and World Bank population.",
-"GEO","SP.POP.1564.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"GEO","NY.GDP.PCAP.CD","Excludes Abkhazia and South Ossetia.",
-"GEO","SP.POP.GROW","Data sources: GeoStats. GeoStats. Adjusted to mid-year population using geometric mean for the years where mid-year population figures are not available. Excluding Abkhazia and South Ossetia.",
-"GEO","SP.POP.0014.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"GEO","NY.GDP.PCAP.PP.KD","Excludes Abkhazia and South Ossetia.",
-"GEO","SP.POP.TOTL.FE.ZS","Excluding Abkhazia and South Ossetia.",
-"GEO","SP.POP.0014.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"GEO","SP.POP.TOTL.MA.ZS","Excluding Abkhazia and South Ossetia.",
-"GEO","NY.GNP.PCAP.CD","Excludes Abkhazia and South Ossetia.",
-"GEO","NY.GNP.PCAP.PP.CD","Excludes Abkhazia and South Ossetia.",
-"GHA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GHA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GIB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GIB","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"GIN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GIN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GMB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GMB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GNB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GNB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GNQ","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GNQ","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GRC","SP.POP.GROW","Data sources : Eurostat",
-"GRC","SP.POP.TOTL","Data sources : Eurostat",
-"GRD","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GRD","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GRL","SP.POP.GROW","Data sources: Statistics Greenland",
-"GRL","SP.POP.TOTL","Data sources : Statistics Greenland",
-"GTM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GTM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GUM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GUM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GUY","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"GUY","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"GUY","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"GUY","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"GUY","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"GUY","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"GUY","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"GUY","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"HKG","SP.POP.GROW","Data sources: Census and Statistics Department",
-"HKG","SP.POP.TOTL","Data sources : Census and Statistics Department",
-"HND","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"HND","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"HRV","SP.POP.GROW","Data sources: Croatian Bureau of Statistics, Council of Europe",
-"HRV","SP.POP.TOTL","Data sources : Croatian Bureau of Statistics, Council of Europe",
-"HTI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"HTI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"HUN","SP.POP.GROW","Data sources : Eurostat",
-"HUN","SP.POP.TOTL","Data sources : Eurostat",
-"IDN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"IDN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"IMN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"IMN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"IND","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"IND","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"IRL","SP.POP.GROW","Data sources : Eurostat",
-"IRL","SP.POP.TOTL","Data sources : Eurostat",
-"IRN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"IRN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"IRQ","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"IRQ","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ISL","SP.POP.TOTL","Data sources : Eurostat",
-"ISL","SP.POP.GROW","Data sources : Eurostat",
-"ISR","SP.POP.GROW","Data sources: Central Bureau of Statistics",
-"ISR","SP.POP.TOTL","Data sources : Central Bureau of Statistics",
-"ITA","SP.POP.TOTL","Data sources : Eurostat",
-"ITA","SP.POP.GROW","Data sources : Eurostat",
-"JAM","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"JAM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"JOR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"JOR","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"JPN","SP.POP.GROW","Data sources: Ministry of Internal Affairs and Communications, Statistics Bureau; United Nations Population and Vital Statistics Report",
-"JPN","SP.POP.TOTL","Data sources : Ministry of Internal Affairs and Communications, Statistics Bureau; United Nations Population and Vital Statistics Report",
-"KAZ","SP.POP.TOTL","Data sources : Statistical Agency of Kazakhstan, 1979 Census, 1989 Census, United Nations World Population Prospects",
-"KAZ","SP.POP.GROW","Data sources: Statistical Agency of Kazakhstan, 1979 Census, 1989 Census, United Nations World Population Prospects",
-"KEN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"KEN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"KGZ","SP.POP.TOTL","Data sources : National Statistical Committee, United Nations World Population Prospects",
-"KGZ","SP.POP.GROW","Data sources: National Statistical Committee, United Nations World Population Prospects",
-"KHM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"KHM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"KIR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"KIR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"KNA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"KNA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"KOR","SP.POP.TOTL","Data sources : Korean Statistical Information Service",
-"KOR","SP.POP.GROW","Data sources: Korean Statistical Information Service",
-"KWT","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"KWT","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LAO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LAO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"LBN","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"LBN","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"LBN","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"LBN","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"LBN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LBN","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"LBN","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"LBN","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"LBR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LBR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"LBY","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"LBY","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"LBY","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"LBY","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"LBY","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LBY","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"LBY","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"LBY","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"LCA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LCA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"LIE","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"LIE","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LKA","SP.POP.TOTL","Data sources : Registrar General's Department, Department of Census and Statistics",
-"LKA","SP.POP.GROW","Data sources: Registrar General's Department, Department of Census and Statistics",
-"LSO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"LSO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"LTU","SP.POP.TOTL","Data sources : Eurostat",
-"LTU","SP.POP.GROW","Data sources : Eurostat",
-"LUX","SP.POP.GROW","Data sources: Eurostat",
-"LUX","SP.POP.TOTL","Data sources : Eurostat",
-"LVA","SP.POP.TOTL","Data sources : Eurostat",
-"LVA","SP.POP.GROW","Data sources : Eurostat",
-"MAC","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MAC","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MAR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MAR","NY.GDP.PCAP.KD","Includes Former Spanish Sahara.",
-"MAR","SP.POP.1564.TO.ZS","Morocco only. (Excluding former Spanish Sahara)",
-"MAR","NY.GDP.PCAP.CD","Includes Former Spanish Sahara.",
-"MAR","NY.GDP.PCAP.PP.CD","Includes Former Spanish Sahara.",
-"MAR","SP.POP.0014.TO.ZS","Morocco only. (Excluding former Spanish Sahara)",
-"MAR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MAR","NY.GDP.PCAP.PP.KD","Includes Former Spanish Sahara.",
-"MAR","SP.POP.TOTL.FE.ZS","Morocco only. (Excluding former Spanish Sahara)",
-"MAR","SP.POP.TOTL.MA.ZS","Morocco only. (Excluding former Spanish Sahara)",
-"MAR","NY.GNP.PCAP.CD","Includes Former Spanish Sahara.",
-"MAR","NY.GNP.PCAP.PP.CD","Includes Former Spanish Sahara.",
-"MCO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MCO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MDA","SP.POP.TOTL","Data sources : National Bureau of Statistics. Excluding Transnistria. For 1950-94, World Bank estimates using UN World Population Prospects' growth rates of whole Moldova.",
-"MDA","NY.GDP.PCAP.CD","Excludes Transnistria.",
-"MDA","SP.POP.1564.TO.ZS","Including Transnistria.",
-"MDA","NY.GDP.PCAP.KD","Excludes Transnistria.",
-"MDA","SP.POP.1564.TO","Derived using ratio of age group from WPP and World Bank population.",
-"MDA","SP.POP.1564.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MDA","SP.POP.0014.TO.ZS","Including Transnistria.",
-"MDA","NY.GDP.PCAP.PP.CD","Excludes Transnistria.",
-"MDA","SP.POP.0014.TO","Derived using ratio of age group from WPP and World Bank population.",
-"MDA","SP.POP.1564.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MDA","SP.POP.GROW","Data sources: National Bureau of Statistics. Excluding Transnistria. For 1950-94, World Bank estimates using UN World Population Prospects 2010 Revision's growth rates of whole Moldova.",
-"MDA","SP.POP.0014.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MDA","NY.GNP.PCAP.PP.CD","Excludes Transnistria.",
-"MDA","NY.GNP.PCAP.CD","Excludes Transnistria.",
-"MDA","SP.POP.TOTL.MA.ZS","Excluding Transnistria.",
-"MDA","SP.POP.TOTL.FE.ZS","Excluding Transnistria.",
-"MDA","NY.GDP.PCAP.PP.KD","Excludes Transnistria.",
-"MDA","SP.POP.0014.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MDG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MDG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MDV","SP.POP.TOTL","Data sources : For 1960-1989, United Nations World Population Prospects. For 1990 onwards, 1990, 1995, 2000, 2006, 2014 censuses, and data on expatriate employment from Maldives National Bureau of Statistics. The census data are adjusted for mid-year and for foreign population.",
-"MDV","SP.POP.GROW","Data sources: For 1960-1989, United Nations World Population Prospects. For 1990 onwards, 1990, 1995, 2000, 2006, 2014 censuses, and data on expatriate employment from Maldives National Bureau of Statistics. The census data are adjusted for mid-year and for foreign population.",
-"MEX","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MEX","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MHL","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MHL","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MKD","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MKD","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MLI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MLI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MLT","SP.POP.GROW","Data sources : Eurostat",
-"MLT","SP.POP.TOTL","Data sources : Eurostat",
-"MMR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MMR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MNE","SP.POP.GROW","Data sources : For years after 2000, Statistical Office of Montenegro. For years 1960-1999, growth rates of United Nations World Population Prospects were used to estimate backwards.",
-"MNE","SP.POP.TOTL","Data sources : For years after 2000, Statistical Office of Montenegro. For years 1960-1999, growth rates of United Nations World Population Prospects were used to estimate backwards.",
-"MNG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MNG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MNP","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MNP","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MOZ","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MOZ","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MRT","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MRT","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MUS","SP.POP.TOTL","Data sources : Statistics Mauritius, United Nations World Population Prospects",
-"MUS","SP.POP.1564.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MUS","SP.POP.1564.TO","Derived using ratio of age group from WPP and World Bank population.",
-"MUS","SP.POP.1564.TO.ZS","Including Agalega and St. Brandon.",
-"MUS","SP.POP.1564.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MUS","SP.POP.0014.TO","Derived using ratio of age group from WPP and World Bank population.",
-"MUS","SP.POP.0014.TO.ZS","Including Agalega and St. Brandon.",
-"MUS","SP.POP.GROW","Data sources: Central Statistics Office, United Nations Population and Vital Statistics Report, United Nations World Population Prospects",
-"MUS","SP.POP.0014.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MUS","SP.POP.0014.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"MUS","SP.POP.TOTL.FE.ZS","Excluding Agalega and St. Brandon.",
-"MUS","SP.POP.TOTL.MA.ZS","Excluding Agalega and St. Brandon.",
-"MWI","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MWI","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MYS","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"MYS","SP.POP.1564.TO.ZS","Including Sabah and Sarawak.",
-"MYS","SP.POP.0014.TO.ZS","Including Sabah and Sarawak.",
-"MYS","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"MYS","SP.POP.TOTL.MA.ZS","Including Sabah and Sarawak.",
-"MYS","SP.POP.TOTL.FE.ZS","Including Sabah and Sarawak.",
-"NAM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"NAM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"NCL","SP.POP.TOTL","Data sources : Institute of Statistics and Economic Studies",
-"NCL","SP.POP.GROW","Data sources: Institute of Statistics and Economic Studies, 1983 Census, 1989 Census, 1996 Census",
-"NER","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"NER","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"NGA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"NGA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"NIC","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"NIC","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"NLD","SP.POP.TOTL","Data sources : Eurostat",
-"NLD","SP.POP.GROW","Data sources : Eurostat",
-"NOR","SP.POP.GROW","Data sources : Eurostat",
-"NOR","SP.POP.TOTL","Data sources : Eurostat",
-"NPL","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"NPL","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"NZL","SP.POP.GROW","Data sources: Statistics New Zealand",
-"NZL","SP.POP.TOTL","Data sources : Statistics New Zealand",
-"OMN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"OMN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PAK","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PAK","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PAN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PAN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PER","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PER","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PHL","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PHL","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PLW","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PLW","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PNG","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PNG","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"POL","SP.POP.GROW","Data sources : Eurostat",
-"POL","SP.POP.TOTL","Data sources : Eurostat",
-"PRI","SP.POP.TOTL","Data sources : U.S. Census Bureau, 1990 Census",
-"PRI","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"PRI","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"PRI","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"PRI","SP.POP.GROW","Data sources: U.S. Census Bureau, 1990 Census",
-"PRI","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"PRI","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"PRI","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"PRK","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PRK","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PRT","SP.POP.TOTL","Data sources : Eurostat",
-"PRT","SP.POP.GROW","Data sources : Eurostat",
-"PRY","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PRY","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"PSE","SP.POP.TOTL","Data sources : World Bank estimates based on data from Palestinian Central Bureau of Statistics, excluding E. Jerusalem.",
-"PSE","SP.POP.1564.TO.ZS","Excluding East Jerusalem.",
-"PSE","SP.POP.0014.TO.ZS","Excluding East Jerusalem.",
-"PSE","SP.POP.GROW","Data sources: World Bank estimates based on data from Palestinian Central Bureau of Statistics, excluding E. Jerusalem.",
-"PSE","SP.POP.TOTL.FE.ZS","Excluding East Jerusalem.",
-"PSE","SP.POP.TOTL.MA.ZS","Excluding East Jerusalem.",
-"PYF","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"PYF","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"QAT","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"QAT","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ROU","SP.POP.GROW","Data sources : Eurostat",
-"ROU","SP.POP.TOTL","Data sources : Eurostat",
-"RUS","SP.POP.TOTL","Data sources : Russian Federation Federal State Statistics Service (its January 1st populations were adjusted to mid-year populations by using geometric mean), 1979 Census, 1989 Census.",
-"RUS","SP.POP.GROW","Data sources : Russian Federation Federal State Statistics Service (its January 1st populations were adjusted to mid-year populations by using geometric mean), 1979 Census, 1989 Census.",
-"RWA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"RWA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SAU","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SAU","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SDN","SP.POP.GROW","Data sources : United Nations World Population Prospects. Estimates are for Sudan excluding South Sudan.",
-"SDN","SP.POP.TOTL","Data sources : United Nations World Population Prospects. Estimates are for Sudan excluding South Sudan.",
-"SEN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SEN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SGP","SP.POP.GROW","Data sources: Department of Statistics Singapore",
-"SGP","SP.POP.TOTL","Data sources : Department of Statistics Singapore",
-"SLB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SLB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SLE","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SLE","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SLV","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SLV","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SMR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SMR","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"SMR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SMR","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"SMR","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"SMR","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"SMR","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"SMR","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"SOM","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"SOM","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"SOM","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"SOM","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"SOM","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"SOM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SOM","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"SOM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SRB","SP.POP.GROW","Data sources: Statistical Office of the Republic of Serbia, Eurostat, TransMONEE, Council of Europe. Excluding Kosovo for all years 1950-2011",
-"SRB","SP.POP.0014.TO","Derived using ratio of age group from WPP and World Bank population.",
-"SRB","SP.POP.1564.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"SRB","SP.POP.0014.TO.ZS","Including Kosovo.",
-"SRB","SP.POP.TOTL","Data sources : Statistical Office of the Republic of Serbia, Eurostat, TransMONEE, Council of Europe. Note : Excluding Kosovo.",
-"SRB","SP.POP.1564.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"SRB","SP.POP.1564.TO.ZS","Including Kosovo.",
-"SRB","SP.POP.1564.TO","Derived using ratio of age group from WPP and World Bank population.",
-"SRB","SP.POP.0014.MA.IN","Derived using ratio of age group from WPP and World Bank population.",
-"SRB","SP.POP.0014.FE.IN","Derived using ratio of age group from WPP and World Bank population.",
-"SRB","SP.POP.TOTL.FE.ZS","Excluding Kosovo.",
-"SRB","SP.POP.TOTL.MA.ZS","Excluding Kosovo.",
-"STP","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"STP","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SUR","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SUR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SVK","SP.POP.TOTL","Data sources : Eurostat",
-"SVK","SP.POP.GROW","Data sources : Eurostat",
-"SVN","SP.POP.GROW","Data sources : Eurostat",
-"SVN","SP.POP.TOTL","Data sources : Eurostat",
-"SWE","SP.POP.TOTL","Data sources : Eurostat",
-"SWE","SP.POP.GROW","Data sources : Eurostat",
-"SWZ","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"SWZ","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SYC","SP.POP.TOTL","Data sources : National Bureau of Statistics",
-"SYC","SP.POP.GROW","Data sources: National Bureau of Statistics",
-"SYR","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"SYR","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"SYR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"SYR","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"SYR","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"SYR","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"SYR","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"SYR","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"TCA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TCA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TCD","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TCD","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TGO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TGO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"THA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"THA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TJK","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TJK","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TKM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TKM","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"TKM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TKM","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"TKM","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"TKM","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"TKM","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"TKM","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"TLS","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"TLS","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"TLS","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"TLS","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"TLS","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"TLS","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TLS","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"TLS","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"TON","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TON","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TTO","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TTO","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TUN","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"TUN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TUR","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TUR","SP.POP.GROW","Data sources : United Nations World Population Prospects",
-"TUV","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TUV","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TZA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"TZA","NY.GDP.PCAP.CD","Covers mainland Tanzania only.",
-"TZA","SP.POP.1564.TO.ZS","Including Zanzibar.",
-"TZA","NY.GDP.PCAP.KD","Covers mainland Tanzania only.",
-"TZA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"TZA","NY.GDP.PCAP.PP.CD","Covers mainland Tanzania only.",
-"TZA","SP.POP.0014.TO.ZS","Including Zanzibar.",
-"TZA","NY.GDP.PCAP.PP.KD","Covers mainland Tanzania only.",
-"TZA","NY.GNP.PCAP.PP.CD","Covers mainland Tanzania only.",
-"TZA","NY.GNP.PCAP.CD","Covers mainland Tanzania only.",
-"TZA","SP.POP.TOTL.MA.ZS","Including Zanzibar.",
-"TZA","SP.POP.TOTL.FE.ZS","Including Zanzibar.",
-"UGA","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"UGA","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"UKR","SP.POP.TOTL","Data sources : State Statistics Committee of Ukraine, United Nations World Population Prospects, Council of Europe, United Nations Population and Vital Statistics Report",
-"UKR","SP.POP.GROW","Data sources: State Statistics Committee of Ukraine, United Nations World Population Prospects, Council of Europe, United Nations Population and Vital Statistics Report",
-"URY","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"URY","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"USA","SP.POP.TOTL","Data sources : U.S. Census Bureau",
-"USA","SP.POP.GROW","Data sources: U.S. Census Bureau",
-"UZB","SP.POP.GROW","Data sources : State Committee of the Republic of Uzbekistan on Statistics, United Nations World Population Prospects",
-"UZB","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"UZB","SP.POP.TOTL","Data sources : State Committee of the Republic of Uzbekistan on Statistics, United Nations World Population Prospects",
-"UZB","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"UZB","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"UZB","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"UZB","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"UZB","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"VCT","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"VCT","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"VEN","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"VEN","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"VEN","NY.GNP.PCAP.CD","Based on official exchange rates.",
-"VIR","SP.POP.TOTL","Data sources : U.S. Census Bureau, United Nations Population and Vital Statistics Report",
-"VIR","SP.POP.GROW","Data sources: U.S. Census Bureau, United Nations Population and Vital Statistics Report",
-"VNM","SP.POP.GROW","Data sources: General Statistics Office of Vietnam",
-"VNM","SP.POP.TOTL","Data sources : General Statistics Office of Vietnam",
-"VUT","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"VUT","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"WSM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"WSM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"XKX","SP.POP.TOTL","Data sources : World Bank's Kosovo coutnry office, Kosovo Agency of Statistics, U.S. Census Bureau",
-"XKX","NY.GDP.MKTP.PP.KD","Estimates are based on regression.",
-"XKX","NY.GNP.MKTP.PP.CD","Estimates are based on regression.",
-"XKX","SP.POP.GROW","Data sources: World Bank's Kosovo coutnry office, Kosovo Agency of Statistics, U.S. Census Bureau",
-"XKX","NY.GDP.PCAP.PP.CD","Estimates are based on regression.",
-"XKX","NY.GNP.PCAP.PP.CD","Estimates are based on regression.",
-"XKX","NY.GDP.MKTP.PP.CD","Estimates are based on regression.",
-"XKX","NY.GDP.PCAP.PP.KD","Estimates are based on regression.",
-"YEM","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"YEM","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ZAF","SP.POP.TOTL","Data sources : Statistics South Africa, United Nations World Population Prospects",
-"ZAF","SP.POP.GROW","Data sources : Statistics South Africa, United Nations World Population Prospects",
-"ZMB","SP.POP.GROW","Data sources: United Nations World Population Prospects",
-"ZMB","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ZWE","SP.POP.TOTL","Data sources : United Nations World Population Prospects",
-"ZWE","SP.POP.GROW","Data sources: United Nations World Population Prospects",
Index: blinker/_saferef 2.py
===================================================================
diff --git a/blinker/_saferef 2.py b/blinker/_saferef 2.py
deleted file mode 100644
--- a/blinker/_saferef 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,230 +0,0 @@
-# extracted from Louie, http://pylouie.org/
-# updated for Python 3
-#
-# Copyright (c) 2006 Patrick K. O'Brien, Mike C. Fletcher,
-#                    Matthew R. Scott
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met:
-#
-#     * Redistributions of source code must retain the above copyright
-#       notice, this list of conditions and the following disclaimer.
-#
-#     * Redistributions in binary form must reproduce the above
-#       copyright notice, this list of conditions and the following
-#       disclaimer in the documentation and/or other materials provided
-#       with the distribution.
-#
-#     * Neither the name of the <ORGANIZATION> nor the names of its
-#       contributors may be used to endorse or promote products derived
-#       from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-"""Refactored 'safe reference from dispatcher.py"""
-import operator
-import sys
-import traceback
-import weakref
-
-
-get_self = operator.attrgetter("__self__")
-get_func = operator.attrgetter("__func__")
-
-
-def safe_ref(target, on_delete=None):
-    """Return a *safe* weak reference to a callable target.
-
-    - ``target``: The object to be weakly referenced, if it's a bound
-      method reference, will create a BoundMethodWeakref, otherwise
-      creates a simple weakref.
-
-    - ``on_delete``: If provided, will have a hard reference stored to
-      the callable to be called after the safe reference goes out of
-      scope with the reference object, (either a weakref or a
-      BoundMethodWeakref) as argument.
-    """
-    try:
-        im_self = get_self(target)
-    except AttributeError:
-        if callable(on_delete):
-            return weakref.ref(target, on_delete)
-        else:
-            return weakref.ref(target)
-    else:
-        if im_self is not None:
-            # Turn a bound method into a BoundMethodWeakref instance.
-            # Keep track of these instances for lookup by disconnect().
-            assert hasattr(target, "im_func") or hasattr(target, "__func__"), (
-                f"safe_ref target {target!r} has im_self, but no im_func, "
-                "don't know how to create reference"
-            )
-            reference = BoundMethodWeakref(target=target, on_delete=on_delete)
-            return reference
-
-
-class BoundMethodWeakref:
-    """'Safe' and reusable weak references to instance methods.
-
-    BoundMethodWeakref objects provide a mechanism for referencing a
-    bound method without requiring that the method object itself
-    (which is normally a transient object) is kept alive.  Instead,
-    the BoundMethodWeakref object keeps weak references to both the
-    object and the function which together define the instance method.
-
-    Attributes:
-
-    - ``key``: The identity key for the reference, calculated by the
-      class's calculate_key method applied to the target instance method.
-
-    - ``deletion_methods``: Sequence of callable objects taking single
-      argument, a reference to this object which will be called when
-      *either* the target object or target function is garbage
-      collected (i.e. when this object becomes invalid).  These are
-      specified as the on_delete parameters of safe_ref calls.
-
-    - ``weak_self``: Weak reference to the target object.
-
-    - ``weak_func``: Weak reference to the target function.
-
-    Class Attributes:
-
-    - ``_all_instances``: Class attribute pointing to all live
-      BoundMethodWeakref objects indexed by the class's
-      calculate_key(target) method applied to the target objects.
-      This weak value dictionary is used to short-circuit creation so
-      that multiple references to the same (object, function) pair
-      produce the same BoundMethodWeakref instance.
-    """
-
-    _all_instances = weakref.WeakValueDictionary()  # type: ignore[var-annotated]
-
-    def __new__(cls, target, on_delete=None, *arguments, **named):
-        """Create new instance or return current instance.
-
-        Basically this method of construction allows us to
-        short-circuit creation of references to already-referenced
-        instance methods.  The key corresponding to the target is
-        calculated, and if there is already an existing reference,
-        that is returned, with its deletion_methods attribute updated.
-        Otherwise the new instance is created and registered in the
-        table of already-referenced methods.
-        """
-        key = cls.calculate_key(target)
-        current = cls._all_instances.get(key)
-        if current is not None:
-            current.deletion_methods.append(on_delete)
-            return current
-        else:
-            base = super().__new__(cls)
-            cls._all_instances[key] = base
-            base.__init__(target, on_delete, *arguments, **named)
-            return base
-
-    def __init__(self, target, on_delete=None):
-        """Return a weak-reference-like instance for a bound method.
-
-        - ``target``: The instance-method target for the weak reference,
-          must have im_self and im_func attributes and be
-          reconstructable via the following, which is true of built-in
-          instance methods::
-
-            target.im_func.__get__( target.im_self )
-
-        - ``on_delete``: Optional callback which will be called when
-          this weak reference ceases to be valid (i.e. either the
-          object or the function is garbage collected).  Should take a
-          single argument, which will be passed a pointer to this
-          object.
-        """
-
-        def remove(weak, self=self):
-            """Set self.isDead to True when method or instance is destroyed."""
-            methods = self.deletion_methods[:]
-            del self.deletion_methods[:]
-            try:
-                del self.__class__._all_instances[self.key]
-            except KeyError:
-                pass
-            for function in methods:
-                try:
-                    if callable(function):
-                        function(self)
-                except Exception:
-                    try:
-                        traceback.print_exc()
-                    except AttributeError:
-                        e = sys.exc_info()[1]
-                        print(
-                            f"Exception during saferef {self} "
-                            f"cleanup function {function}: {e}"
-                        )
-
-        self.deletion_methods = [on_delete]
-        self.key = self.calculate_key(target)
-        im_self = get_self(target)
-        im_func = get_func(target)
-        self.weak_self = weakref.ref(im_self, remove)
-        self.weak_func = weakref.ref(im_func, remove)
-        self.self_name = str(im_self)
-        self.func_name = str(im_func.__name__)
-
-    @classmethod
-    def calculate_key(cls, target):
-        """Calculate the reference key for this reference.
-
-        Currently this is a two-tuple of the id()'s of the target
-        object and the target function respectively.
-        """
-        return (id(get_self(target)), id(get_func(target)))
-
-    def __str__(self):
-        """Give a friendly representation of the object."""
-        return "{}({}.{})".format(
-            self.__class__.__name__,
-            self.self_name,
-            self.func_name,
-        )
-
-    __repr__ = __str__
-
-    def __hash__(self):
-        return hash((self.self_name, self.key))
-
-    def __nonzero__(self):
-        """Whether we are still a valid reference."""
-        return self() is not None
-
-    def __eq__(self, other):
-        """Compare with another reference."""
-        if not isinstance(other, self.__class__):
-            return operator.eq(self.__class__, type(other))
-        return operator.eq(self.key, other.key)
-
-    def __call__(self):
-        """Return a strong reference to the bound method.
-
-        If the target cannot be retrieved, then will return None,
-        otherwise returns a bound instance method for our object and
-        function.
-
-        Note: You may call this method any number of times, as it does
-        not invalidate the reference.
-        """
-        target = self.weak_self()
-        if target is not None:
-            function = self.weak_func()
-            if function is not None:
-                return function.__get__(target)
-        return None
Index: _distutils_hack/__init__ 2.py
===================================================================
diff --git a/_distutils_hack/__init__ 2.py b/_distutils_hack/__init__ 2.py
deleted file mode 100644
--- a/_distutils_hack/__init__ 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,222 +0,0 @@
-# don't import any costly modules
-import sys
-import os
-
-
-is_pypy = '__pypy__' in sys.builtin_module_names
-
-
-def warn_distutils_present():
-    if 'distutils' not in sys.modules:
-        return
-    if is_pypy and sys.version_info < (3, 7):
-        # PyPy for 3.6 unconditionally imports distutils, so bypass the warning
-        # https://foss.heptapod.net/pypy/pypy/-/blob/be829135bc0d758997b3566062999ee8b23872b4/lib-python/3/site.py#L250
-        return
-    import warnings
-
-    warnings.warn(
-        "Distutils was imported before Setuptools, but importing Setuptools "
-        "also replaces the `distutils` module in `sys.modules`. This may lead "
-        "to undesirable behaviors or errors. To avoid these issues, avoid "
-        "using distutils directly, ensure that setuptools is installed in the "
-        "traditional way (e.g. not an editable install), and/or make sure "
-        "that setuptools is always imported before distutils."
-    )
-
-
-def clear_distutils():
-    if 'distutils' not in sys.modules:
-        return
-    import warnings
-
-    warnings.warn("Setuptools is replacing distutils.")
-    mods = [
-        name
-        for name in sys.modules
-        if name == "distutils" or name.startswith("distutils.")
-    ]
-    for name in mods:
-        del sys.modules[name]
-
-
-def enabled():
-    """
-    Allow selection of distutils by environment variable.
-    """
-    which = os.environ.get('SETUPTOOLS_USE_DISTUTILS', 'local')
-    return which == 'local'
-
-
-def ensure_local_distutils():
-    import importlib
-
-    clear_distutils()
-
-    # With the DistutilsMetaFinder in place,
-    # perform an import to cause distutils to be
-    # loaded from setuptools._distutils. Ref #2906.
-    with shim():
-        importlib.import_module('distutils')
-
-    # check that submodules load as expected
-    core = importlib.import_module('distutils.core')
-    assert '_distutils' in core.__file__, core.__file__
-    assert 'setuptools._distutils.log' not in sys.modules
-
-
-def do_override():
-    """
-    Ensure that the local copy of distutils is preferred over stdlib.
-
-    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401
-    for more motivation.
-    """
-    if enabled():
-        warn_distutils_present()
-        ensure_local_distutils()
-
-
-class _TrivialRe:
-    def __init__(self, *patterns):
-        self._patterns = patterns
-
-    def match(self, string):
-        return all(pat in string for pat in self._patterns)
-
-
-class DistutilsMetaFinder:
-    def find_spec(self, fullname, path, target=None):
-        # optimization: only consider top level modules and those
-        # found in the CPython test suite.
-        if path is not None and not fullname.startswith('test.'):
-            return
-
-        method_name = 'spec_for_{fullname}'.format(**locals())
-        method = getattr(self, method_name, lambda: None)
-        return method()
-
-    def spec_for_distutils(self):
-        if self.is_cpython():
-            return
-
-        import importlib
-        import importlib.abc
-        import importlib.util
-
-        try:
-            mod = importlib.import_module('setuptools._distutils')
-        except Exception:
-            # There are a couple of cases where setuptools._distutils
-            # may not be present:
-            # - An older Setuptools without a local distutils is
-            #   taking precedence. Ref #2957.
-            # - Path manipulation during sitecustomize removes
-            #   setuptools from the path but only after the hook
-            #   has been loaded. Ref #2980.
-            # In either case, fall back to stdlib behavior.
-            return
-
-        class DistutilsLoader(importlib.abc.Loader):
-            def create_module(self, spec):
-                mod.__name__ = 'distutils'
-                return mod
-
-            def exec_module(self, module):
-                pass
-
-        return importlib.util.spec_from_loader(
-            'distutils', DistutilsLoader(), origin=mod.__file__
-        )
-
-    @staticmethod
-    def is_cpython():
-        """
-        Suppress supplying distutils for CPython (build and tests).
-        Ref #2965 and #3007.
-        """
-        return os.path.isfile('pybuilddir.txt')
-
-    def spec_for_pip(self):
-        """
-        Ensure stdlib distutils when running under pip.
-        See pypa/pip#8761 for rationale.
-        """
-        if self.pip_imported_during_build():
-            return
-        clear_distutils()
-        self.spec_for_distutils = lambda: None
-
-    @classmethod
-    def pip_imported_during_build(cls):
-        """
-        Detect if pip is being imported in a build script. Ref #2355.
-        """
-        import traceback
-
-        return any(
-            cls.frame_file_is_setup(frame) for frame, line in traceback.walk_stack(None)
-        )
-
-    @staticmethod
-    def frame_file_is_setup(frame):
-        """
-        Return True if the indicated frame suggests a setup.py file.
-        """
-        # some frames may not have __file__ (#2940)
-        return frame.f_globals.get('__file__', '').endswith('setup.py')
-
-    def spec_for_sensitive_tests(self):
-        """
-        Ensure stdlib distutils when running select tests under CPython.
-
-        python/cpython#91169
-        """
-        clear_distutils()
-        self.spec_for_distutils = lambda: None
-
-    sensitive_tests = (
-        [
-            'test.test_distutils',
-            'test.test_peg_generator',
-            'test.test_importlib',
-        ]
-        if sys.version_info < (3, 10)
-        else [
-            'test.test_distutils',
-        ]
-    )
-
-
-for name in DistutilsMetaFinder.sensitive_tests:
-    setattr(
-        DistutilsMetaFinder,
-        f'spec_for_{name}',
-        DistutilsMetaFinder.spec_for_sensitive_tests,
-    )
-
-
-DISTUTILS_FINDER = DistutilsMetaFinder()
-
-
-def add_shim():
-    DISTUTILS_FINDER in sys.meta_path or insert_shim()
-
-
-class shim:
-    def __enter__(self):
-        insert_shim()
-
-    def __exit__(self, exc, value, tb):
-        remove_shim()
-
-
-def insert_shim():
-    sys.meta_path.insert(0, DISTUTILS_FINDER)
-
-
-def remove_shim():
-    try:
-        sys.meta_path.remove(DISTUTILS_FINDER)
-    except ValueError:
-        pass
Index: src/user_service.egg-info/top_level 2.txt
===================================================================
diff --git a/src/user_service.egg-info/top_level 2.txt b/src/user_service.egg-info/top_level 2.txt
deleted file mode 100644
--- a/src/user_service.egg-info/top_level 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: adapt.egg-info/SOURCES 2.txt
===================================================================
diff --git a/adapt.egg-info/SOURCES 2.txt b/adapt.egg-info/SOURCES 2.txt
deleted file mode 100644
--- a/adapt.egg-info/SOURCES 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,10 +0,0 @@
-LICENSE
-README.md
-setup.py
-nomad.egg-info/PKG-INFO
-nomad.egg-info/SOURCES.txt
-nomad.egg-info/dependency_links.txt
-nomad.egg-info/entry_points.txt
-nomad.egg-info/not-zip-safe
-nomad.egg-info/requires.txt
-nomad.egg-info/top_level.txt
\ No newline at end of file
Index: src/user_service.egg-info/SOURCES 4.txt
===================================================================
diff --git a/src/user_service.egg-info/SOURCES 4.txt b/src/user_service.egg-info/SOURCES 4.txt
deleted file mode 100644
--- a/src/user_service.egg-info/SOURCES 4.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,6 +0,0 @@
-setup.py
-src/user_service.egg-info/PKG-INFO
-src/user_service.egg-info/SOURCES.txt
-src/user_service.egg-info/dependency_links.txt
-src/user_service.egg-info/requires.txt
-src/user_service.egg-info/top_level.txt
\ No newline at end of file
Index: src/user_service.egg-info/dependency_links 2.txt
===================================================================
diff --git a/src/user_service.egg-info/dependency_links 2.txt b/src/user_service.egg-info/dependency_links 2.txt
deleted file mode 100644
--- a/src/user_service.egg-info/dependency_links 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: src/user_service.egg-info/requires 3.txt
===================================================================
diff --git a/src/user_service.egg-info/requires 3.txt b/src/user_service.egg-info/requires 3.txt
deleted file mode 100644
--- a/src/user_service.egg-info/requires 3.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,4 +0,0 @@
-Flask
-SQLAlchemy
-psycopg2-binary
-gunicorn
Index: src/user_service.egg-info/top_level 3.txt
===================================================================
diff --git a/src/user_service.egg-info/top_level 3.txt b/src/user_service.egg-info/top_level 3.txt
deleted file mode 100644
--- a/src/user_service.egg-info/top_level 3.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: blinker/base 2.py
===================================================================
diff --git a/blinker/base 2.py b/blinker/base 2.py
deleted file mode 100644
--- a/blinker/base 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,558 +0,0 @@
-"""Signals and events.
-
-A small implementation of signals, inspired by a snippet of Django signal
-API client code seen in a blog post.  Signals are first-class objects and
-each manages its own receivers and message emission.
-
-The :func:`signal` function provides singleton behavior for named signals.
-
-"""
-from __future__ import annotations
-
-import typing as t
-from collections import defaultdict
-from contextlib import contextmanager
-from inspect import iscoroutinefunction
-from warnings import warn
-from weakref import WeakValueDictionary
-
-from blinker._utilities import annotatable_weakref
-from blinker._utilities import hashable_identity
-from blinker._utilities import IdentityType
-from blinker._utilities import lazy_property
-from blinker._utilities import reference
-from blinker._utilities import symbol
-from blinker._utilities import WeakTypes
-
-if t.TYPE_CHECKING:
-    import typing_extensions as te
-
-    T_callable = t.TypeVar("T_callable", bound=t.Callable[..., t.Any])
-
-    T = t.TypeVar("T")
-    P = te.ParamSpec("P")
-
-    AsyncWrapperType = t.Callable[[t.Callable[P, t.Awaitable[T]]], t.Callable[P, T]]
-    SyncWrapperType = t.Callable[[t.Callable[P, T]], t.Callable[P, t.Awaitable[T]]]
-
-ANY = symbol("ANY")
-ANY.__doc__ = 'Token for "any sender".'
-ANY_ID = 0
-
-# NOTE: We need a reference to cast for use in weakref callbacks otherwise
-#       t.cast may have already been set to None during finalization.
-cast = t.cast
-
-
-class Signal:
-    """A notification emitter."""
-
-    #: An :obj:`ANY` convenience synonym, allows ``Signal.ANY``
-    #: without an additional import.
-    ANY = ANY
-
-    set_class: type[set] = set
-
-    @lazy_property
-    def receiver_connected(self) -> Signal:
-        """Emitted after each :meth:`connect`.
-
-        The signal sender is the signal instance, and the :meth:`connect`
-        arguments are passed through: *receiver*, *sender*, and *weak*.
-
-        .. versionadded:: 1.2
-
-        """
-        return Signal(doc="Emitted after a receiver connects.")
-
-    @lazy_property
-    def receiver_disconnected(self) -> Signal:
-        """Emitted after :meth:`disconnect`.
-
-        The sender is the signal instance, and the :meth:`disconnect` arguments
-        are passed through: *receiver* and *sender*.
-
-        Note, this signal is emitted **only** when :meth:`disconnect` is
-        called explicitly.
-
-        The disconnect signal can not be emitted by an automatic disconnect
-        (due to a weakly referenced receiver or sender going out of scope),
-        as the receiver and/or sender instances are no longer available for
-        use at the time this signal would be emitted.
-
-        An alternative approach is available by subscribing to
-        :attr:`receiver_connected` and setting up a custom weakref cleanup
-        callback on weak receivers and senders.
-
-        .. versionadded:: 1.2
-
-        """
-        return Signal(doc="Emitted after a receiver disconnects.")
-
-    def __init__(self, doc: str | None = None) -> None:
-        """
-        :param doc: optional.  If provided, will be assigned to the signal's
-          __doc__ attribute.
-
-        """
-        if doc:
-            self.__doc__ = doc
-        #: A mapping of connected receivers.
-        #:
-        #: The values of this mapping are not meaningful outside of the
-        #: internal :class:`Signal` implementation, however the boolean value
-        #: of the mapping is useful as an extremely efficient check to see if
-        #: any receivers are connected to the signal.
-        self.receivers: dict[IdentityType, t.Callable | annotatable_weakref] = {}
-        self.is_muted = False
-        self._by_receiver: dict[IdentityType, set[IdentityType]] = defaultdict(
-            self.set_class
-        )
-        self._by_sender: dict[IdentityType, set[IdentityType]] = defaultdict(
-            self.set_class
-        )
-        self._weak_senders: dict[IdentityType, annotatable_weakref] = {}
-
-    def connect(
-        self, receiver: T_callable, sender: t.Any = ANY, weak: bool = True
-    ) -> T_callable:
-        """Connect *receiver* to signal events sent by *sender*.
-
-        :param receiver: A callable.  Will be invoked by :meth:`send` with
-          `sender=` as a single positional argument and any ``kwargs`` that
-          were provided to a call to :meth:`send`.
-
-        :param sender: Any object or :obj:`ANY`, defaults to ``ANY``.
-          Restricts notifications delivered to *receiver* to only those
-          :meth:`send` emissions sent by *sender*.  If ``ANY``, the receiver
-          will always be notified.  A *receiver* may be connected to
-          multiple *sender* values on the same Signal through multiple calls
-          to :meth:`connect`.
-
-        :param weak: If true, the Signal will hold a weakref to *receiver*
-          and automatically disconnect when *receiver* goes out of scope or
-          is garbage collected.  Defaults to True.
-
-        """
-        receiver_id = hashable_identity(receiver)
-        receiver_ref: T_callable | annotatable_weakref
-
-        if weak:
-            receiver_ref = reference(receiver, self._cleanup_receiver)
-            receiver_ref.receiver_id = receiver_id
-        else:
-            receiver_ref = receiver
-        sender_id: IdentityType
-        if sender is ANY:
-            sender_id = ANY_ID
-        else:
-            sender_id = hashable_identity(sender)
-
-        self.receivers.setdefault(receiver_id, receiver_ref)
-        self._by_sender[sender_id].add(receiver_id)
-        self._by_receiver[receiver_id].add(sender_id)
-        del receiver_ref
-
-        if sender is not ANY and sender_id not in self._weak_senders:
-            # wire together a cleanup for weakref-able senders
-            try:
-                sender_ref = reference(sender, self._cleanup_sender)
-                sender_ref.sender_id = sender_id
-            except TypeError:
-                pass
-            else:
-                self._weak_senders.setdefault(sender_id, sender_ref)
-                del sender_ref
-
-        # broadcast this connection.  if receivers raise, disconnect.
-        if "receiver_connected" in self.__dict__ and self.receiver_connected.receivers:
-            try:
-                self.receiver_connected.send(
-                    self, receiver=receiver, sender=sender, weak=weak
-                )
-            except TypeError as e:
-                self.disconnect(receiver, sender)
-                raise e
-        if receiver_connected.receivers and self is not receiver_connected:
-            try:
-                receiver_connected.send(
-                    self, receiver_arg=receiver, sender_arg=sender, weak_arg=weak
-                )
-            except TypeError as e:
-                self.disconnect(receiver, sender)
-                raise e
-        return receiver
-
-    def connect_via(
-        self, sender: t.Any, weak: bool = False
-    ) -> t.Callable[[T_callable], T_callable]:
-        """Connect the decorated function as a receiver for *sender*.
-
-        :param sender: Any object or :obj:`ANY`.  The decorated function
-          will only receive :meth:`send` emissions sent by *sender*.  If
-          ``ANY``, the receiver will always be notified.  A function may be
-          decorated multiple times with differing *sender* values.
-
-        :param weak: If true, the Signal will hold a weakref to the
-          decorated function and automatically disconnect when *receiver*
-          goes out of scope or is garbage collected.  Unlike
-          :meth:`connect`, this defaults to False.
-
-        The decorated function will be invoked by :meth:`send` with
-          `sender=` as a single positional argument and any ``kwargs`` that
-          were provided to the call to :meth:`send`.
-
-
-        .. versionadded:: 1.1
-
-        """
-
-        def decorator(fn: T_callable) -> T_callable:
-            self.connect(fn, sender, weak)
-            return fn
-
-        return decorator
-
-    @contextmanager
-    def connected_to(
-        self, receiver: t.Callable, sender: t.Any = ANY
-    ) -> t.Generator[None, None, None]:
-        """Execute a block with the signal temporarily connected to *receiver*.
-
-        :param receiver: a receiver callable
-        :param sender: optional, a sender to filter on
-
-        This is a context manager for use in the ``with`` statement.  It can
-        be useful in unit tests.  *receiver* is connected to the signal for
-        the duration of the ``with`` block, and will be disconnected
-        automatically when exiting the block:
-
-        .. code-block:: python
-
-          with on_ready.connected_to(receiver):
-             # do stuff
-             on_ready.send(123)
-
-        .. versionadded:: 1.1
-
-        """
-        self.connect(receiver, sender=sender, weak=False)
-        try:
-            yield None
-        finally:
-            self.disconnect(receiver)
-
-    @contextmanager
-    def muted(self) -> t.Generator[None, None, None]:
-        """Context manager for temporarily disabling signal.
-        Useful for test purposes.
-        """
-        self.is_muted = True
-        try:
-            yield None
-        except Exception as e:
-            raise e
-        finally:
-            self.is_muted = False
-
-    def temporarily_connected_to(
-        self, receiver: t.Callable, sender: t.Any = ANY
-    ) -> t.ContextManager[None]:
-        """An alias for :meth:`connected_to`.
-
-        :param receiver: a receiver callable
-        :param sender: optional, a sender to filter on
-
-        .. versionadded:: 0.9
-
-        .. versionchanged:: 1.1
-          Renamed to :meth:`connected_to`.  ``temporarily_connected_to`` was
-          deprecated in 1.2 and will be removed in a subsequent version.
-
-        """
-        warn(
-            "temporarily_connected_to is deprecated; use connected_to instead.",
-            DeprecationWarning,
-        )
-        return self.connected_to(receiver, sender)
-
-    def send(
-        self,
-        *sender: t.Any,
-        _async_wrapper: AsyncWrapperType | None = None,
-        **kwargs: t.Any,
-    ) -> list[tuple[t.Callable, t.Any]]:
-        """Emit this signal on behalf of *sender*, passing on ``kwargs``.
-
-        Returns a list of 2-tuples, pairing receivers with their return
-        value. The ordering of receiver notification is undefined.
-
-        :param sender: Any object or ``None``.  If omitted, synonymous
-          with ``None``.  Only accepts one positional argument.
-        :param _async_wrapper: A callable that should wrap a coroutine
-          receiver and run it when called synchronously.
-
-        :param kwargs: Data to be sent to receivers.
-        """
-        if self.is_muted:
-            return []
-
-        sender = self._extract_sender(sender)
-        results = []
-        for receiver in self.receivers_for(sender):
-            if iscoroutinefunction(receiver):
-                if _async_wrapper is None:
-                    raise RuntimeError("Cannot send to a coroutine function")
-                receiver = _async_wrapper(receiver)
-            result = receiver(sender, **kwargs)
-            results.append((receiver, result))
-        return results
-
-    async def send_async(
-        self,
-        *sender: t.Any,
-        _sync_wrapper: SyncWrapperType | None = None,
-        **kwargs: t.Any,
-    ) -> list[tuple[t.Callable, t.Any]]:
-        """Emit this signal on behalf of *sender*, passing on ``kwargs``.
-
-        Returns a list of 2-tuples, pairing receivers with their return
-        value. The ordering of receiver notification is undefined.
-
-        :param sender: Any object or ``None``.  If omitted, synonymous
-          with ``None``. Only accepts one positional argument.
-        :param _sync_wrapper: A callable that should wrap a synchronous
-          receiver and run it when awaited.
-
-        :param kwargs: Data to be sent to receivers.
-        """
-        if self.is_muted:
-            return []
-
-        sender = self._extract_sender(sender)
-        results = []
-        for receiver in self.receivers_for(sender):
-            if not iscoroutinefunction(receiver):
-                if _sync_wrapper is None:
-                    raise RuntimeError("Cannot send to a non-coroutine function")
-                receiver = _sync_wrapper(receiver)
-            result = await receiver(sender, **kwargs)
-            results.append((receiver, result))
-        return results
-
-    def _extract_sender(self, sender: t.Any) -> t.Any:
-        if not self.receivers:
-            # Ensure correct signature even on no-op sends, disable with -O
-            # for lowest possible cost.
-            if __debug__ and sender and len(sender) > 1:
-                raise TypeError(
-                    f"send() accepts only one positional argument, {len(sender)} given"
-                )
-            return []
-
-        # Using '*sender' rather than 'sender=None' allows 'sender' to be
-        # used as a keyword argument- i.e. it's an invisible name in the
-        # function signature.
-        if len(sender) == 0:
-            sender = None
-        elif len(sender) > 1:
-            raise TypeError(
-                f"send() accepts only one positional argument, {len(sender)} given"
-            )
-        else:
-            sender = sender[0]
-        return sender
-
-    def has_receivers_for(self, sender: t.Any) -> bool:
-        """True if there is probably a receiver for *sender*.
-
-        Performs an optimistic check only.  Does not guarantee that all
-        weakly referenced receivers are still alive.  See
-        :meth:`receivers_for` for a stronger search.
-
-        """
-        if not self.receivers:
-            return False
-        if self._by_sender[ANY_ID]:
-            return True
-        if sender is ANY:
-            return False
-        return hashable_identity(sender) in self._by_sender
-
-    def receivers_for(
-        self, sender: t.Any
-    ) -> t.Generator[t.Callable[[t.Any], t.Any], None, None]:
-        """Iterate all live receivers listening for *sender*."""
-        # TODO: test receivers_for(ANY)
-        if self.receivers:
-            sender_id = hashable_identity(sender)
-            if sender_id in self._by_sender:
-                ids = self._by_sender[ANY_ID] | self._by_sender[sender_id]
-            else:
-                ids = self._by_sender[ANY_ID].copy()
-            for receiver_id in ids:
-                receiver = self.receivers.get(receiver_id)
-                if receiver is None:
-                    continue
-                if isinstance(receiver, WeakTypes):
-                    strong = receiver()
-                    if strong is None:
-                        self._disconnect(receiver_id, ANY_ID)
-                        continue
-                    receiver = strong
-                yield receiver  # type: ignore[misc]
-
-    def disconnect(self, receiver: t.Callable, sender: t.Any = ANY) -> None:
-        """Disconnect *receiver* from this signal's events.
-
-        :param receiver: a previously :meth:`connected<connect>` callable
-
-        :param sender: a specific sender to disconnect from, or :obj:`ANY`
-          to disconnect from all senders.  Defaults to ``ANY``.
-
-        """
-        sender_id: IdentityType
-        if sender is ANY:
-            sender_id = ANY_ID
-        else:
-            sender_id = hashable_identity(sender)
-        receiver_id = hashable_identity(receiver)
-        self._disconnect(receiver_id, sender_id)
-
-        if (
-            "receiver_disconnected" in self.__dict__
-            and self.receiver_disconnected.receivers
-        ):
-            self.receiver_disconnected.send(self, receiver=receiver, sender=sender)
-
-    def _disconnect(self, receiver_id: IdentityType, sender_id: IdentityType) -> None:
-        if sender_id == ANY_ID:
-            if self._by_receiver.pop(receiver_id, False):
-                for bucket in self._by_sender.values():
-                    bucket.discard(receiver_id)
-            self.receivers.pop(receiver_id, None)
-        else:
-            self._by_sender[sender_id].discard(receiver_id)
-            self._by_receiver[receiver_id].discard(sender_id)
-
-    def _cleanup_receiver(self, receiver_ref: annotatable_weakref) -> None:
-        """Disconnect a receiver from all senders."""
-        self._disconnect(cast(IdentityType, receiver_ref.receiver_id), ANY_ID)
-
-    def _cleanup_sender(self, sender_ref: annotatable_weakref) -> None:
-        """Disconnect all receivers from a sender."""
-        sender_id = cast(IdentityType, sender_ref.sender_id)
-        assert sender_id != ANY_ID
-        self._weak_senders.pop(sender_id, None)
-        for receiver_id in self._by_sender.pop(sender_id, ()):
-            self._by_receiver[receiver_id].discard(sender_id)
-
-    def _cleanup_bookkeeping(self) -> None:
-        """Prune unused sender/receiver bookkeeping. Not threadsafe.
-
-        Connecting & disconnecting leave behind a small amount of bookkeeping
-        for the receiver and sender values. Typical workloads using Blinker,
-        for example in most web apps, Flask, CLI scripts, etc., are not
-        adversely affected by this bookkeeping.
-
-        With a long-running Python process performing dynamic signal routing
-        with high volume- e.g. connecting to function closures, "senders" are
-        all unique object instances, and doing all of this over and over- you
-        may see memory usage will grow due to extraneous bookkeeping. (An empty
-        set() for each stale sender/receiver pair.)
-
-        This method will prune that bookkeeping away, with the caveat that such
-        pruning is not threadsafe. The risk is that cleanup of a fully
-        disconnected receiver/sender pair occurs while another thread is
-        connecting that same pair. If you are in the highly dynamic, unique
-        receiver/sender situation that has lead you to this method, that
-        failure mode is perhaps not a big deal for you.
-        """
-        for mapping in (self._by_sender, self._by_receiver):
-            for _id, bucket in list(mapping.items()):
-                if not bucket:
-                    mapping.pop(_id, None)
-
-    def _clear_state(self) -> None:
-        """Throw away all signal state.  Useful for unit tests."""
-        self._weak_senders.clear()
-        self.receivers.clear()
-        self._by_sender.clear()
-        self._by_receiver.clear()
-
-
-receiver_connected = Signal(
-    """\
-Sent by a :class:`Signal` after a receiver connects.
-
-:argument: the Signal that was connected to
-:keyword receiver_arg: the connected receiver
-:keyword sender_arg: the sender to connect to
-:keyword weak_arg: true if the connection to receiver_arg is a weak reference
-
-.. deprecated:: 1.2
-
-As of 1.2, individual signals have their own private
-:attr:`~Signal.receiver_connected` and
-:attr:`~Signal.receiver_disconnected` signals with a slightly simplified
-call signature.  This global signal is planned to be removed in 1.6.
-
-"""
-)
-
-
-class NamedSignal(Signal):
-    """A named generic notification emitter."""
-
-    def __init__(self, name: str, doc: str | None = None) -> None:
-        Signal.__init__(self, doc)
-
-        #: The name of this signal.
-        self.name = name
-
-    def __repr__(self) -> str:
-        base = Signal.__repr__(self)
-        return f"{base[:-1]}; {self.name!r}>"  # noqa: E702
-
-
-class Namespace(dict):
-    """A mapping of signal names to signals."""
-
-    def signal(self, name: str, doc: str | None = None) -> NamedSignal:
-        """Return the :class:`NamedSignal` *name*, creating it if required.
-
-        Repeated calls to this function will return the same signal object.
-
-        """
-        try:
-            return self[name]  # type: ignore[no-any-return]
-        except KeyError:
-            result = self.setdefault(name, NamedSignal(name, doc))
-            return result  # type: ignore[no-any-return]
-
-
-class WeakNamespace(WeakValueDictionary):
-    """A weak mapping of signal names to signals.
-
-    Automatically cleans up unused Signals when the last reference goes out
-    of scope.  This namespace implementation exists for a measure of legacy
-    compatibility with Blinker <= 1.2, and may be dropped in the future.
-
-    .. versionadded:: 1.3
-
-    """
-
-    def signal(self, name: str, doc: str | None = None) -> NamedSignal:
-        """Return the :class:`NamedSignal` *name*, creating it if required.
-
-        Repeated calls to this function will return the same signal object.
-
-        """
-        try:
-            return self[name]  # type: ignore[no-any-return]
-        except KeyError:
-            result = self.setdefault(name, NamedSignal(name, doc))
-            return result  # type: ignore[no-any-return]
-
-
-signal = Namespace().signal
Index: cffi/_cffi_errors 2.h
===================================================================
diff --git a/cffi/_cffi_errors 2.h b/cffi/_cffi_errors 2.h
deleted file mode 100644
--- a/cffi/_cffi_errors 2.h	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,149 +0,0 @@
-#ifndef CFFI_MESSAGEBOX
-# ifdef _MSC_VER
-#  define CFFI_MESSAGEBOX  1
-# else
-#  define CFFI_MESSAGEBOX  0
-# endif
-#endif
-
-
-#if CFFI_MESSAGEBOX
-/* Windows only: logic to take the Python-CFFI embedding logic
-   initialization errors and display them in a background thread
-   with MessageBox.  The idea is that if the whole program closes
-   as a result of this problem, then likely it is already a console
-   program and you can read the stderr output in the console too.
-   If it is not a console program, then it will likely show its own
-   dialog to complain, or generally not abruptly close, and for this
-   case the background thread should stay alive.
-*/
-static void *volatile _cffi_bootstrap_text;
-
-static PyObject *_cffi_start_error_capture(void)
-{
-    PyObject *result = NULL;
-    PyObject *x, *m, *bi;
-
-    if (InterlockedCompareExchangePointer(&_cffi_bootstrap_text,
-            (void *)1, NULL) != NULL)
-        return (PyObject *)1;
-
-    m = PyImport_AddModule("_cffi_error_capture");
-    if (m == NULL)
-        goto error;
-
-    result = PyModule_GetDict(m);
-    if (result == NULL)
-        goto error;
-
-#if PY_MAJOR_VERSION >= 3
-    bi = PyImport_ImportModule("builtins");
-#else
-    bi = PyImport_ImportModule("__builtin__");
-#endif
-    if (bi == NULL)
-        goto error;
-    PyDict_SetItemString(result, "__builtins__", bi);
-    Py_DECREF(bi);
-
-    x = PyRun_String(
-        "import sys\n"
-        "class FileLike:\n"
-        "  def write(self, x):\n"
-        "    try:\n"
-        "      of.write(x)\n"
-        "    except: pass\n"
-        "    self.buf += x\n"
-        "  def flush(self):\n"
-        "    pass\n"
-        "fl = FileLike()\n"
-        "fl.buf = ''\n"
-        "of = sys.stderr\n"
-        "sys.stderr = fl\n"
-        "def done():\n"
-        "  sys.stderr = of\n"
-        "  return fl.buf\n",   /* make sure the returned value stays alive */
-        Py_file_input,
-        result, result);
-    Py_XDECREF(x);
-
- error:
-    if (PyErr_Occurred())
-    {
-        PyErr_WriteUnraisable(Py_None);
-        PyErr_Clear();
-    }
-    return result;
-}
-
-#pragma comment(lib, "user32.lib")
-
-static DWORD WINAPI _cffi_bootstrap_dialog(LPVOID ignored)
-{
-    Sleep(666);    /* may be interrupted if the whole process is closing */
-#if PY_MAJOR_VERSION >= 3
-    MessageBoxW(NULL, (wchar_t *)_cffi_bootstrap_text,
-                L"Python-CFFI error",
-                MB_OK | MB_ICONERROR);
-#else
-    MessageBoxA(NULL, (char *)_cffi_bootstrap_text,
-                "Python-CFFI error",
-                MB_OK | MB_ICONERROR);
-#endif
-    _cffi_bootstrap_text = NULL;
-    return 0;
-}
-
-static void _cffi_stop_error_capture(PyObject *ecap)
-{
-    PyObject *s;
-    void *text;
-
-    if (ecap == (PyObject *)1)
-        return;
-
-    if (ecap == NULL)
-        goto error;
-
-    s = PyRun_String("done()", Py_eval_input, ecap, ecap);
-    if (s == NULL)
-        goto error;
-
-    /* Show a dialog box, but in a background thread, and
-       never show multiple dialog boxes at once. */
-#if PY_MAJOR_VERSION >= 3
-    text = PyUnicode_AsWideCharString(s, NULL);
-#else
-    text = PyString_AsString(s);
-#endif
-
-    _cffi_bootstrap_text = text;
-
-    if (text != NULL)
-    {
-        HANDLE h;
-        h = CreateThread(NULL, 0, _cffi_bootstrap_dialog,
-                         NULL, 0, NULL);
-        if (h != NULL)
-            CloseHandle(h);
-    }
-    /* decref the string, but it should stay alive as 'fl.buf'
-       in the small module above.  It will really be freed only if
-       we later get another similar error.  So it's a leak of at
-       most one copy of the small module.  That's fine for this
-       situation which is usually a "fatal error" anyway. */
-    Py_DECREF(s);
-    PyErr_Clear();
-    return;
-
-  error:
-    _cffi_bootstrap_text = NULL;
-    PyErr_Clear();
-}
-
-#else
-
-static PyObject *_cffi_start_error_capture(void) { return NULL; }
-static void _cffi_stop_error_capture(PyObject *ecap) { }
-
-#endif
Index: cffi/_shimmed_dist_utils 2.py
===================================================================
diff --git a/cffi/_shimmed_dist_utils 2.py b/cffi/_shimmed_dist_utils 2.py
deleted file mode 100644
--- a/cffi/_shimmed_dist_utils 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,41 +0,0 @@
-"""
-Temporary shim module to indirect the bits of distutils we need from setuptools/distutils while providing useful
-error messages beyond `No module named 'distutils' on Python >= 3.12, or when setuptools' vendored distutils is broken.
-
-This is a compromise to avoid a hard-dep on setuptools for Python >= 3.12, since many users don't need runtime compilation support from CFFI.
-"""
-import sys
-
-try:
-    # import setuptools first; this is the most robust way to ensure its embedded distutils is available
-    # (the .pth shim should usually work, but this is even more robust)
-    import setuptools
-except Exception as ex:
-    if sys.version_info >= (3, 12):
-        # Python 3.12 has no built-in distutils to fall back on, so any import problem is fatal
-        raise Exception("This CFFI feature requires setuptools on Python >= 3.12. The setuptools module is missing or non-functional.") from ex
-
-    # silently ignore on older Pythons (support fallback to stdlib distutils where available)
-else:
-    del setuptools
-
-try:
-    # bring in just the bits of distutils we need, whether they really came from setuptools or stdlib-embedded distutils
-    from distutils import log, sysconfig
-    from distutils.ccompiler import CCompiler
-    from distutils.command.build_ext import build_ext
-    from distutils.core import Distribution, Extension
-    from distutils.dir_util import mkpath
-    from distutils.errors import DistutilsSetupError, CompileError, LinkError
-    from distutils.log import set_threshold, set_verbosity
-
-    if sys.platform == 'win32':
-        from distutils.msvc9compiler import MSVCCompiler
-except Exception as ex:
-    if sys.version_info >= (3, 12):
-        raise Exception("This CFFI feature requires setuptools on Python >= 3.12. Please install the setuptools package.") from ex
-
-    # anything older, just let the underlying distutils import error fly
-    raise Exception("This CFFI feature requires distutils. Please install the distutils or setuptools package.") from ex
-
-del sys
Index: cffi/cffi_opcode 2.py
===================================================================
diff --git a/cffi/cffi_opcode 2.py b/cffi/cffi_opcode 2.py
deleted file mode 100644
--- a/cffi/cffi_opcode 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,187 +0,0 @@
-from .error import VerificationError
-
-class CffiOp(object):
-    def __init__(self, op, arg):
-        self.op = op
-        self.arg = arg
-
-    def as_c_expr(self):
-        if self.op is None:
-            assert isinstance(self.arg, str)
-            return '(_cffi_opcode_t)(%s)' % (self.arg,)
-        classname = CLASS_NAME[self.op]
-        return '_CFFI_OP(_CFFI_OP_%s, %s)' % (classname, self.arg)
-
-    def as_python_bytes(self):
-        if self.op is None and self.arg.isdigit():
-            value = int(self.arg)     # non-negative: '-' not in self.arg
-            if value >= 2**31:
-                raise OverflowError("cannot emit %r: limited to 2**31-1"
-                                    % (self.arg,))
-            return format_four_bytes(value)
-        if isinstance(self.arg, str):
-            raise VerificationError("cannot emit to Python: %r" % (self.arg,))
-        return format_four_bytes((self.arg << 8) | self.op)
-
-    def __str__(self):
-        classname = CLASS_NAME.get(self.op, self.op)
-        return '(%s %s)' % (classname, self.arg)
-
-def format_four_bytes(num):
-    return '\\x%02X\\x%02X\\x%02X\\x%02X' % (
-        (num >> 24) & 0xFF,
-        (num >> 16) & 0xFF,
-        (num >>  8) & 0xFF,
-        (num      ) & 0xFF)
-
-OP_PRIMITIVE       = 1
-OP_POINTER         = 3
-OP_ARRAY           = 5
-OP_OPEN_ARRAY      = 7
-OP_STRUCT_UNION    = 9
-OP_ENUM            = 11
-OP_FUNCTION        = 13
-OP_FUNCTION_END    = 15
-OP_NOOP            = 17
-OP_BITFIELD        = 19
-OP_TYPENAME        = 21
-OP_CPYTHON_BLTN_V  = 23   # varargs
-OP_CPYTHON_BLTN_N  = 25   # noargs
-OP_CPYTHON_BLTN_O  = 27   # O  (i.e. a single arg)
-OP_CONSTANT        = 29
-OP_CONSTANT_INT    = 31
-OP_GLOBAL_VAR      = 33
-OP_DLOPEN_FUNC     = 35
-OP_DLOPEN_CONST    = 37
-OP_GLOBAL_VAR_F    = 39
-OP_EXTERN_PYTHON   = 41
-
-PRIM_VOID          = 0
-PRIM_BOOL          = 1
-PRIM_CHAR          = 2
-PRIM_SCHAR         = 3
-PRIM_UCHAR         = 4
-PRIM_SHORT         = 5
-PRIM_USHORT        = 6
-PRIM_INT           = 7
-PRIM_UINT          = 8
-PRIM_LONG          = 9
-PRIM_ULONG         = 10
-PRIM_LONGLONG      = 11
-PRIM_ULONGLONG     = 12
-PRIM_FLOAT         = 13
-PRIM_DOUBLE        = 14
-PRIM_LONGDOUBLE    = 15
-
-PRIM_WCHAR         = 16
-PRIM_INT8          = 17
-PRIM_UINT8         = 18
-PRIM_INT16         = 19
-PRIM_UINT16        = 20
-PRIM_INT32         = 21
-PRIM_UINT32        = 22
-PRIM_INT64         = 23
-PRIM_UINT64        = 24
-PRIM_INTPTR        = 25
-PRIM_UINTPTR       = 26
-PRIM_PTRDIFF       = 27
-PRIM_SIZE          = 28
-PRIM_SSIZE         = 29
-PRIM_INT_LEAST8    = 30
-PRIM_UINT_LEAST8   = 31
-PRIM_INT_LEAST16   = 32
-PRIM_UINT_LEAST16  = 33
-PRIM_INT_LEAST32   = 34
-PRIM_UINT_LEAST32  = 35
-PRIM_INT_LEAST64   = 36
-PRIM_UINT_LEAST64  = 37
-PRIM_INT_FAST8     = 38
-PRIM_UINT_FAST8    = 39
-PRIM_INT_FAST16    = 40
-PRIM_UINT_FAST16   = 41
-PRIM_INT_FAST32    = 42
-PRIM_UINT_FAST32   = 43
-PRIM_INT_FAST64    = 44
-PRIM_UINT_FAST64   = 45
-PRIM_INTMAX        = 46
-PRIM_UINTMAX       = 47
-PRIM_FLOATCOMPLEX  = 48
-PRIM_DOUBLECOMPLEX = 49
-PRIM_CHAR16        = 50
-PRIM_CHAR32        = 51
-
-_NUM_PRIM          = 52
-_UNKNOWN_PRIM          = -1
-_UNKNOWN_FLOAT_PRIM    = -2
-_UNKNOWN_LONG_DOUBLE   = -3
-
-_IO_FILE_STRUCT        = -1
-
-PRIMITIVE_TO_INDEX = {
-    'char':               PRIM_CHAR,
-    'short':              PRIM_SHORT,
-    'int':                PRIM_INT,
-    'long':               PRIM_LONG,
-    'long long':          PRIM_LONGLONG,
-    'signed char':        PRIM_SCHAR,
-    'unsigned char':      PRIM_UCHAR,
-    'unsigned short':     PRIM_USHORT,
-    'unsigned int':       PRIM_UINT,
-    'unsigned long':      PRIM_ULONG,
-    'unsigned long long': PRIM_ULONGLONG,
-    'float':              PRIM_FLOAT,
-    'double':             PRIM_DOUBLE,
-    'long double':        PRIM_LONGDOUBLE,
-    'float _Complex':     PRIM_FLOATCOMPLEX,
-    'double _Complex':    PRIM_DOUBLECOMPLEX,
-    '_Bool':              PRIM_BOOL,
-    'wchar_t':            PRIM_WCHAR,
-    'char16_t':           PRIM_CHAR16,
-    'char32_t':           PRIM_CHAR32,
-    'int8_t':             PRIM_INT8,
-    'uint8_t':            PRIM_UINT8,
-    'int16_t':            PRIM_INT16,
-    'uint16_t':           PRIM_UINT16,
-    'int32_t':            PRIM_INT32,
-    'uint32_t':           PRIM_UINT32,
-    'int64_t':            PRIM_INT64,
-    'uint64_t':           PRIM_UINT64,
-    'intptr_t':           PRIM_INTPTR,
-    'uintptr_t':          PRIM_UINTPTR,
-    'ptrdiff_t':          PRIM_PTRDIFF,
-    'size_t':             PRIM_SIZE,
-    'ssize_t':            PRIM_SSIZE,
-    'int_least8_t':       PRIM_INT_LEAST8,
-    'uint_least8_t':      PRIM_UINT_LEAST8,
-    'int_least16_t':      PRIM_INT_LEAST16,
-    'uint_least16_t':     PRIM_UINT_LEAST16,
-    'int_least32_t':      PRIM_INT_LEAST32,
-    'uint_least32_t':     PRIM_UINT_LEAST32,
-    'int_least64_t':      PRIM_INT_LEAST64,
-    'uint_least64_t':     PRIM_UINT_LEAST64,
-    'int_fast8_t':        PRIM_INT_FAST8,
-    'uint_fast8_t':       PRIM_UINT_FAST8,
-    'int_fast16_t':       PRIM_INT_FAST16,
-    'uint_fast16_t':      PRIM_UINT_FAST16,
-    'int_fast32_t':       PRIM_INT_FAST32,
-    'uint_fast32_t':      PRIM_UINT_FAST32,
-    'int_fast64_t':       PRIM_INT_FAST64,
-    'uint_fast64_t':      PRIM_UINT_FAST64,
-    'intmax_t':           PRIM_INTMAX,
-    'uintmax_t':          PRIM_UINTMAX,
-    }
-
-F_UNION         = 0x01
-F_CHECK_FIELDS  = 0x02
-F_PACKED        = 0x04
-F_EXTERNAL      = 0x08
-F_OPAQUE        = 0x10
-
-G_FLAGS = dict([('_CFFI_' + _key, globals()[_key])
-                for _key in ['F_UNION', 'F_CHECK_FIELDS', 'F_PACKED',
-                             'F_EXTERNAL', 'F_OPAQUE']])
-
-CLASS_NAME = {}
-for _name, _value in list(globals().items()):
-    if _name.startswith('OP_') and isinstance(_value, int):
-        CLASS_NAME[_value] = _name[3:]
Index: user_service/myenv/pyvenv 4.cfg
===================================================================
diff --git a/user_service/myenv/pyvenv 4.cfg b/user_service/myenv/pyvenv 4.cfg
deleted file mode 100644
--- a/user_service/myenv/pyvenv 4.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Users/derrickbass/.pyenv/versions/3.12.2/bin
-include-system-site-packages = false
-version = 3.12.2
-executable = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12
-command = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12 -m venv /Users/derrickbass/Desktop/Autonomod/user_service/myenv
Index: cffi/backend_ctypes 2.py
===================================================================
diff --git a/cffi/backend_ctypes 2.py b/cffi/backend_ctypes 2.py
deleted file mode 100644
--- a/cffi/backend_ctypes 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1121 +0,0 @@
-import ctypes, ctypes.util, operator, sys
-from . import model
-
-if sys.version_info < (3,):
-    bytechr = chr
-else:
-    unicode = str
-    long = int
-    xrange = range
-    bytechr = lambda num: bytes([num])
-
-class CTypesType(type):
-    pass
-
-class CTypesData(object):
-    __metaclass__ = CTypesType
-    __slots__ = ['__weakref__']
-    __name__ = '<cdata>'
-
-    def __init__(self, *args):
-        raise TypeError("cannot instantiate %r" % (self.__class__,))
-
-    @classmethod
-    def _newp(cls, init):
-        raise TypeError("expected a pointer or array ctype, got '%s'"
-                        % (cls._get_c_name(),))
-
-    @staticmethod
-    def _to_ctypes(value):
-        raise TypeError
-
-    @classmethod
-    def _arg_to_ctypes(cls, *value):
-        try:
-            ctype = cls._ctype
-        except AttributeError:
-            raise TypeError("cannot create an instance of %r" % (cls,))
-        if value:
-            res = cls._to_ctypes(*value)
-            if not isinstance(res, ctype):
-                res = cls._ctype(res)
-        else:
-            res = cls._ctype()
-        return res
-
-    @classmethod
-    def _create_ctype_obj(cls, init):
-        if init is None:
-            return cls._arg_to_ctypes()
-        else:
-            return cls._arg_to_ctypes(init)
-
-    @staticmethod
-    def _from_ctypes(ctypes_value):
-        raise TypeError
-
-    @classmethod
-    def _get_c_name(cls, replace_with=''):
-        return cls._reftypename.replace(' &', replace_with)
-
-    @classmethod
-    def _fix_class(cls):
-        cls.__name__ = 'CData<%s>' % (cls._get_c_name(),)
-        cls.__qualname__ = 'CData<%s>' % (cls._get_c_name(),)
-        cls.__module__ = 'ffi'
-
-    def _get_own_repr(self):
-        raise NotImplementedError
-
-    def _addr_repr(self, address):
-        if address == 0:
-            return 'NULL'
-        else:
-            if address < 0:
-                address += 1 << (8*ctypes.sizeof(ctypes.c_void_p))
-            return '0x%x' % address
-
-    def __repr__(self, c_name=None):
-        own = self._get_own_repr()
-        return '<cdata %r %s>' % (c_name or self._get_c_name(), own)
-
-    def _convert_to_address(self, BClass):
-        if BClass is None:
-            raise TypeError("cannot convert %r to an address" % (
-                self._get_c_name(),))
-        else:
-            raise TypeError("cannot convert %r to %r" % (
-                self._get_c_name(), BClass._get_c_name()))
-
-    @classmethod
-    def _get_size(cls):
-        return ctypes.sizeof(cls._ctype)
-
-    def _get_size_of_instance(self):
-        return ctypes.sizeof(self._ctype)
-
-    @classmethod
-    def _cast_from(cls, source):
-        raise TypeError("cannot cast to %r" % (cls._get_c_name(),))
-
-    def _cast_to_integer(self):
-        return self._convert_to_address(None)
-
-    @classmethod
-    def _alignment(cls):
-        return ctypes.alignment(cls._ctype)
-
-    def __iter__(self):
-        raise TypeError("cdata %r does not support iteration" % (
-            self._get_c_name()),)
-
-    def _make_cmp(name):
-        cmpfunc = getattr(operator, name)
-        def cmp(self, other):
-            v_is_ptr = not isinstance(self, CTypesGenericPrimitive)
-            w_is_ptr = (isinstance(other, CTypesData) and
-                           not isinstance(other, CTypesGenericPrimitive))
-            if v_is_ptr and w_is_ptr:
-                return cmpfunc(self._convert_to_address(None),
-                               other._convert_to_address(None))
-            elif v_is_ptr or w_is_ptr:
-                return NotImplemented
-            else:
-                if isinstance(self, CTypesGenericPrimitive):
-                    self = self._value
-                if isinstance(other, CTypesGenericPrimitive):
-                    other = other._value
-                return cmpfunc(self, other)
-        cmp.func_name = name
-        return cmp
-
-    __eq__ = _make_cmp('__eq__')
-    __ne__ = _make_cmp('__ne__')
-    __lt__ = _make_cmp('__lt__')
-    __le__ = _make_cmp('__le__')
-    __gt__ = _make_cmp('__gt__')
-    __ge__ = _make_cmp('__ge__')
-
-    def __hash__(self):
-        return hash(self._convert_to_address(None))
-
-    def _to_string(self, maxlen):
-        raise TypeError("string(): %r" % (self,))
-
-
-class CTypesGenericPrimitive(CTypesData):
-    __slots__ = []
-
-    def __hash__(self):
-        return hash(self._value)
-
-    def _get_own_repr(self):
-        return repr(self._from_ctypes(self._value))
-
-
-class CTypesGenericArray(CTypesData):
-    __slots__ = []
-
-    @classmethod
-    def _newp(cls, init):
-        return cls(init)
-
-    def __iter__(self):
-        for i in xrange(len(self)):
-            yield self[i]
-
-    def _get_own_repr(self):
-        return self._addr_repr(ctypes.addressof(self._blob))
-
-
-class CTypesGenericPtr(CTypesData):
-    __slots__ = ['_address', '_as_ctype_ptr']
-    _automatic_casts = False
-    kind = "pointer"
-
-    @classmethod
-    def _newp(cls, init):
-        return cls(init)
-
-    @classmethod
-    def _cast_from(cls, source):
-        if source is None:
-            address = 0
-        elif isinstance(source, CTypesData):
-            address = source._cast_to_integer()
-        elif isinstance(source, (int, long)):
-            address = source
-        else:
-            raise TypeError("bad type for cast to %r: %r" %
-                            (cls, type(source).__name__))
-        return cls._new_pointer_at(address)
-
-    @classmethod
-    def _new_pointer_at(cls, address):
-        self = cls.__new__(cls)
-        self._address = address
-        self._as_ctype_ptr = ctypes.cast(address, cls._ctype)
-        return self
-
-    def _get_own_repr(self):
-        try:
-            return self._addr_repr(self._address)
-        except AttributeError:
-            return '???'
-
-    def _cast_to_integer(self):
-        return self._address
-
-    def __nonzero__(self):
-        return bool(self._address)
-    __bool__ = __nonzero__
-
-    @classmethod
-    def _to_ctypes(cls, value):
-        if not isinstance(value, CTypesData):
-            raise TypeError("unexpected %s object" % type(value).__name__)
-        address = value._convert_to_address(cls)
-        return ctypes.cast(address, cls._ctype)
-
-    @classmethod
-    def _from_ctypes(cls, ctypes_ptr):
-        address = ctypes.cast(ctypes_ptr, ctypes.c_void_p).value or 0
-        return cls._new_pointer_at(address)
-
-    @classmethod
-    def _initialize(cls, ctypes_ptr, value):
-        if value:
-            ctypes_ptr.contents = cls._to_ctypes(value).contents
-
-    def _convert_to_address(self, BClass):
-        if (BClass in (self.__class__, None) or BClass._automatic_casts
-            or self._automatic_casts):
-            return self._address
-        else:
-            return CTypesData._convert_to_address(self, BClass)
-
-
-class CTypesBaseStructOrUnion(CTypesData):
-    __slots__ = ['_blob']
-
-    @classmethod
-    def _create_ctype_obj(cls, init):
-        # may be overridden
-        raise TypeError("cannot instantiate opaque type %s" % (cls,))
-
-    def _get_own_repr(self):
-        return self._addr_repr(ctypes.addressof(self._blob))
-
-    @classmethod
-    def _offsetof(cls, fieldname):
-        return getattr(cls._ctype, fieldname).offset
-
-    def _convert_to_address(self, BClass):
-        if getattr(BClass, '_BItem', None) is self.__class__:
-            return ctypes.addressof(self._blob)
-        else:
-            return CTypesData._convert_to_address(self, BClass)
-
-    @classmethod
-    def _from_ctypes(cls, ctypes_struct_or_union):
-        self = cls.__new__(cls)
-        self._blob = ctypes_struct_or_union
-        return self
-
-    @classmethod
-    def _to_ctypes(cls, value):
-        return value._blob
-
-    def __repr__(self, c_name=None):
-        return CTypesData.__repr__(self, c_name or self._get_c_name(' &'))
-
-
-class CTypesBackend(object):
-
-    PRIMITIVE_TYPES = {
-        'char': ctypes.c_char,
-        'short': ctypes.c_short,
-        'int': ctypes.c_int,
-        'long': ctypes.c_long,
-        'long long': ctypes.c_longlong,
-        'signed char': ctypes.c_byte,
-        'unsigned char': ctypes.c_ubyte,
-        'unsigned short': ctypes.c_ushort,
-        'unsigned int': ctypes.c_uint,
-        'unsigned long': ctypes.c_ulong,
-        'unsigned long long': ctypes.c_ulonglong,
-        'float': ctypes.c_float,
-        'double': ctypes.c_double,
-        '_Bool': ctypes.c_bool,
-        }
-
-    for _name in ['unsigned long long', 'unsigned long',
-                  'unsigned int', 'unsigned short', 'unsigned char']:
-        _size = ctypes.sizeof(PRIMITIVE_TYPES[_name])
-        PRIMITIVE_TYPES['uint%d_t' % (8*_size)] = PRIMITIVE_TYPES[_name]
-        if _size == ctypes.sizeof(ctypes.c_void_p):
-            PRIMITIVE_TYPES['uintptr_t'] = PRIMITIVE_TYPES[_name]
-        if _size == ctypes.sizeof(ctypes.c_size_t):
-            PRIMITIVE_TYPES['size_t'] = PRIMITIVE_TYPES[_name]
-
-    for _name in ['long long', 'long', 'int', 'short', 'signed char']:
-        _size = ctypes.sizeof(PRIMITIVE_TYPES[_name])
-        PRIMITIVE_TYPES['int%d_t' % (8*_size)] = PRIMITIVE_TYPES[_name]
-        if _size == ctypes.sizeof(ctypes.c_void_p):
-            PRIMITIVE_TYPES['intptr_t'] = PRIMITIVE_TYPES[_name]
-            PRIMITIVE_TYPES['ptrdiff_t'] = PRIMITIVE_TYPES[_name]
-        if _size == ctypes.sizeof(ctypes.c_size_t):
-            PRIMITIVE_TYPES['ssize_t'] = PRIMITIVE_TYPES[_name]
-
-
-    def __init__(self):
-        self.RTLD_LAZY = 0   # not supported anyway by ctypes
-        self.RTLD_NOW  = 0
-        self.RTLD_GLOBAL = ctypes.RTLD_GLOBAL
-        self.RTLD_LOCAL = ctypes.RTLD_LOCAL
-
-    def set_ffi(self, ffi):
-        self.ffi = ffi
-
-    def _get_types(self):
-        return CTypesData, CTypesType
-
-    def load_library(self, path, flags=0):
-        cdll = ctypes.CDLL(path, flags)
-        return CTypesLibrary(self, cdll)
-
-    def new_void_type(self):
-        class CTypesVoid(CTypesData):
-            __slots__ = []
-            _reftypename = 'void &'
-            @staticmethod
-            def _from_ctypes(novalue):
-                return None
-            @staticmethod
-            def _to_ctypes(novalue):
-                if novalue is not None:
-                    raise TypeError("None expected, got %s object" %
-                                    (type(novalue).__name__,))
-                return None
-        CTypesVoid._fix_class()
-        return CTypesVoid
-
-    def new_primitive_type(self, name):
-        if name == 'wchar_t':
-            raise NotImplementedError(name)
-        ctype = self.PRIMITIVE_TYPES[name]
-        if name == 'char':
-            kind = 'char'
-        elif name in ('float', 'double'):
-            kind = 'float'
-        else:
-            if name in ('signed char', 'unsigned char'):
-                kind = 'byte'
-            elif name == '_Bool':
-                kind = 'bool'
-            else:
-                kind = 'int'
-            is_signed = (ctype(-1).value == -1)
-        #
-        def _cast_source_to_int(source):
-            if isinstance(source, (int, long, float)):
-                source = int(source)
-            elif isinstance(source, CTypesData):
-                source = source._cast_to_integer()
-            elif isinstance(source, bytes):
-                source = ord(source)
-            elif source is None:
-                source = 0
-            else:
-                raise TypeError("bad type for cast to %r: %r" %
-                                (CTypesPrimitive, type(source).__name__))
-            return source
-        #
-        kind1 = kind
-        class CTypesPrimitive(CTypesGenericPrimitive):
-            __slots__ = ['_value']
-            _ctype = ctype
-            _reftypename = '%s &' % name
-            kind = kind1
-
-            def __init__(self, value):
-                self._value = value
-
-            @staticmethod
-            def _create_ctype_obj(init):
-                if init is None:
-                    return ctype()
-                return ctype(CTypesPrimitive._to_ctypes(init))
-
-            if kind == 'int' or kind == 'byte':
-                @classmethod
-                def _cast_from(cls, source):
-                    source = _cast_source_to_int(source)
-                    source = ctype(source).value     # cast within range
-                    return cls(source)
-                def __int__(self):
-                    return self._value
-
-            if kind == 'bool':
-                @classmethod
-                def _cast_from(cls, source):
-                    if not isinstance(source, (int, long, float)):
-                        source = _cast_source_to_int(source)
-                    return cls(bool(source))
-                def __int__(self):
-                    return int(self._value)
-
-            if kind == 'char':
-                @classmethod
-                def _cast_from(cls, source):
-                    source = _cast_source_to_int(source)
-                    source = bytechr(source & 0xFF)
-                    return cls(source)
-                def __int__(self):
-                    return ord(self._value)
-
-            if kind == 'float':
-                @classmethod
-                def _cast_from(cls, source):
-                    if isinstance(source, float):
-                        pass
-                    elif isinstance(source, CTypesGenericPrimitive):
-                        if hasattr(source, '__float__'):
-                            source = float(source)
-                        else:
-                            source = int(source)
-                    else:
-                        source = _cast_source_to_int(source)
-                    source = ctype(source).value     # fix precision
-                    return cls(source)
-                def __int__(self):
-                    return int(self._value)
-                def __float__(self):
-                    return self._value
-
-            _cast_to_integer = __int__
-
-            if kind == 'int' or kind == 'byte' or kind == 'bool':
-                @staticmethod
-                def _to_ctypes(x):
-                    if not isinstance(x, (int, long)):
-                        if isinstance(x, CTypesData):
-                            x = int(x)
-                        else:
-                            raise TypeError("integer expected, got %s" %
-                                            type(x).__name__)
-                    if ctype(x).value != x:
-                        if not is_signed and x < 0:
-                            raise OverflowError("%s: negative integer" % name)
-                        else:
-                            raise OverflowError("%s: integer out of bounds"
-                                                % name)
-                    return x
-
-            if kind == 'char':
-                @staticmethod
-                def _to_ctypes(x):
-                    if isinstance(x, bytes) and len(x) == 1:
-                        return x
-                    if isinstance(x, CTypesPrimitive):    # <CData <char>>
-                        return x._value
-                    raise TypeError("character expected, got %s" %
-                                    type(x).__name__)
-                def __nonzero__(self):
-                    return ord(self._value) != 0
-            else:
-                def __nonzero__(self):
-                    return self._value != 0
-            __bool__ = __nonzero__
-
-            if kind == 'float':
-                @staticmethod
-                def _to_ctypes(x):
-                    if not isinstance(x, (int, long, float, CTypesData)):
-                        raise TypeError("float expected, got %s" %
-                                        type(x).__name__)
-                    return ctype(x).value
-
-            @staticmethod
-            def _from_ctypes(value):
-                return getattr(value, 'value', value)
-
-            @staticmethod
-            def _initialize(blob, init):
-                blob.value = CTypesPrimitive._to_ctypes(init)
-
-            if kind == 'char':
-                def _to_string(self, maxlen):
-                    return self._value
-            if kind == 'byte':
-                def _to_string(self, maxlen):
-                    return chr(self._value & 0xff)
-        #
-        CTypesPrimitive._fix_class()
-        return CTypesPrimitive
-
-    def new_pointer_type(self, BItem):
-        getbtype = self.ffi._get_cached_btype
-        if BItem is getbtype(model.PrimitiveType('char')):
-            kind = 'charp'
-        elif BItem in (getbtype(model.PrimitiveType('signed char')),
-                       getbtype(model.PrimitiveType('unsigned char'))):
-            kind = 'bytep'
-        elif BItem is getbtype(model.void_type):
-            kind = 'voidp'
-        else:
-            kind = 'generic'
-        #
-        class CTypesPtr(CTypesGenericPtr):
-            __slots__ = ['_own']
-            if kind == 'charp':
-                __slots__ += ['__as_strbuf']
-            _BItem = BItem
-            if hasattr(BItem, '_ctype'):
-                _ctype = ctypes.POINTER(BItem._ctype)
-                _bitem_size = ctypes.sizeof(BItem._ctype)
-            else:
-                _ctype = ctypes.c_void_p
-            if issubclass(BItem, CTypesGenericArray):
-                _reftypename = BItem._get_c_name('(* &)')
-            else:
-                _reftypename = BItem._get_c_name(' * &')
-
-            def __init__(self, init):
-                ctypeobj = BItem._create_ctype_obj(init)
-                if kind == 'charp':
-                    self.__as_strbuf = ctypes.create_string_buffer(
-                        ctypeobj.value + b'\x00')
-                    self._as_ctype_ptr = ctypes.cast(
-                        self.__as_strbuf, self._ctype)
-                else:
-                    self._as_ctype_ptr = ctypes.pointer(ctypeobj)
-                self._address = ctypes.cast(self._as_ctype_ptr,
-                                            ctypes.c_void_p).value
-                self._own = True
-
-            def __add__(self, other):
-                if isinstance(other, (int, long)):
-                    return self._new_pointer_at(self._address +
-                                                other * self._bitem_size)
-                else:
-                    return NotImplemented
-
-            def __sub__(self, other):
-                if isinstance(other, (int, long)):
-                    return self._new_pointer_at(self._address -
-                                                other * self._bitem_size)
-                elif type(self) is type(other):
-                    return (self._address - other._address) // self._bitem_size
-                else:
-                    return NotImplemented
-
-            def __getitem__(self, index):
-                if getattr(self, '_own', False) and index != 0:
-                    raise IndexError
-                return BItem._from_ctypes(self._as_ctype_ptr[index])
-
-            def __setitem__(self, index, value):
-                self._as_ctype_ptr[index] = BItem._to_ctypes(value)
-
-            if kind == 'charp' or kind == 'voidp':
-                @classmethod
-                def _arg_to_ctypes(cls, *value):
-                    if value and isinstance(value[0], bytes):
-                        return ctypes.c_char_p(value[0])
-                    else:
-                        return super(CTypesPtr, cls)._arg_to_ctypes(*value)
-
-            if kind == 'charp' or kind == 'bytep':
-                def _to_string(self, maxlen):
-                    if maxlen < 0:
-                        maxlen = sys.maxsize
-                    p = ctypes.cast(self._as_ctype_ptr,
-                                    ctypes.POINTER(ctypes.c_char))
-                    n = 0
-                    while n < maxlen and p[n] != b'\x00':
-                        n += 1
-                    return b''.join([p[i] for i in range(n)])
-
-            def _get_own_repr(self):
-                if getattr(self, '_own', False):
-                    return 'owning %d bytes' % (
-                        ctypes.sizeof(self._as_ctype_ptr.contents),)
-                return super(CTypesPtr, self)._get_own_repr()
-        #
-        if (BItem is self.ffi._get_cached_btype(model.void_type) or
-            BItem is self.ffi._get_cached_btype(model.PrimitiveType('char'))):
-            CTypesPtr._automatic_casts = True
-        #
-        CTypesPtr._fix_class()
-        return CTypesPtr
-
-    def new_array_type(self, CTypesPtr, length):
-        if length is None:
-            brackets = ' &[]'
-        else:
-            brackets = ' &[%d]' % length
-        BItem = CTypesPtr._BItem
-        getbtype = self.ffi._get_cached_btype
-        if BItem is getbtype(model.PrimitiveType('char')):
-            kind = 'char'
-        elif BItem in (getbtype(model.PrimitiveType('signed char')),
-                       getbtype(model.PrimitiveType('unsigned char'))):
-            kind = 'byte'
-        else:
-            kind = 'generic'
-        #
-        class CTypesArray(CTypesGenericArray):
-            __slots__ = ['_blob', '_own']
-            if length is not None:
-                _ctype = BItem._ctype * length
-            else:
-                __slots__.append('_ctype')
-            _reftypename = BItem._get_c_name(brackets)
-            _declared_length = length
-            _CTPtr = CTypesPtr
-
-            def __init__(self, init):
-                if length is None:
-                    if isinstance(init, (int, long)):
-                        len1 = init
-                        init = None
-                    elif kind == 'char' and isinstance(init, bytes):
-                        len1 = len(init) + 1    # extra null
-                    else:
-                        init = tuple(init)
-                        len1 = len(init)
-                    self._ctype = BItem._ctype * len1
-                self._blob = self._ctype()
-                self._own = True
-                if init is not None:
-                    self._initialize(self._blob, init)
-
-            @staticmethod
-            def _initialize(blob, init):
-                if isinstance(init, bytes):
-                    init = [init[i:i+1] for i in range(len(init))]
-                else:
-                    if isinstance(init, CTypesGenericArray):
-                        if (len(init) != len(blob) or
-                            not isinstance(init, CTypesArray)):
-                            raise TypeError("length/type mismatch: %s" % (init,))
-                    init = tuple(init)
-                if len(init) > len(blob):
-                    raise IndexError("too many initializers")
-                addr = ctypes.cast(blob, ctypes.c_void_p).value
-                PTR = ctypes.POINTER(BItem._ctype)
-                itemsize = ctypes.sizeof(BItem._ctype)
-                for i, value in enumerate(init):
-                    p = ctypes.cast(addr + i * itemsize, PTR)
-                    BItem._initialize(p.contents, value)
-
-            def __len__(self):
-                return len(self._blob)
-
-            def __getitem__(self, index):
-                if not (0 <= index < len(self._blob)):
-                    raise IndexError
-                return BItem._from_ctypes(self._blob[index])
-
-            def __setitem__(self, index, value):
-                if not (0 <= index < len(self._blob)):
-                    raise IndexError
-                self._blob[index] = BItem._to_ctypes(value)
-
-            if kind == 'char' or kind == 'byte':
-                def _to_string(self, maxlen):
-                    if maxlen < 0:
-                        maxlen = len(self._blob)
-                    p = ctypes.cast(self._blob,
-                                    ctypes.POINTER(ctypes.c_char))
-                    n = 0
-                    while n < maxlen and p[n] != b'\x00':
-                        n += 1
-                    return b''.join([p[i] for i in range(n)])
-
-            def _get_own_repr(self):
-                if getattr(self, '_own', False):
-                    return 'owning %d bytes' % (ctypes.sizeof(self._blob),)
-                return super(CTypesArray, self)._get_own_repr()
-
-            def _convert_to_address(self, BClass):
-                if BClass in (CTypesPtr, None) or BClass._automatic_casts:
-                    return ctypes.addressof(self._blob)
-                else:
-                    return CTypesData._convert_to_address(self, BClass)
-
-            @staticmethod
-            def _from_ctypes(ctypes_array):
-                self = CTypesArray.__new__(CTypesArray)
-                self._blob = ctypes_array
-                return self
-
-            @staticmethod
-            def _arg_to_ctypes(value):
-                return CTypesPtr._arg_to_ctypes(value)
-
-            def __add__(self, other):
-                if isinstance(other, (int, long)):
-                    return CTypesPtr._new_pointer_at(
-                        ctypes.addressof(self._blob) +
-                        other * ctypes.sizeof(BItem._ctype))
-                else:
-                    return NotImplemented
-
-            @classmethod
-            def _cast_from(cls, source):
-                raise NotImplementedError("casting to %r" % (
-                    cls._get_c_name(),))
-        #
-        CTypesArray._fix_class()
-        return CTypesArray
-
-    def _new_struct_or_union(self, kind, name, base_ctypes_class):
-        #
-        class struct_or_union(base_ctypes_class):
-            pass
-        struct_or_union.__name__ = '%s_%s' % (kind, name)
-        kind1 = kind
-        #
-        class CTypesStructOrUnion(CTypesBaseStructOrUnion):
-            __slots__ = ['_blob']
-            _ctype = struct_or_union
-            _reftypename = '%s &' % (name,)
-            _kind = kind = kind1
-        #
-        CTypesStructOrUnion._fix_class()
-        return CTypesStructOrUnion
-
-    def new_struct_type(self, name):
-        return self._new_struct_or_union('struct', name, ctypes.Structure)
-
-    def new_union_type(self, name):
-        return self._new_struct_or_union('union', name, ctypes.Union)
-
-    def complete_struct_or_union(self, CTypesStructOrUnion, fields, tp,
-                                 totalsize=-1, totalalignment=-1, sflags=0,
-                                 pack=0):
-        if totalsize >= 0 or totalalignment >= 0:
-            raise NotImplementedError("the ctypes backend of CFFI does not support "
-                                      "structures completed by verify(); please "
-                                      "compile and install the _cffi_backend module.")
-        struct_or_union = CTypesStructOrUnion._ctype
-        fnames = [fname for (fname, BField, bitsize) in fields]
-        btypes = [BField for (fname, BField, bitsize) in fields]
-        bitfields = [bitsize for (fname, BField, bitsize) in fields]
-        #
-        bfield_types = {}
-        cfields = []
-        for (fname, BField, bitsize) in fields:
-            if bitsize < 0:
-                cfields.append((fname, BField._ctype))
-                bfield_types[fname] = BField
-            else:
-                cfields.append((fname, BField._ctype, bitsize))
-                bfield_types[fname] = Ellipsis
-        if sflags & 8:
-            struct_or_union._pack_ = 1
-        elif pack:
-            struct_or_union._pack_ = pack
-        struct_or_union._fields_ = cfields
-        CTypesStructOrUnion._bfield_types = bfield_types
-        #
-        @staticmethod
-        def _create_ctype_obj(init):
-            result = struct_or_union()
-            if init is not None:
-                initialize(result, init)
-            return result
-        CTypesStructOrUnion._create_ctype_obj = _create_ctype_obj
-        #
-        def initialize(blob, init):
-            if is_union:
-                if len(init) > 1:
-                    raise ValueError("union initializer: %d items given, but "
-                                    "only one supported (use a dict if needed)"
-                                     % (len(init),))
-            if not isinstance(init, dict):
-                if isinstance(init, (bytes, unicode)):
-                    raise TypeError("union initializer: got a str")
-                init = tuple(init)
-                if len(init) > len(fnames):
-                    raise ValueError("too many values for %s initializer" %
-                                     CTypesStructOrUnion._get_c_name())
-                init = dict(zip(fnames, init))
-            addr = ctypes.addressof(blob)
-            for fname, value in init.items():
-                BField, bitsize = name2fieldtype[fname]
-                assert bitsize < 0, \
-                       "not implemented: initializer with bit fields"
-                offset = CTypesStructOrUnion._offsetof(fname)
-                PTR = ctypes.POINTER(BField._ctype)
-                p = ctypes.cast(addr + offset, PTR)
-                BField._initialize(p.contents, value)
-        is_union = CTypesStructOrUnion._kind == 'union'
-        name2fieldtype = dict(zip(fnames, zip(btypes, bitfields)))
-        #
-        for fname, BField, bitsize in fields:
-            if fname == '':
-                raise NotImplementedError("nested anonymous structs/unions")
-            if hasattr(CTypesStructOrUnion, fname):
-                raise ValueError("the field name %r conflicts in "
-                                 "the ctypes backend" % fname)
-            if bitsize < 0:
-                def getter(self, fname=fname, BField=BField,
-                           offset=CTypesStructOrUnion._offsetof(fname),
-                           PTR=ctypes.POINTER(BField._ctype)):
-                    addr = ctypes.addressof(self._blob)
-                    p = ctypes.cast(addr + offset, PTR)
-                    return BField._from_ctypes(p.contents)
-                def setter(self, value, fname=fname, BField=BField):
-                    setattr(self._blob, fname, BField._to_ctypes(value))
-                #
-                if issubclass(BField, CTypesGenericArray):
-                    setter = None
-                    if BField._declared_length == 0:
-                        def getter(self, fname=fname, BFieldPtr=BField._CTPtr,
-                                   offset=CTypesStructOrUnion._offsetof(fname),
-                                   PTR=ctypes.POINTER(BField._ctype)):
-                            addr = ctypes.addressof(self._blob)
-                            p = ctypes.cast(addr + offset, PTR)
-                            return BFieldPtr._from_ctypes(p)
-                #
-            else:
-                def getter(self, fname=fname, BField=BField):
-                    return BField._from_ctypes(getattr(self._blob, fname))
-                def setter(self, value, fname=fname, BField=BField):
-                    # xxx obscure workaround
-                    value = BField._to_ctypes(value)
-                    oldvalue = getattr(self._blob, fname)
-                    setattr(self._blob, fname, value)
-                    if value != getattr(self._blob, fname):
-                        setattr(self._blob, fname, oldvalue)
-                        raise OverflowError("value too large for bitfield")
-            setattr(CTypesStructOrUnion, fname, property(getter, setter))
-        #
-        CTypesPtr = self.ffi._get_cached_btype(model.PointerType(tp))
-        for fname in fnames:
-            if hasattr(CTypesPtr, fname):
-                raise ValueError("the field name %r conflicts in "
-                                 "the ctypes backend" % fname)
-            def getter(self, fname=fname):
-                return getattr(self[0], fname)
-            def setter(self, value, fname=fname):
-                setattr(self[0], fname, value)
-            setattr(CTypesPtr, fname, property(getter, setter))
-
-    def new_function_type(self, BArgs, BResult, has_varargs):
-        nameargs = [BArg._get_c_name() for BArg in BArgs]
-        if has_varargs:
-            nameargs.append('...')
-        nameargs = ', '.join(nameargs)
-        #
-        class CTypesFunctionPtr(CTypesGenericPtr):
-            __slots__ = ['_own_callback', '_name']
-            _ctype = ctypes.CFUNCTYPE(getattr(BResult, '_ctype', None),
-                                      *[BArg._ctype for BArg in BArgs],
-                                      use_errno=True)
-            _reftypename = BResult._get_c_name('(* &)(%s)' % (nameargs,))
-
-            def __init__(self, init, error=None):
-                # create a callback to the Python callable init()
-                import traceback
-                assert not has_varargs, "varargs not supported for callbacks"
-                if getattr(BResult, '_ctype', None) is not None:
-                    error = BResult._from_ctypes(
-                        BResult._create_ctype_obj(error))
-                else:
-                    error = None
-                def callback(*args):
-                    args2 = []
-                    for arg, BArg in zip(args, BArgs):
-                        args2.append(BArg._from_ctypes(arg))
-                    try:
-                        res2 = init(*args2)
-                        res2 = BResult._to_ctypes(res2)
-                    except:
-                        traceback.print_exc()
-                        res2 = error
-                    if issubclass(BResult, CTypesGenericPtr):
-                        if res2:
-                            res2 = ctypes.cast(res2, ctypes.c_void_p).value
-                                # .value: http://bugs.python.org/issue1574593
-                        else:
-                            res2 = None
-                    #print repr(res2)
-                    return res2
-                if issubclass(BResult, CTypesGenericPtr):
-                    # The only pointers callbacks can return are void*s:
-                    # http://bugs.python.org/issue5710
-                    callback_ctype = ctypes.CFUNCTYPE(
-                        ctypes.c_void_p,
-                        *[BArg._ctype for BArg in BArgs],
-                        use_errno=True)
-                else:
-                    callback_ctype = CTypesFunctionPtr._ctype
-                self._as_ctype_ptr = callback_ctype(callback)
-                self._address = ctypes.cast(self._as_ctype_ptr,
-                                            ctypes.c_void_p).value
-                self._own_callback = init
-
-            @staticmethod
-            def _initialize(ctypes_ptr, value):
-                if value:
-                    raise NotImplementedError("ctypes backend: not supported: "
-                                          "initializers for function pointers")
-
-            def __repr__(self):
-                c_name = getattr(self, '_name', None)
-                if c_name:
-                    i = self._reftypename.index('(* &)')
-                    if self._reftypename[i-1] not in ' )*':
-                        c_name = ' ' + c_name
-                    c_name = self._reftypename.replace('(* &)', c_name)
-                return CTypesData.__repr__(self, c_name)
-
-            def _get_own_repr(self):
-                if getattr(self, '_own_callback', None) is not None:
-                    return 'calling %r' % (self._own_callback,)
-                return super(CTypesFunctionPtr, self)._get_own_repr()
-
-            def __call__(self, *args):
-                if has_varargs:
-                    assert len(args) >= len(BArgs)
-                    extraargs = args[len(BArgs):]
-                    args = args[:len(BArgs)]
-                else:
-                    assert len(args) == len(BArgs)
-                ctypes_args = []
-                for arg, BArg in zip(args, BArgs):
-                    ctypes_args.append(BArg._arg_to_ctypes(arg))
-                if has_varargs:
-                    for i, arg in enumerate(extraargs):
-                        if arg is None:
-                            ctypes_args.append(ctypes.c_void_p(0))  # NULL
-                            continue
-                        if not isinstance(arg, CTypesData):
-                            raise TypeError(
-                                "argument %d passed in the variadic part "
-                                "needs to be a cdata object (got %s)" %
-                                (1 + len(BArgs) + i, type(arg).__name__))
-                        ctypes_args.append(arg._arg_to_ctypes(arg))
-                result = self._as_ctype_ptr(*ctypes_args)
-                return BResult._from_ctypes(result)
-        #
-        CTypesFunctionPtr._fix_class()
-        return CTypesFunctionPtr
-
-    def new_enum_type(self, name, enumerators, enumvalues, CTypesInt):
-        assert isinstance(name, str)
-        reverse_mapping = dict(zip(reversed(enumvalues),
-                                   reversed(enumerators)))
-        #
-        class CTypesEnum(CTypesInt):
-            __slots__ = []
-            _reftypename = '%s &' % name
-
-            def _get_own_repr(self):
-                value = self._value
-                try:
-                    return '%d: %s' % (value, reverse_mapping[value])
-                except KeyError:
-                    return str(value)
-
-            def _to_string(self, maxlen):
-                value = self._value
-                try:
-                    return reverse_mapping[value]
-                except KeyError:
-                    return str(value)
-        #
-        CTypesEnum._fix_class()
-        return CTypesEnum
-
-    def get_errno(self):
-        return ctypes.get_errno()
-
-    def set_errno(self, value):
-        ctypes.set_errno(value)
-
-    def string(self, b, maxlen=-1):
-        return b._to_string(maxlen)
-
-    def buffer(self, bptr, size=-1):
-        raise NotImplementedError("buffer() with ctypes backend")
-
-    def sizeof(self, cdata_or_BType):
-        if isinstance(cdata_or_BType, CTypesData):
-            return cdata_or_BType._get_size_of_instance()
-        else:
-            assert issubclass(cdata_or_BType, CTypesData)
-            return cdata_or_BType._get_size()
-
-    def alignof(self, BType):
-        assert issubclass(BType, CTypesData)
-        return BType._alignment()
-
-    def newp(self, BType, source):
-        if not issubclass(BType, CTypesData):
-            raise TypeError
-        return BType._newp(source)
-
-    def cast(self, BType, source):
-        return BType._cast_from(source)
-
-    def callback(self, BType, source, error, onerror):
-        assert onerror is None   # XXX not implemented
-        return BType(source, error)
-
-    _weakref_cache_ref = None
-
-    def gcp(self, cdata, destructor, size=0):
-        if self._weakref_cache_ref is None:
-            import weakref
-            class MyRef(weakref.ref):
-                def __eq__(self, other):
-                    myref = self()
-                    return self is other or (
-                        myref is not None and myref is other())
-                def __ne__(self, other):
-                    return not (self == other)
-                def __hash__(self):
-                    try:
-                        return self._hash
-                    except AttributeError:
-                        self._hash = hash(self())
-                        return self._hash
-            self._weakref_cache_ref = {}, MyRef
-        weak_cache, MyRef = self._weakref_cache_ref
-
-        if destructor is None:
-            try:
-                del weak_cache[MyRef(cdata)]
-            except KeyError:
-                raise TypeError("Can remove destructor only on a object "
-                                "previously returned by ffi.gc()")
-            return None
-
-        def remove(k):
-            cdata, destructor = weak_cache.pop(k, (None, None))
-            if destructor is not None:
-                destructor(cdata)
-
-        new_cdata = self.cast(self.typeof(cdata), cdata)
-        assert new_cdata is not cdata
-        weak_cache[MyRef(new_cdata, remove)] = (cdata, destructor)
-        return new_cdata
-
-    typeof = type
-
-    def getcname(self, BType, replace_with):
-        return BType._get_c_name(replace_with)
-
-    def typeoffsetof(self, BType, fieldname, num=0):
-        if isinstance(fieldname, str):
-            if num == 0 and issubclass(BType, CTypesGenericPtr):
-                BType = BType._BItem
-            if not issubclass(BType, CTypesBaseStructOrUnion):
-                raise TypeError("expected a struct or union ctype")
-            BField = BType._bfield_types[fieldname]
-            if BField is Ellipsis:
-                raise TypeError("not supported for bitfields")
-            return (BField, BType._offsetof(fieldname))
-        elif isinstance(fieldname, (int, long)):
-            if issubclass(BType, CTypesGenericArray):
-                BType = BType._CTPtr
-            if not issubclass(BType, CTypesGenericPtr):
-                raise TypeError("expected an array or ptr ctype")
-            BItem = BType._BItem
-            offset = BItem._get_size() * fieldname
-            if offset > sys.maxsize:
-                raise OverflowError
-            return (BItem, offset)
-        else:
-            raise TypeError(type(fieldname))
-
-    def rawaddressof(self, BTypePtr, cdata, offset=None):
-        if isinstance(cdata, CTypesBaseStructOrUnion):
-            ptr = ctypes.pointer(type(cdata)._to_ctypes(cdata))
-        elif isinstance(cdata, CTypesGenericPtr):
-            if offset is None or not issubclass(type(cdata)._BItem,
-                                                CTypesBaseStructOrUnion):
-                raise TypeError("unexpected cdata type")
-            ptr = type(cdata)._to_ctypes(cdata)
-        elif isinstance(cdata, CTypesGenericArray):
-            ptr = type(cdata)._to_ctypes(cdata)
-        else:
-            raise TypeError("expected a <cdata 'struct-or-union'>")
-        if offset:
-            ptr = ctypes.cast(
-                ctypes.c_void_p(
-                    ctypes.cast(ptr, ctypes.c_void_p).value + offset),
-                type(ptr))
-        return BTypePtr._from_ctypes(ptr)
-
-
-class CTypesLibrary(object):
-
-    def __init__(self, backend, cdll):
-        self.backend = backend
-        self.cdll = cdll
-
-    def load_function(self, BType, name):
-        c_func = getattr(self.cdll, name)
-        funcobj = BType._from_ctypes(c_func)
-        funcobj._name = name
-        return funcobj
-
-    def read_variable(self, BType, name):
-        try:
-            ctypes_obj = BType._ctype.in_dll(self.cdll, name)
-        except AttributeError as e:
-            raise NotImplementedError(e)
-        return BType._from_ctypes(ctypes_obj)
-
-    def write_variable(self, BType, name, value):
-        new_ctypes_obj = BType._to_ctypes(value)
-        ctypes_obj = BType._ctype.in_dll(self.cdll, name)
-        ctypes.memmove(ctypes.addressof(ctypes_obj),
-                       ctypes.addressof(new_ctypes_obj),
-                       ctypes.sizeof(BType._ctype))
Index: .vscode/settings 2.json
===================================================================
diff --git a/.vscode/settings 2.json b/.vscode/settings 2.json
deleted file mode 100644
--- a/.vscode/settings 2.json	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,3 +0,0 @@
-{
-    "CodeGPT.apiKey": "CodeGPT Plus Beta"
-}
\ No newline at end of file
Index: cffi/__init__ 2.py
===================================================================
diff --git a/cffi/__init__ 2.py b/cffi/__init__ 2.py
deleted file mode 100644
--- a/cffi/__init__ 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,14 +0,0 @@
-__all__ = ['FFI', 'VerificationError', 'VerificationMissing', 'CDefError',
-           'FFIError']
-
-from .api import FFI
-from .error import CDefError, FFIError, VerificationError, VerificationMissing
-from .error import PkgConfigError
-
-__version__ = "1.16.0"
-__version_info__ = (1, 16, 0)
-
-# The verifier module file names are based on the CRC32 of a string that
-# contains the following version number.  It may be older than __version__
-# if nothing is clearly incompatible.
-__version_verifier_modules__ = "0.8.6"
Index: adapt.egg-info/requires 2.txt
===================================================================
diff --git a/adapt.egg-info/requires 2.txt b/adapt.egg-info/requires 2.txt
deleted file mode 100644
--- a/adapt.egg-info/requires 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-numpy
-pandas
-pyspark==3.1.2
-tensorflow
-pytest
Index: adapt.egg-info/entry_points 2.txt
===================================================================
diff --git a/adapt.egg-info/entry_points 2.txt b/adapt.egg-info/entry_points 2.txt
deleted file mode 100644
--- a/adapt.egg-info/entry_points 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,2 +0,0 @@
-[console_scripts]
-nomad-cli = nomad.__main__:main
Index: user_service/myenv/pyvenv 3.cfg
===================================================================
diff --git a/user_service/myenv/pyvenv 3.cfg b/user_service/myenv/pyvenv 3.cfg
deleted file mode 100644
--- a/user_service/myenv/pyvenv 3.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Users/derrickbass/.pyenv/versions/3.12.2/bin
-include-system-site-packages = false
-version = 3.12.2
-executable = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12
-command = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12 -m venv /Users/derrickbass/Desktop/Autonomod/user_service/myenv
Index: modular_learning_system/cli 2.py
===================================================================
diff --git a/modular_learning_system/cli 2.py b/modular_learning_system/cli 2.py
deleted file mode 100644
--- a/modular_learning_system/cli 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,17 +0,0 @@
-import argparse
-from mls.spark_engine import SparkEngine
-
-def parse_arguments():
-    parser = argparse.ArgumentParser(description='NOMAD CLI')
-    parser.add_argument('--input', '-i', type=str, required=True, help='Input file path')
-    parser.add_argument('--output', '-o', type=str, required=True, help='Output file path')
-    return parser.parse_args()
-
-def main(args):
-    spark_engine = SparkEngine()
-    df = spark_engine.read_csv(args.input)
-    spark_engine.write_parquet(df, args.output)
-
-if __name__ == '__main__':
-    args = parse_arguments()
-    main(args)
\ No newline at end of file
Index: blinker/__init__ 2.py
===================================================================
diff --git a/blinker/__init__ 2.py b/blinker/__init__ 2.py
deleted file mode 100644
--- a/blinker/__init__ 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,19 +0,0 @@
-from blinker.base import ANY
-from blinker.base import NamedSignal
-from blinker.base import Namespace
-from blinker.base import receiver_connected
-from blinker.base import Signal
-from blinker.base import signal
-from blinker.base import WeakNamespace
-
-__all__ = [
-    "ANY",
-    "NamedSignal",
-    "Namespace",
-    "Signal",
-    "WeakNamespace",
-    "receiver_connected",
-    "signal",
-]
-
-__version__ = "1.7.0"
Index: env/pyvenv 2.cfg
===================================================================
diff --git a/env/pyvenv 2.cfg b/env/pyvenv 2.cfg
deleted file mode 100644
--- a/env/pyvenv 2.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Library/Frameworks/Python.framework/Versions/3.11/bin
-include-system-site-packages = false
-version = 3.11.4
-executable = /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11
-command = /Library/Frameworks/Python.framework/Versions/3.11/bin/python3 -m venv /Users/derrickbass/Documents/nomad/env
Index: src/user_service.egg-info/dependency_links 3.txt
===================================================================
diff --git a/src/user_service.egg-info/dependency_links 3.txt b/src/user_service.egg-info/dependency_links 3.txt
deleted file mode 100644
--- a/src/user_service.egg-info/dependency_links 3.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: env/pyvenv 4.cfg
===================================================================
diff --git a/env/pyvenv 4.cfg b/env/pyvenv 4.cfg
deleted file mode 100644
--- a/env/pyvenv 4.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Library/Frameworks/Python.framework/Versions/3.11/bin
-include-system-site-packages = false
-version = 3.11.4
-executable = /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11
-command = /Library/Frameworks/Python.framework/Versions/3.11/bin/python3 -m venv /Users/derrickbass/Documents/nomad/env
Index: src/user_controller 3.py
===================================================================
diff --git a/src/user_controller 3.py b/src/user_controller 3.py
deleted file mode 100644
--- a/src/user_controller 3.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,46 +0,0 @@
-import sys
-sys.path.append('/Users/derrickbass/Desktop/Autonomod/src')  # Add the path to the missing package
-
-from flask import Blueprint, request
-from http import HTTPStatus
-
-from .user_services import UserService  # Fix the import statement
-
-from src import ResponseUtils
-
-api = Blueprint('api', __name__)
-
-user_service = UserService()
-
-@api.route('/users', methods=['POST'])
-def create_user():
-    req_body = request.get_json()
-    response = user_service.create_user(req_body)
-    return ResponseUtils.send_response(HTTPStatus.CREATED, response)
-
-@api.route('/users/login', methods=['POST'])
-def login_user():
-    req_body = request.get_json()
-    response = user_service.login_user(req_body)
-    return ResponseUtils.send_response(HTTPStatus.OK, response)
-
-@api.route('/users', methods=['GET'])
-def get_users():
-    response = user_service.get_users()
-    return ResponseUtils.send_response(HTTPStatus.OK, response)
-
-@api.route('/users/<int:id>', methods=['GET'])
-def get_user_by_id(id: int):
-    response = user_service.get_user_by_id(id)
-    return ResponseUtils.send_response(HTTPStatus.OK, response)
-
-@api.route('/users/<int:id>', methods=['PUT'])
-def update_user(id: int):
-    req_body = request.get_json()
-    response = user_service.update_user(id, req_body)
-    return ResponseUtils.send_response(HTTPStatus.OK, response)
-
-@api.route('/users/<int:id>', methods=['DELETE'])
-def delete_user(id: int):
-    response = user_service.delete_user(id)
-    return ResponseUtils.send_response(HTTPStatus.NO_CONTENT, None)
\ No newline at end of file
Index: adapt.egg-info/top_level 2.txt
===================================================================
diff --git a/adapt.egg-info/top_level 2.txt b/adapt.egg-info/top_level 2.txt
deleted file mode 100644
--- a/adapt.egg-info/top_level 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-nomad
Index: src/user_service.egg-info/requires 2.txt
===================================================================
diff --git a/src/user_service.egg-info/requires 2.txt b/src/user_service.egg-info/requires 2.txt
deleted file mode 100644
--- a/src/user_service.egg-info/requires 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,4 +0,0 @@
-Flask
-SQLAlchemy
-psycopg2-binary
-gunicorn
Index: _distutils_hack/override 2.py
===================================================================
diff --git a/_distutils_hack/override 2.py b/_distutils_hack/override 2.py
deleted file mode 100644
--- a/_distutils_hack/override 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-__import__('_distutils_hack').do_override()
Index: src/user_service.egg-info/SOURCES 3.txt
===================================================================
diff --git a/src/user_service.egg-info/SOURCES 3.txt b/src/user_service.egg-info/SOURCES 3.txt
deleted file mode 100644
--- a/src/user_service.egg-info/SOURCES 3.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,6 +0,0 @@
-setup.py
-src/user_service.egg-info/PKG-INFO
-src/user_service.egg-info/SOURCES.txt
-src/user_service.egg-info/dependency_links.txt
-src/user_service.egg-info/requires.txt
-src/user_service.egg-info/top_level.txt
\ No newline at end of file
Index: src/user_service.egg-info/dependency_links 5.txt
===================================================================
diff --git a/src/user_service.egg-info/dependency_links 5.txt b/src/user_service.egg-info/dependency_links 5.txt
deleted file mode 100644
--- a/src/user_service.egg-info/dependency_links 5.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: blinker/_utilities 2.py
===================================================================
diff --git a/blinker/_utilities 2.py b/blinker/_utilities 2.py
deleted file mode 100644
--- a/blinker/_utilities 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,105 +0,0 @@
-from __future__ import annotations
-
-import typing as t
-from weakref import ref
-
-from blinker._saferef import BoundMethodWeakref
-
-IdentityType = t.Union[t.Tuple[int, int], str, int]
-
-
-class _symbol:
-    def __init__(self, name):
-        """Construct a new named symbol."""
-        self.__name__ = self.name = name
-
-    def __reduce__(self):
-        return symbol, (self.name,)
-
-    def __repr__(self):
-        return self.name
-
-
-_symbol.__name__ = "symbol"
-
-
-class symbol:
-    """A constant symbol.
-
-    >>> symbol('foo') is symbol('foo')
-    True
-    >>> symbol('foo')
-    foo
-
-    A slight refinement of the MAGICCOOKIE=object() pattern.  The primary
-    advantage of symbol() is its repr().  They are also singletons.
-
-    Repeated calls of symbol('name') will all return the same instance.
-
-    """
-
-    symbols = {}  # type: ignore[var-annotated]
-
-    def __new__(cls, name):
-        try:
-            return cls.symbols[name]
-        except KeyError:
-            return cls.symbols.setdefault(name, _symbol(name))
-
-
-def hashable_identity(obj: object) -> IdentityType:
-    if hasattr(obj, "__func__"):
-        return (id(obj.__func__), id(obj.__self__))  # type: ignore[attr-defined]
-    elif hasattr(obj, "im_func"):
-        return (id(obj.im_func), id(obj.im_self))  # type: ignore[attr-defined]
-    elif isinstance(obj, (int, str)):
-        return obj
-    else:
-        return id(obj)
-
-
-WeakTypes = (ref, BoundMethodWeakref)
-
-
-class annotatable_weakref(ref):
-    """A weakref.ref that supports custom instance attributes."""
-
-    receiver_id: t.Optional[IdentityType]
-    sender_id: t.Optional[IdentityType]
-
-
-def reference(  # type: ignore[no-untyped-def]
-    object, callback=None, **annotations
-) -> annotatable_weakref:
-    """Return an annotated weak ref."""
-    if callable(object):
-        weak = callable_reference(object, callback)
-    else:
-        weak = annotatable_weakref(object, callback)
-    for key, value in annotations.items():
-        setattr(weak, key, value)
-    return weak  # type: ignore[no-any-return]
-
-
-def callable_reference(object, callback=None):
-    """Return an annotated weak ref, supporting bound instance methods."""
-    if hasattr(object, "im_self") and object.im_self is not None:
-        return BoundMethodWeakref(target=object, on_delete=callback)
-    elif hasattr(object, "__self__") and object.__self__ is not None:
-        return BoundMethodWeakref(target=object, on_delete=callback)
-    return annotatable_weakref(object, callback)
-
-
-class lazy_property:
-    """A @property that is only evaluated once."""
-
-    def __init__(self, deferred):
-        self._deferred = deferred
-        self.__doc__ = deferred.__doc__
-
-    def __get__(self, obj, cls):
-        if obj is None:
-            return self
-        value = self._deferred(obj)
-        setattr(obj, self._deferred.__name__, value)
-        return value
Index: cffi/vengine_gen 2.py
===================================================================
diff --git a/cffi/vengine_gen 2.py b/cffi/vengine_gen 2.py
deleted file mode 100644
--- a/cffi/vengine_gen 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,675 +0,0 @@
-#
-# DEPRECATED: implementation for ffi.verify()
-#
-import sys, os
-import types
-
-from . import model
-from .error import VerificationError
-
-
-class VGenericEngine(object):
-    _class_key = 'g'
-    _gen_python_module = False
-
-    def __init__(self, verifier):
-        self.verifier = verifier
-        self.ffi = verifier.ffi
-        self.export_symbols = []
-        self._struct_pending_verification = {}
-
-    def patch_extension_kwds(self, kwds):
-        # add 'export_symbols' to the dictionary.  Note that we add the
-        # list before filling it.  When we fill it, it will thus also show
-        # up in kwds['export_symbols'].
-        kwds.setdefault('export_symbols', self.export_symbols)
-
-    def find_module(self, module_name, path, so_suffixes):
-        for so_suffix in so_suffixes:
-            basename = module_name + so_suffix
-            if path is None:
-                path = sys.path
-            for dirname in path:
-                filename = os.path.join(dirname, basename)
-                if os.path.isfile(filename):
-                    return filename
-
-    def collect_types(self):
-        pass      # not needed in the generic engine
-
-    def _prnt(self, what=''):
-        self._f.write(what + '\n')
-
-    def write_source_to_f(self):
-        prnt = self._prnt
-        # first paste some standard set of lines that are mostly '#include'
-        prnt(cffimod_header)
-        # then paste the C source given by the user, verbatim.
-        prnt(self.verifier.preamble)
-        #
-        # call generate_gen_xxx_decl(), for every xxx found from
-        # ffi._parser._declarations.  This generates all the functions.
-        self._generate('decl')
-        #
-        # on Windows, distutils insists on putting init_cffi_xyz in
-        # 'export_symbols', so instead of fighting it, just give up and
-        # give it one
-        if sys.platform == 'win32':
-            if sys.version_info >= (3,):
-                prefix = 'PyInit_'
-            else:
-                prefix = 'init'
-            modname = self.verifier.get_module_name()
-            prnt("void %s%s(void) { }\n" % (prefix, modname))
-
-    def load_library(self, flags=0):
-        # import it with the CFFI backend
-        backend = self.ffi._backend
-        # needs to make a path that contains '/', on Posix
-        filename = os.path.join(os.curdir, self.verifier.modulefilename)
-        module = backend.load_library(filename, flags)
-        #
-        # call loading_gen_struct() to get the struct layout inferred by
-        # the C compiler
-        self._load(module, 'loading')
-
-        # build the FFILibrary class and instance, this is a module subclass
-        # because modules are expected to have usually-constant-attributes and
-        # in PyPy this means the JIT is able to treat attributes as constant,
-        # which we want.
-        class FFILibrary(types.ModuleType):
-            _cffi_generic_module = module
-            _cffi_ffi = self.ffi
-            _cffi_dir = []
-            def __dir__(self):
-                return FFILibrary._cffi_dir
-        library = FFILibrary("")
-        #
-        # finally, call the loaded_gen_xxx() functions.  This will set
-        # up the 'library' object.
-        self._load(module, 'loaded', library=library)
-        return library
-
-    def _get_declarations(self):
-        lst = [(key, tp) for (key, (tp, qual)) in
-                                self.ffi._parser._declarations.items()]
-        lst.sort()
-        return lst
-
-    def _generate(self, step_name):
-        for name, tp in self._get_declarations():
-            kind, realname = name.split(' ', 1)
-            try:
-                method = getattr(self, '_generate_gen_%s_%s' % (kind,
-                                                                step_name))
-            except AttributeError:
-                raise VerificationError(
-                    "not implemented in verify(): %r" % name)
-            try:
-                method(tp, realname)
-            except Exception as e:
-                model.attach_exception_info(e, name)
-                raise
-
-    def _load(self, module, step_name, **kwds):
-        for name, tp in self._get_declarations():
-            kind, realname = name.split(' ', 1)
-            method = getattr(self, '_%s_gen_%s' % (step_name, kind))
-            try:
-                method(tp, realname, module, **kwds)
-            except Exception as e:
-                model.attach_exception_info(e, name)
-                raise
-
-    def _generate_nothing(self, tp, name):
-        pass
-
-    def _loaded_noop(self, tp, name, module, **kwds):
-        pass
-
-    # ----------
-    # typedefs: generates no code so far
-
-    _generate_gen_typedef_decl   = _generate_nothing
-    _loading_gen_typedef         = _loaded_noop
-    _loaded_gen_typedef          = _loaded_noop
-
-    # ----------
-    # function declarations
-
-    def _generate_gen_function_decl(self, tp, name):
-        assert isinstance(tp, model.FunctionPtrType)
-        if tp.ellipsis:
-            # cannot support vararg functions better than this: check for its
-            # exact type (including the fixed arguments), and build it as a
-            # constant function pointer (no _cffi_f_%s wrapper)
-            self._generate_gen_const(False, name, tp)
-            return
-        prnt = self._prnt
-        numargs = len(tp.args)
-        argnames = []
-        for i, type in enumerate(tp.args):
-            indirection = ''
-            if isinstance(type, model.StructOrUnion):
-                indirection = '*'
-            argnames.append('%sx%d' % (indirection, i))
-        context = 'argument of %s' % name
-        arglist = [type.get_c_name(' %s' % arg, context)
-                   for type, arg in zip(tp.args, argnames)]
-        tpresult = tp.result
-        if isinstance(tpresult, model.StructOrUnion):
-            arglist.insert(0, tpresult.get_c_name(' *r', context))
-            tpresult = model.void_type
-        arglist = ', '.join(arglist) or 'void'
-        wrappername = '_cffi_f_%s' % name
-        self.export_symbols.append(wrappername)
-        if tp.abi:
-            abi = tp.abi + ' '
-        else:
-            abi = ''
-        funcdecl = ' %s%s(%s)' % (abi, wrappername, arglist)
-        context = 'result of %s' % name
-        prnt(tpresult.get_c_name(funcdecl, context))
-        prnt('{')
-        #
-        if isinstance(tp.result, model.StructOrUnion):
-            result_code = '*r = '
-        elif not isinstance(tp.result, model.VoidType):
-            result_code = 'return '
-        else:
-            result_code = ''
-        prnt('  %s%s(%s);' % (result_code, name, ', '.join(argnames)))
-        prnt('}')
-        prnt()
-
-    _loading_gen_function = _loaded_noop
-
-    def _loaded_gen_function(self, tp, name, module, library):
-        assert isinstance(tp, model.FunctionPtrType)
-        if tp.ellipsis:
-            newfunction = self._load_constant(False, tp, name, module)
-        else:
-            indirections = []
-            base_tp = tp
-            if (any(isinstance(typ, model.StructOrUnion) for typ in tp.args)
-                    or isinstance(tp.result, model.StructOrUnion)):
-                indirect_args = []
-                for i, typ in enumerate(tp.args):
-                    if isinstance(typ, model.StructOrUnion):
-                        typ = model.PointerType(typ)
-                        indirections.append((i, typ))
-                    indirect_args.append(typ)
-                indirect_result = tp.result
-                if isinstance(indirect_result, model.StructOrUnion):
-                    if indirect_result.fldtypes is None:
-                        raise TypeError("'%s' is used as result type, "
-                                        "but is opaque" % (
-                                            indirect_result._get_c_name(),))
-                    indirect_result = model.PointerType(indirect_result)
-                    indirect_args.insert(0, indirect_result)
-                    indirections.insert(0, ("result", indirect_result))
-                    indirect_result = model.void_type
-                tp = model.FunctionPtrType(tuple(indirect_args),
-                                           indirect_result, tp.ellipsis)
-            BFunc = self.ffi._get_cached_btype(tp)
-            wrappername = '_cffi_f_%s' % name
-            newfunction = module.load_function(BFunc, wrappername)
-            for i, typ in indirections:
-                newfunction = self._make_struct_wrapper(newfunction, i, typ,
-                                                        base_tp)
-        setattr(library, name, newfunction)
-        type(library)._cffi_dir.append(name)
-
-    def _make_struct_wrapper(self, oldfunc, i, tp, base_tp):
-        backend = self.ffi._backend
-        BType = self.ffi._get_cached_btype(tp)
-        if i == "result":
-            ffi = self.ffi
-            def newfunc(*args):
-                res = ffi.new(BType)
-                oldfunc(res, *args)
-                return res[0]
-        else:
-            def newfunc(*args):
-                args = args[:i] + (backend.newp(BType, args[i]),) + args[i+1:]
-                return oldfunc(*args)
-        newfunc._cffi_base_type = base_tp
-        return newfunc
-
-    # ----------
-    # named structs
-
-    def _generate_gen_struct_decl(self, tp, name):
-        assert name == tp.name
-        self._generate_struct_or_union_decl(tp, 'struct', name)
-
-    def _loading_gen_struct(self, tp, name, module):
-        self._loading_struct_or_union(tp, 'struct', name, module)
-
-    def _loaded_gen_struct(self, tp, name, module, **kwds):
-        self._loaded_struct_or_union(tp)
-
-    def _generate_gen_union_decl(self, tp, name):
-        assert name == tp.name
-        self._generate_struct_or_union_decl(tp, 'union', name)
-
-    def _loading_gen_union(self, tp, name, module):
-        self._loading_struct_or_union(tp, 'union', name, module)
-
-    def _loaded_gen_union(self, tp, name, module, **kwds):
-        self._loaded_struct_or_union(tp)
-
-    def _generate_struct_or_union_decl(self, tp, prefix, name):
-        if tp.fldnames is None:
-            return     # nothing to do with opaque structs
-        checkfuncname = '_cffi_check_%s_%s' % (prefix, name)
-        layoutfuncname = '_cffi_layout_%s_%s' % (prefix, name)
-        cname = ('%s %s' % (prefix, name)).strip()
-        #
-        prnt = self._prnt
-        prnt('static void %s(%s *p)' % (checkfuncname, cname))
-        prnt('{')
-        prnt('  /* only to generate compile-time warnings or errors */')
-        prnt('  (void)p;')
-        for fname, ftype, fbitsize, fqual in tp.enumfields():
-            if (isinstance(ftype, model.PrimitiveType)
-                and ftype.is_integer_type()) or fbitsize >= 0:
-                # accept all integers, but complain on float or double
-                prnt('  (void)((p->%s) << 1);' % fname)
-            else:
-                # only accept exactly the type declared.
-                try:
-                    prnt('  { %s = &p->%s; (void)tmp; }' % (
-                        ftype.get_c_name('*tmp', 'field %r'%fname, quals=fqual),
-                        fname))
-                except VerificationError as e:
-                    prnt('  /* %s */' % str(e))   # cannot verify it, ignore
-        prnt('}')
-        self.export_symbols.append(layoutfuncname)
-        prnt('intptr_t %s(intptr_t i)' % (layoutfuncname,))
-        prnt('{')
-        prnt('  struct _cffi_aligncheck { char x; %s y; };' % cname)
-        prnt('  static intptr_t nums[] = {')
-        prnt('    sizeof(%s),' % cname)
-        prnt('    offsetof(struct _cffi_aligncheck, y),')
-        for fname, ftype, fbitsize, fqual in tp.enumfields():
-            if fbitsize >= 0:
-                continue      # xxx ignore fbitsize for now
-            prnt('    offsetof(%s, %s),' % (cname, fname))
-            if isinstance(ftype, model.ArrayType) and ftype.length is None:
-                prnt('    0,  /* %s */' % ftype._get_c_name())
-            else:
-                prnt('    sizeof(((%s *)0)->%s),' % (cname, fname))
-        prnt('    -1')
-        prnt('  };')
-        prnt('  return nums[i];')
-        prnt('  /* the next line is not executed, but compiled */')
-        prnt('  %s(0);' % (checkfuncname,))
-        prnt('}')
-        prnt()
-
-    def _loading_struct_or_union(self, tp, prefix, name, module):
-        if tp.fldnames is None:
-            return     # nothing to do with opaque structs
-        layoutfuncname = '_cffi_layout_%s_%s' % (prefix, name)
-        #
-        BFunc = self.ffi._typeof_locked("intptr_t(*)(intptr_t)")[0]
-        function = module.load_function(BFunc, layoutfuncname)
-        layout = []
-        num = 0
-        while True:
-            x = function(num)
-            if x < 0: break
-            layout.append(x)
-            num += 1
-        if isinstance(tp, model.StructOrUnion) and tp.partial:
-            # use the function()'s sizes and offsets to guide the
-            # layout of the struct
-            totalsize = layout[0]
-            totalalignment = layout[1]
-            fieldofs = layout[2::2]
-            fieldsize = layout[3::2]
-            tp.force_flatten()
-            assert len(fieldofs) == len(fieldsize) == len(tp.fldnames)
-            tp.fixedlayout = fieldofs, fieldsize, totalsize, totalalignment
-        else:
-            cname = ('%s %s' % (prefix, name)).strip()
-            self._struct_pending_verification[tp] = layout, cname
-
-    def _loaded_struct_or_union(self, tp):
-        if tp.fldnames is None:
-            return     # nothing to do with opaque structs
-        self.ffi._get_cached_btype(tp)   # force 'fixedlayout' to be considered
-
-        if tp in self._struct_pending_verification:
-            # check that the layout sizes and offsets match the real ones
-            def check(realvalue, expectedvalue, msg):
-                if realvalue != expectedvalue:
-                    raise VerificationError(
-                        "%s (we have %d, but C compiler says %d)"
-                        % (msg, expectedvalue, realvalue))
-            ffi = self.ffi
-            BStruct = ffi._get_cached_btype(tp)
-            layout, cname = self._struct_pending_verification.pop(tp)
-            check(layout[0], ffi.sizeof(BStruct), "wrong total size")
-            check(layout[1], ffi.alignof(BStruct), "wrong total alignment")
-            i = 2
-            for fname, ftype, fbitsize, fqual in tp.enumfields():
-                if fbitsize >= 0:
-                    continue        # xxx ignore fbitsize for now
-                check(layout[i], ffi.offsetof(BStruct, fname),
-                      "wrong offset for field %r" % (fname,))
-                if layout[i+1] != 0:
-                    BField = ffi._get_cached_btype(ftype)
-                    check(layout[i+1], ffi.sizeof(BField),
-                          "wrong size for field %r" % (fname,))
-                i += 2
-            assert i == len(layout)
-
-    # ----------
-    # 'anonymous' declarations.  These are produced for anonymous structs
-    # or unions; the 'name' is obtained by a typedef.
-
-    def _generate_gen_anonymous_decl(self, tp, name):
-        if isinstance(tp, model.EnumType):
-            self._generate_gen_enum_decl(tp, name, '')
-        else:
-            self._generate_struct_or_union_decl(tp, '', name)
-
-    def _loading_gen_anonymous(self, tp, name, module):
-        if isinstance(tp, model.EnumType):
-            self._loading_gen_enum(tp, name, module, '')
-        else:
-            self._loading_struct_or_union(tp, '', name, module)
-
-    def _loaded_gen_anonymous(self, tp, name, module, **kwds):
-        if isinstance(tp, model.EnumType):
-            self._loaded_gen_enum(tp, name, module, **kwds)
-        else:
-            self._loaded_struct_or_union(tp)
-
-    # ----------
-    # constants, likely declared with '#define'
-
-    def _generate_gen_const(self, is_int, name, tp=None, category='const',
-                            check_value=None):
-        prnt = self._prnt
-        funcname = '_cffi_%s_%s' % (category, name)
-        self.export_symbols.append(funcname)
-        if check_value is not None:
-            assert is_int
-            assert category == 'const'
-            prnt('int %s(char *out_error)' % funcname)
-            prnt('{')
-            self._check_int_constant_value(name, check_value)
-            prnt('  return 0;')
-            prnt('}')
-        elif is_int:
-            assert category == 'const'
-            prnt('int %s(long long *out_value)' % funcname)
-            prnt('{')
-            prnt('  *out_value = (long long)(%s);' % (name,))
-            prnt('  return (%s) <= 0;' % (name,))
-            prnt('}')
-        else:
-            assert tp is not None
-            assert check_value is None
-            if category == 'var':
-                ampersand = '&'
-            else:
-                ampersand = ''
-            extra = ''
-            if category == 'const' and isinstance(tp, model.StructOrUnion):
-                extra = 'const *'
-                ampersand = '&'
-            prnt(tp.get_c_name(' %s%s(void)' % (extra, funcname), name))
-            prnt('{')
-            prnt('  return (%s%s);' % (ampersand, name))
-            prnt('}')
-        prnt()
-
-    def _generate_gen_constant_decl(self, tp, name):
-        is_int = isinstance(tp, model.PrimitiveType) and tp.is_integer_type()
-        self._generate_gen_const(is_int, name, tp)
-
-    _loading_gen_constant = _loaded_noop
-
-    def _load_constant(self, is_int, tp, name, module, check_value=None):
-        funcname = '_cffi_const_%s' % name
-        if check_value is not None:
-            assert is_int
-            self._load_known_int_constant(module, funcname)
-            value = check_value
-        elif is_int:
-            BType = self.ffi._typeof_locked("long long*")[0]
-            BFunc = self.ffi._typeof_locked("int(*)(long long*)")[0]
-            function = module.load_function(BFunc, funcname)
-            p = self.ffi.new(BType)
-            negative = function(p)
-            value = int(p[0])
-            if value < 0 and not negative:
-                BLongLong = self.ffi._typeof_locked("long long")[0]
-                value += (1 << (8*self.ffi.sizeof(BLongLong)))
-        else:
-            assert check_value is None
-            fntypeextra = '(*)(void)'
-            if isinstance(tp, model.StructOrUnion):
-                fntypeextra = '*' + fntypeextra
-            BFunc = self.ffi._typeof_locked(tp.get_c_name(fntypeextra, name))[0]
-            function = module.load_function(BFunc, funcname)
-            value = function()
-            if isinstance(tp, model.StructOrUnion):
-                value = value[0]
-        return value
-
-    def _loaded_gen_constant(self, tp, name, module, library):
-        is_int = isinstance(tp, model.PrimitiveType) and tp.is_integer_type()
-        value = self._load_constant(is_int, tp, name, module)
-        setattr(library, name, value)
-        type(library)._cffi_dir.append(name)
-
-    # ----------
-    # enums
-
-    def _check_int_constant_value(self, name, value):
-        prnt = self._prnt
-        if value <= 0:
-            prnt('  if ((%s) > 0 || (long)(%s) != %dL) {' % (
-                name, name, value))
-        else:
-            prnt('  if ((%s) <= 0 || (unsigned long)(%s) != %dUL) {' % (
-                name, name, value))
-        prnt('    char buf[64];')
-        prnt('    if ((%s) <= 0)' % name)
-        prnt('        sprintf(buf, "%%ld", (long)(%s));' % name)
-        prnt('    else')
-        prnt('        sprintf(buf, "%%lu", (unsigned long)(%s));' %
-             name)
-        prnt('    sprintf(out_error, "%s has the real value %s, not %s",')
-        prnt('            "%s", buf, "%d");' % (name[:100], value))
-        prnt('    return -1;')
-        prnt('  }')
-
-    def _load_known_int_constant(self, module, funcname):
-        BType = self.ffi._typeof_locked("char[]")[0]
-        BFunc = self.ffi._typeof_locked("int(*)(char*)")[0]
-        function = module.load_function(BFunc, funcname)
-        p = self.ffi.new(BType, 256)
-        if function(p) < 0:
-            error = self.ffi.string(p)
-            if sys.version_info >= (3,):
-                error = str(error, 'utf-8')
-            raise VerificationError(error)
-
-    def _enum_funcname(self, prefix, name):
-        # "$enum_$1" => "___D_enum____D_1"
-        name = name.replace('$', '___D_')
-        return '_cffi_e_%s_%s' % (prefix, name)
-
-    def _generate_gen_enum_decl(self, tp, name, prefix='enum'):
-        if tp.partial:
-            for enumerator in tp.enumerators:
-                self._generate_gen_const(True, enumerator)
-            return
-        #
-        funcname = self._enum_funcname(prefix, name)
-        self.export_symbols.append(funcname)
-        prnt = self._prnt
-        prnt('int %s(char *out_error)' % funcname)
-        prnt('{')
-        for enumerator, enumvalue in zip(tp.enumerators, tp.enumvalues):
-            self._check_int_constant_value(enumerator, enumvalue)
-        prnt('  return 0;')
-        prnt('}')
-        prnt()
-
-    def _loading_gen_enum(self, tp, name, module, prefix='enum'):
-        if tp.partial:
-            enumvalues = [self._load_constant(True, tp, enumerator, module)
-                          for enumerator in tp.enumerators]
-            tp.enumvalues = tuple(enumvalues)
-            tp.partial_resolved = True
-        else:
-            funcname = self._enum_funcname(prefix, name)
-            self._load_known_int_constant(module, funcname)
-
-    def _loaded_gen_enum(self, tp, name, module, library):
-        for enumerator, enumvalue in zip(tp.enumerators, tp.enumvalues):
-            setattr(library, enumerator, enumvalue)
-            type(library)._cffi_dir.append(enumerator)
-
-    # ----------
-    # macros: for now only for integers
-
-    def _generate_gen_macro_decl(self, tp, name):
-        if tp == '...':
-            check_value = None
-        else:
-            check_value = tp     # an integer
-        self._generate_gen_const(True, name, check_value=check_value)
-
-    _loading_gen_macro = _loaded_noop
-
-    def _loaded_gen_macro(self, tp, name, module, library):
-        if tp == '...':
-            check_value = None
-        else:
-            check_value = tp     # an integer
-        value = self._load_constant(True, tp, name, module,
-                                    check_value=check_value)
-        setattr(library, name, value)
-        type(library)._cffi_dir.append(name)
-
-    # ----------
-    # global variables
-
-    def _generate_gen_variable_decl(self, tp, name):
-        if isinstance(tp, model.ArrayType):
-            if tp.length_is_unknown():
-                prnt = self._prnt
-                funcname = '_cffi_sizeof_%s' % (name,)
-                self.export_symbols.append(funcname)
-                prnt("size_t %s(void)" % funcname)
-                prnt("{")
-                prnt("  return sizeof(%s);" % (name,))
-                prnt("}")
-            tp_ptr = model.PointerType(tp.item)
-            self._generate_gen_const(False, name, tp_ptr)
-        else:
-            tp_ptr = model.PointerType(tp)
-            self._generate_gen_const(False, name, tp_ptr, category='var')
-
-    _loading_gen_variable = _loaded_noop
-
-    def _loaded_gen_variable(self, tp, name, module, library):
-        if isinstance(tp, model.ArrayType):   # int a[5] is "constant" in the
-                                              # sense that "a=..." is forbidden
-            if tp.length_is_unknown():
-                funcname = '_cffi_sizeof_%s' % (name,)
-                BFunc = self.ffi._typeof_locked('size_t(*)(void)')[0]
-                function = module.load_function(BFunc, funcname)
-                size = function()
-                BItemType = self.ffi._get_cached_btype(tp.item)
-                length, rest = divmod(size, self.ffi.sizeof(BItemType))
-                if rest != 0:
-                    raise VerificationError(
-                        "bad size: %r does not seem to be an array of %s" %
-                        (name, tp.item))
-                tp = tp.resolve_length(length)
-            tp_ptr = model.PointerType(tp.item)
-            value = self._load_constant(False, tp_ptr, name, module)
-            # 'value' is a <cdata 'type *'> which we have to replace with
-            # a <cdata 'type[N]'> if the N is actually known
-            if tp.length is not None:
-                BArray = self.ffi._get_cached_btype(tp)
-                value = self.ffi.cast(BArray, value)
-            setattr(library, name, value)
-            type(library)._cffi_dir.append(name)
-            return
-        # remove ptr=<cdata 'int *'> from the library instance, and replace
-        # it by a property on the class, which reads/writes into ptr[0].
-        funcname = '_cffi_var_%s' % name
-        BFunc = self.ffi._typeof_locked(tp.get_c_name('*(*)(void)', name))[0]
-        function = module.load_function(BFunc, funcname)
-        ptr = function()
-        def getter(library):
-            return ptr[0]
-        def setter(library, value):
-            ptr[0] = value
-        setattr(type(library), name, property(getter, setter))
-        type(library)._cffi_dir.append(name)
-
-cffimod_header = r'''
-#include <stdio.h>
-#include <stddef.h>
-#include <stdarg.h>
-#include <errno.h>
-#include <sys/types.h>   /* XXX for ssize_t on some platforms */
-
-/* this block of #ifs should be kept exactly identical between
-   c/_cffi_backend.c, cffi/vengine_cpy.py, cffi/vengine_gen.py
-   and cffi/_cffi_include.h */
-#if defined(_MSC_VER)
-# include <malloc.h>   /* for alloca() */
-# if _MSC_VER < 1600   /* MSVC < 2010 */
-   typedef __int8 int8_t;
-   typedef __int16 int16_t;
-   typedef __int32 int32_t;
-   typedef __int64 int64_t;
-   typedef unsigned __int8 uint8_t;
-   typedef unsigned __int16 uint16_t;
-   typedef unsigned __int32 uint32_t;
-   typedef unsigned __int64 uint64_t;
-   typedef __int8 int_least8_t;
-   typedef __int16 int_least16_t;
-   typedef __int32 int_least32_t;
-   typedef __int64 int_least64_t;
-   typedef unsigned __int8 uint_least8_t;
-   typedef unsigned __int16 uint_least16_t;
-   typedef unsigned __int32 uint_least32_t;
-   typedef unsigned __int64 uint_least64_t;
-   typedef __int8 int_fast8_t;
-   typedef __int16 int_fast16_t;
-   typedef __int32 int_fast32_t;
-   typedef __int64 int_fast64_t;
-   typedef unsigned __int8 uint_fast8_t;
-   typedef unsigned __int16 uint_fast16_t;
-   typedef unsigned __int32 uint_fast32_t;
-   typedef unsigned __int64 uint_fast64_t;
-   typedef __int64 intmax_t;
-   typedef unsigned __int64 uintmax_t;
-# else
-#  include <stdint.h>
-# endif
-# if _MSC_VER < 1800   /* MSVC < 2013 */
-#  ifndef __cplusplus
-    typedef unsigned char _Bool;
-#  endif
-# endif
-#else
-# include <stdint.h>
-# if (defined (__SVR4) && defined (__sun)) || defined(_AIX) || defined(__hpux)
-#  include <alloca.h>
-# endif
-#endif
-'''
Index: adapt.egg-info/dependency_links 2.txt
===================================================================
diff --git a/adapt.egg-info/dependency_links 2.txt b/adapt.egg-info/dependency_links 2.txt
deleted file mode 100644
--- a/adapt.egg-info/dependency_links 2.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,1 +0,0 @@
-
Index: user_service/myenv/pyvenv 5.cfg
===================================================================
diff --git a/user_service/myenv/pyvenv 5.cfg b/user_service/myenv/pyvenv 5.cfg
deleted file mode 100644
--- a/user_service/myenv/pyvenv 5.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Users/derrickbass/.pyenv/versions/3.12.2/bin
-include-system-site-packages = false
-version = 3.12.2
-executable = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12
-command = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12 -m venv /Users/derrickbass/Desktop/Autonomod/user_service/myenv
Index: src/user_service.egg-info/SOURCES 5.txt
===================================================================
diff --git a/src/user_service.egg-info/SOURCES 5.txt b/src/user_service.egg-info/SOURCES 5.txt
deleted file mode 100644
--- a/src/user_service.egg-info/SOURCES 5.txt	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,6 +0,0 @@
-setup.py
-src/user_service.egg-info/PKG-INFO
-src/user_service.egg-info/SOURCES.txt
-src/user_service.egg-info/dependency_links.txt
-src/user_service.egg-info/requires.txt
-src/user_service.egg-info/top_level.txt
\ No newline at end of file
Index: cffi/setuptools_ext 2.py
===================================================================
diff --git a/cffi/setuptools_ext 2.py b/cffi/setuptools_ext 2.py
deleted file mode 100644
--- a/cffi/setuptools_ext 2.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,216 +0,0 @@
-import os
-import sys
-
-try:
-    basestring
-except NameError:
-    # Python 3.x
-    basestring = str
-
-def error(msg):
-    from cffi._shimmed_dist_utils import DistutilsSetupError
-    raise DistutilsSetupError(msg)
-
-
-def execfile(filename, glob):
-    # We use execfile() (here rewritten for Python 3) instead of
-    # __import__() to load the build script.  The problem with
-    # a normal import is that in some packages, the intermediate
-    # __init__.py files may already try to import the file that
-    # we are generating.
-    with open(filename) as f:
-        src = f.read()
-    src += '\n'      # Python 2.6 compatibility
-    code = compile(src, filename, 'exec')
-    exec(code, glob, glob)
-
-
-def add_cffi_module(dist, mod_spec):
-    from cffi.api import FFI
-
-    if not isinstance(mod_spec, basestring):
-        error("argument to 'cffi_modules=...' must be a str or a list of str,"
-              " not %r" % (type(mod_spec).__name__,))
-    mod_spec = str(mod_spec)
-    try:
-        build_file_name, ffi_var_name = mod_spec.split(':')
-    except ValueError:
-        error("%r must be of the form 'path/build.py:ffi_variable'" %
-              (mod_spec,))
-    if not os.path.exists(build_file_name):
-        ext = ''
-        rewritten = build_file_name.replace('.', '/') + '.py'
-        if os.path.exists(rewritten):
-            ext = ' (rewrite cffi_modules to [%r])' % (
-                rewritten + ':' + ffi_var_name,)
-        error("%r does not name an existing file%s" % (build_file_name, ext))
-
-    mod_vars = {'__name__': '__cffi__', '__file__': build_file_name}
-    execfile(build_file_name, mod_vars)
-
-    try:
-        ffi = mod_vars[ffi_var_name]
-    except KeyError:
-        error("%r: object %r not found in module" % (mod_spec,
-                                                     ffi_var_name))
-    if not isinstance(ffi, FFI):
-        ffi = ffi()      # maybe it's a function instead of directly an ffi
-    if not isinstance(ffi, FFI):
-        error("%r is not an FFI instance (got %r)" % (mod_spec,
-                                                      type(ffi).__name__))
-    if not hasattr(ffi, '_assigned_source'):
-        error("%r: the set_source() method was not called" % (mod_spec,))
-    module_name, source, source_extension, kwds = ffi._assigned_source
-    if ffi._windows_unicode:
-        kwds = kwds.copy()
-        ffi._apply_windows_unicode(kwds)
-
-    if source is None:
-        _add_py_module(dist, ffi, module_name)
-    else:
-        _add_c_module(dist, ffi, module_name, source, source_extension, kwds)
-
-def _set_py_limited_api(Extension, kwds):
-    """
-    Add py_limited_api to kwds if setuptools >= 26 is in use.
-    Do not alter the setting if it already exists.
-    Setuptools takes care of ignoring the flag on Python 2 and PyPy.
-
-    CPython itself should ignore the flag in a debugging version
-    (by not listing .abi3.so in the extensions it supports), but
-    it doesn't so far, creating troubles.  That's why we check
-    for "not hasattr(sys, 'gettotalrefcount')" (the 2.7 compatible equivalent
-    of 'd' not in sys.abiflags). (http://bugs.python.org/issue28401)
-
-    On Windows, with CPython <= 3.4, it's better not to use py_limited_api
-    because virtualenv *still* doesn't copy PYTHON3.DLL on these versions.
-    Recently (2020) we started shipping only >= 3.5 wheels, though.  So
-    we'll give it another try and set py_limited_api on Windows >= 3.5.
-    """
-    from cffi import recompiler
-
-    if ('py_limited_api' not in kwds and not hasattr(sys, 'gettotalrefcount')
-            and recompiler.USE_LIMITED_API):
-        import setuptools
-        try:
-            setuptools_major_version = int(setuptools.__version__.partition('.')[0])
-            if setuptools_major_version >= 26:
-                kwds['py_limited_api'] = True
-        except ValueError:  # certain development versions of setuptools
-            # If we don't know the version number of setuptools, we
-            # try to set 'py_limited_api' anyway.  At worst, we get a
-            # warning.
-            kwds['py_limited_api'] = True
-    return kwds
-
-def _add_c_module(dist, ffi, module_name, source, source_extension, kwds):
-    # We are a setuptools extension. Need this build_ext for py_limited_api.
-    from setuptools.command.build_ext import build_ext
-    from cffi._shimmed_dist_utils import Extension, log, mkpath
-    from cffi import recompiler
-
-    allsources = ['$PLACEHOLDER']
-    allsources.extend(kwds.pop('sources', []))
-    kwds = _set_py_limited_api(Extension, kwds)
-    ext = Extension(name=module_name, sources=allsources, **kwds)
-
-    def make_mod(tmpdir, pre_run=None):
-        c_file = os.path.join(tmpdir, module_name + source_extension)
-        log.info("generating cffi module %r" % c_file)
-        mkpath(tmpdir)
-        # a setuptools-only, API-only hook: called with the "ext" and "ffi"
-        # arguments just before we turn the ffi into C code.  To use it,
-        # subclass the 'distutils.command.build_ext.build_ext' class and
-        # add a method 'def pre_run(self, ext, ffi)'.
-        if pre_run is not None:
-            pre_run(ext, ffi)
-        updated = recompiler.make_c_source(ffi, module_name, source, c_file)
-        if not updated:
-            log.info("already up-to-date")
-        return c_file
-
-    if dist.ext_modules is None:
-        dist.ext_modules = []
-    dist.ext_modules.append(ext)
-
-    base_class = dist.cmdclass.get('build_ext', build_ext)
-    class build_ext_make_mod(base_class):
-        def run(self):
-            if ext.sources[0] == '$PLACEHOLDER':
-                pre_run = getattr(self, 'pre_run', None)
-                ext.sources[0] = make_mod(self.build_temp, pre_run)
-            base_class.run(self)
-    dist.cmdclass['build_ext'] = build_ext_make_mod
-    # NB. multiple runs here will create multiple 'build_ext_make_mod'
-    # classes.  Even in this case the 'build_ext' command should be
-    # run once; but just in case, the logic above does nothing if
-    # called again.
-
-
-def _add_py_module(dist, ffi, module_name):
-    from setuptools.command.build_py import build_py
-    from setuptools.command.build_ext import build_ext
-    from cffi._shimmed_dist_utils import log, mkpath
-    from cffi import recompiler
-
-    def generate_mod(py_file):
-        log.info("generating cffi module %r" % py_file)
-        mkpath(os.path.dirname(py_file))
-        updated = recompiler.make_py_source(ffi, module_name, py_file)
-        if not updated:
-            log.info("already up-to-date")
-
-    base_class = dist.cmdclass.get('build_py', build_py)
-    class build_py_make_mod(base_class):
-        def run(self):
-            base_class.run(self)
-            module_path = module_name.split('.')
-            module_path[-1] += '.py'
-            generate_mod(os.path.join(self.build_lib, *module_path))
-        def get_source_files(self):
-            # This is called from 'setup.py sdist' only.  Exclude
-            # the generate .py module in this case.
-            saved_py_modules = self.py_modules
-            try:
-                if saved_py_modules:
-                    self.py_modules = [m for m in saved_py_modules
-                                         if m != module_name]
-                return base_class.get_source_files(self)
-            finally:
-                self.py_modules = saved_py_modules
-    dist.cmdclass['build_py'] = build_py_make_mod
-
-    # distutils and setuptools have no notion I could find of a
-    # generated python module.  If we don't add module_name to
-    # dist.py_modules, then things mostly work but there are some
-    # combination of options (--root and --record) that will miss
-    # the module.  So we add it here, which gives a few apparently
-    # harmless warnings about not finding the file outside the
-    # build directory.
-    # Then we need to hack more in get_source_files(); see above.
-    if dist.py_modules is None:
-        dist.py_modules = []
-    dist.py_modules.append(module_name)
-
-    # the following is only for "build_ext -i"
-    base_class_2 = dist.cmdclass.get('build_ext', build_ext)
-    class build_ext_make_mod(base_class_2):
-        def run(self):
-            base_class_2.run(self)
-            if self.inplace:
-                # from get_ext_fullpath() in distutils/command/build_ext.py
-                module_path = module_name.split('.')
-                package = '.'.join(module_path[:-1])
-                build_py = self.get_finalized_command('build_py')
-                package_dir = build_py.get_package_dir(package)
-                file_name = module_path[-1] + '.py'
-                generate_mod(os.path.join(package_dir, file_name))
-    dist.cmdclass['build_ext'] = build_ext_make_mod
-
-def cffi_modules(dist, attr, value):
-    assert attr == 'cffi_modules'
-    if isinstance(value, basestring):
-        value = [value]
-
-    for cffi_module in value:
-        add_cffi_module(dist, cffi_module)
Index: modular_learning_system/pyproject 2.toml
===================================================================
diff --git a/modular_learning_system/pyproject 2.toml b/modular_learning_system/pyproject 2.toml
deleted file mode 100644
--- a/modular_learning_system/pyproject 2.toml	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,17 +0,0 @@
-[tool.poetry]
-name = "nomad"
-version = "0.1.0"
-description = "This repository serves as a platform for developing, benchmarking, and solving real-world problems using machine learning techniques."
-authors = ["Derrick Bass <derrick.bass2@gmail.com>"]
-license = "Apache License 2.0"
-readme = "README.md"
-
-[tool.poetry.dependencies]
-python = "^3.10"
-numpy = "*"
-pytest = "^8.0.2"
-pyspark = "*"
-
-[build-system]
-requires = ["poetry-core>=1.0.0"]
-build-backend = "poetry.core.masonry.api"
\ No newline at end of file
Index: user_service/myenv/pyvenv 2.cfg
===================================================================
diff --git a/user_service/myenv/pyvenv 2.cfg b/user_service/myenv/pyvenv 2.cfg
deleted file mode 100644
--- a/user_service/myenv/pyvenv 2.cfg	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,5 +0,0 @@
-home = /Users/derrickbass/.pyenv/versions/3.12.2/bin
-include-system-site-packages = false
-version = 3.12.2
-executable = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12
-command = /Users/derrickbass/.pyenv/versions/3.12.2/bin/python3.12 -m venv /Users/derrickbass/Desktop/Autonomod/user_service/myenv
Index: EdStatsCountry.csv
===================================================================
diff --git a/EdStatsCountry.csv b/EdStatsCountry.csv
deleted file mode 100644
--- a/EdStatsCountry.csv	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ /dev/null	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
@@ -1,242 +0,0 @@
-"Country Code","Short Name","Table Name","Long Name","2-alpha code","Currency Unit","Special Notes","Region","Income Group","WB-2 code","National accounts base year","National accounts reference year","SNA price valuation","Lending category","Other groups","System of National Accounts","Alternative conversion factor","PPP survey year","Balance of Payments Manual in use","External debt Reporting status","System of trade","Government Accounting concept","IMF data dissemination standard","Latest population census","Latest household survey","Source of most recent Income and expenditure data","Vital registration complete","Latest agricultural census","Latest industrial data","Latest trade data","Latest water withdrawal data",
-"ABW","Aruba","Aruba","Aruba","AW","Aruban florin","SNA data for 2000-2011 are updated from official government statistics; 1994-1999 from UN databases. Base year has changed from 1995 to 2000.","Latin America & Caribbean","High income: nonOECD","AW","2000","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","Special trade system","","","2010","","","Yes","","","2012","",
-"AFG","Afghanistan","Afghanistan","Islamic State of Afghanistan","AF","Afghan afghani","Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy.","South Asia","Low income","AF","2002/03","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","","","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","1979","Multiple Indicator Cluster Survey (MICS), 2010/11","Integrated household survey (IHS), 2008","","2013/14","","2012","2000",
-"AGO","Angola","Angola","People's Republic of Angola","AO","Angolan kwanza","April 2013 database update: Based on IMF data, national accounts data were revised for 2000 onward; the base year changed to 2002.","Sub-Saharan Africa","Upper middle income","AO","2002","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1991–96","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","1970","Malaria Indicator Survey (MIS), 2011","Integrated household survey (IHS), 2008","","2015","","","2005",
-"ALB","Albania","Albania","Republic of Albania","AL","Albanian lek","","Europe & Central Asia","Upper middle income","AL","Original chained constant price data are rescaled.","1996","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 2008/09","Living Standards Measurement Study Survey (LSMS), 2012","Yes","2012","2010","2012","2006",
-"AND","Andorra","Andorra","Principality of Andorra","AD","Euro","","Europe & Central Asia","High income: nonOECD","AD","1990","","","","","Country uses the 1968 System of National Accounts methodology.","","","","","Special trade system","","","2011. Population figures compiled from administrative registers.","","","Yes","","","2006","",
-"ARB","Arab World","Arab World","Arab World","1A","","Arab World aggregate. Arab World is composed of members of the League of Arab States.","","","1A","","","","","","","","","","","","","","","","","","","","","",
-"ARE","United Arab Emirates","United Arab Emirates","United Arab Emirates","AE","U.A.E. dirham","April 2013 database update: Based on data from the National Bureau of Statistics, national accounts data were revised for 2001 onward; the base year changed to 2007.","Middle East & North Africa","High income: nonOECD","AE","2007","","Value added at producer prices (VAP)","","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","","","","2012","","2011","2005",
-"ARG","Argentina","Argentina","Argentine Republic","AR","Argentine peso","","Latin America & Caribbean","Upper middle income","AR","2004","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1971–84","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2011/12","Integrated household survey (IHS), 2012","Yes","2013","2002","2012","2000",
-"ARM","Armenia","Armenia","Republic of Armenia","AM","Armenian dram","","Europe & Central Asia","Lower middle income","AM","Original chained constant price data are rescaled.","1996","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1990–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Demographic and Health Survey (DHS), 2010","Integrated household survey (IHS), 2012","Yes","2013/14","","2012","2007",
-"ASM","American Samoa","American Samoa","American Samoa","AS","U.S. dollar","","East Asia & Pacific","Upper middle income","AS","","","","","","Country uses the 1968 System of National Accounts methodology.","","","","","Special trade system","","","2010","","","Yes","2007","","","",
-"ATG","Antigua and Barbuda","Antigua and Barbuda","Antigua and Barbuda","AG","East Caribbean dollar","April 2012 database update: Based on official government statistics, national accounts data were revised for 2000 onward; the base year changed to 2006.","Latin America & Caribbean","High income: nonOECD","AG","2006","","Value added at basic prices (VAB)","IBRD","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","","","Yes","2007","","2012","2005",
-"AUS","Australia","Australia","Commonwealth of Australia","AU","Australian dollar","Fiscal year end: June 30; reporting period for national accounts data: FY. Value added current series updated by the Australian Bureau of Statistics; data revised from 1990 onward; Australia reports using SNA 2008.","East Asia & Pacific","High income: OECD","AU","Original chained constant price data are rescaled.","2012","Value added at basic prices (VAB)","","","Country uses the 2008 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Expenditure survey/budget survey (ES/BS), 1994","Yes","2011","2010","2012","2000",
-"AUT","Austria","Austria","Republic of Austria","AT","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 13.7603 Austrian schilling. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","AT","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011. Population figures compiled from administrative registers.","","Income survey (IS), 2000","Yes","2010","2009","2012","2002",
-"AZE","Azerbaijan","Azerbaijan","Republic of Azerbaijan","AZ","New Azeri manat","April 2012 database update: National accounts historical expenditure series in constant prices were revised in line with State Statistical Committee data that were not previously available.","Europe & Central Asia","Upper middle income","AZ","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1992–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2009","Demographic and Health Survey (DHS), 2006","Expenditure survey/budget survey (ES/BS), 2012","Yes","2015","2010","2012","2005",
-"BDI","Burundi","Burundi","Republic of Burundi","BI","Burundi franc","","Sub-Saharan Africa","Low income","BI","2005","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2008","Malaria Indicator Survey (MIS), 2012","Core Welfare Indicator Questionnaire Survey (CWIQ), 2006","","","","2012","2000",
-"BEL","Belgium","Belgium","Kingdom of Belgium","BE","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 40.3399 Belgian franc. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","BE","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Integrated household survey (IHS), 2000","Yes","2010","2009","2012","2007",
-"BEN","Benin","Benin","Republic of Benin","BJ","CFA franc","","Sub-Saharan Africa","Low income","BJ","1985","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","1992","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2013","Demographic and Health Survey (DHS), 2011/12","Core Welfare Indicator Questionnaire Survey (CWIQ), 2011","","2011/12","","2010","2001",
-"BFA","Burkina Faso","Burkina Faso","Burkina Faso","BF","CFA franc","","Sub-Saharan Africa","Low income","BF","1999","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1992–93","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2006","Demographic and Health Survey (DHS), 2010","Core Welfare Indicator Questionnaire Survey (CWIQ), 2009","","2010","","2011","2001",
-"BGD","Bangladesh","Bangladesh","People's Republic of Bangladesh","BD","Bangladeshi taka","Fiscal year end: June 30; reporting period for national accounts data: FY.","South Asia","Low income","BD","1995/96","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 2011","Integrated household survey (IHS), 2010","","2008","","2007","2008",
-"BGR","Bulgaria","Bulgaria","Republic of Bulgaria","BG","Bulgarian lev","April 2011 database update: The National Statistical Office revised national accounts data from 1995 onward. GDP in current prices were about 4 percent higher than previous estimates.","Europe & Central Asia","Upper middle income","BG","Original chained constant price data are rescaled.","2002","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1978–89, 1991–92","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Living Standards Measurement Study Survey (LSMS), 2007","Expenditure survey/budget survey (ES/BS), 2007","Yes","2010","2010","2012","2009",
-"BHR","Bahrain","Bahrain","Kingdom of Bahrain","BH","Bahraini dinar","","Middle East & North Africa","High income: nonOECD","BH","1985","","Value added at producer prices (VAP)","","","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","","","Yes","","","2011","2003",
-"BHS","The Bahamas","Bahamas, The","Commonwealth of The Bahamas","BS","Bahamian dollar","","Latin America & Caribbean","High income: nonOECD","BS","2006","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","","","","","","2012","",
-"BIH","Bosnia and Herzegovina","Bosnia and Herzegovina","Bosnia and Herzegovina","BA","Bosnia and Herzegovina convertible mark","","Europe & Central Asia","Upper middle income","BA","Original chained constant price data are rescaled.","1996","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2013","Multiple Indicator Cluster Survey (MICS), 2011/12","Living Standards Measurement Study Survey (LSMS), 2007","Yes","","","2012","2009",
-"BLR","Belarus","Belarus","Republic of Belarus","BY","Belarusian rubel","","Europe & Central Asia","Upper middle income","BY","Original chained constant price data are rescaled.","2000","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1990–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2012","Expenditure survey/budget survey (ES/BS), 2012","Yes","","2009","2012","2000",
-"BLZ","Belize","Belize","Belize","BZ","Belize dollar","","Latin America & Caribbean","Upper middle income","BZ","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2011","Expenditure survey/budget survey (ES/BS), 2011","","","","2012","2000",
-"BMU","Bermuda","Bermuda","The Bermudas","BM","Bermuda dollar","","North America","High income: nonOECD","BM","2006","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","","","2010","","","Yes","","","2012","",
-"BOL","Bolivia","Bolivia","Plurinational State of Bolivia","BO","Bolivian Boliviano","","Latin America & Caribbean","Lower middle income","BO","1990","","Value added at basic prices (VAB)","Blend","HIPC","Country uses the 1968 System of National Accounts methodology.","1960–85","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2012","Demographic and Health Survey (DHS), 2008","Integrated household survey (IHS), 2009","","2013","2001","2012","2000",
-"BRA","Brazil","Brazil","Federative Republic of Brazil","BR","Brazilian real","","Latin America & Caribbean","Upper middle income","BR","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","World Health Survey (WHS), 2003","Integrated household survey (IHS), 2012","","2006","2010","2012","2006",
-"BRB","Barbados","Barbados","Barbados","BB","Barbados dollar","","Latin America & Caribbean","High income: nonOECD","BB","1974","","Value added at basic prices (VAB)","","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2012","","Yes","2010. Population and Housing Census.","","2012","2005",
-"BRN","Brunei","Brunei Darussalam","Brunei Darussalam","BN","Brunei dollar","","East Asia & Pacific","High income: nonOECD","BN","2000","","Value added at producer prices (VAP)","","","Country uses the 1993 System of National Accounts methodology.","","2005","","","Special trade system","","General Data Dissemination System (GDDS)","2011","","","Yes","","","2012","1994",
-"BTN","Bhutan","Bhutan","Kingdom of Bhutan","BT","Bhutanese ngultrum","April 2013 database update: Data were updated using the government of Bhutan macroeconomic framework.","South Asia","Lower middle income","BT","2000","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2005","Multiple Indicator Cluster Survey (MICS), 2010","Integrated household survey (IHS), 2012","","2009","","2011","2008",
-"BWA","Botswana","Botswana","Republic of Botswana","BW","Botswana pula","Fiscal year end: March 31; reporting period for national accounts data: CY. Based on official government statistics, national accounts data have been revised from 2006 onward; the new base year is 2006. Data before 2006 were reported on a fiscal year basis.","Sub-Saharan Africa","Upper middle income","BW","2006","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 1988","Expenditure survey/budget survey (ES/BS), 2009/10","","2011. Population and Housing Census.","2010","2012","2000",
-"CAF","Central African Republic","Central African Republic","Central African Republic","CF","CFA franc","","Sub-Saharan Africa","Low income","CF","2000","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2003","Multiple Indicator Cluster Survey (MICS), 2010","Priority survey (PS), 2008","","","","2011","2005",
-"CAN","Canada","Canada","Canada","CA","Canadian dollar","Fiscal year end: March 31; reporting period for national accounts data: CY.","North America","High income: OECD","CA","2005","","Value added at basic prices (VAB)","","","Country uses the 2008 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Labor force survey (LFS), 2000","Yes","2011","2010","2012","1986",
-"CHE","Switzerland","Switzerland","Switzerland","CH","Swiss franc","","Europe & Central Asia","High income: OECD","CH","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","","Expenditure survey/budget survey (ES/BS), 2000","Yes","2008","2007","2012","2000",
-"CHI","Channel Islands","Channel Islands","Channel Islands","","Pound sterling","","Europe & Central Asia","High income: nonOECD","JG","2003","2007","Value added at basic prices (VAB)","","","Country uses the 1968 System of National Accounts methodology.","","","","","","","","Guernsey: 2009; Jersey: 2011.","","","Yes. Vital registration for Guernsey and Jersey.","","","","",
-"CHL","Chile","Chile","Republic of Chile","CL","Chilean peso","","Latin America & Caribbean","High income: OECD","CL","2008","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2012","","Integrated household survey (IHS), 2011","Yes","2007","2008","2012","2007",
-"CHN","China","China","People's Republic of China","CN","Chinese yuan","On 1 July 1997 China resumed its exercise of sovereignty over Hong Kong; and on 20 December 1999 China resumed its exercise of sovereignty over Macao. Unless otherwise noted, data for China do not include data for Hong Kong SAR, China; Macao SAR, China; or Taiwan, China. Based on data from the National Bureau of Statistics, the methodology for national accounts exports and imports of goods and services in constant prices have been revised from 2000 onward.","East Asia & Pacific","Upper middle income","CN","2000","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1978–93","2005","IMF Balance of Payments Manual, 6th edition.","Preliminary","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","National Sample Survey on Population Change (NSS), 2007","Integrated household survey (IHS), 2008","","2007","2007","2012","2005",
-"CIV","Côte d'Ivoire","Côte d'Ivoire","Republic of Côte d'Ivoire","CI","CFA franc","","Sub-Saharan Africa","Lower middle income","CI","1996","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Estimate","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","1998","Demographic and Health Survey (DHS), 2011/12","Integrated household survey (IHS), 2008","","2014","","2012","2005",
-"CMR","Cameroon","Cameroon","Republic of Cameroon","CM","CFA franc","","Sub-Saharan Africa","Lower middle income","CM","2000","","Value added at basic prices (VAB)","Blend","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2005","Demographic and Health Survey (DHS), 2011","Priority survey (PS), 2007","","","2002","2012","2000",
-"COD","Dem. Rep. Congo","Congo, Dem. Rep.","Democratic Republic of the Congo","CD","Congolese franc","Based on INS (2000-09) and IMF (2010-13) data, national accounts data were revised for 2000 onward; the base year changed to 2005.","Sub-Saharan Africa","Low income","ZR","2005","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1999–2001","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","1984","Demographic and Health Survey (DHS), 2013","1-2-3 survey (1-2-3), 2004/05","","","","","2005",
-"COG","Congo","Congo, Rep.","Republic of Congo","CG","CFA franc","April 2013 database update: Based on IMF data, national accounts data were revised for 1990 onward; the base year changed to 1990.","Sub-Saharan Africa","Lower middle income","CG","1990","","Value added at producer prices (VAP)","Blend","HIPC","Country uses the 1968 System of National Accounts methodology.","1993","2005","IMF Balance of Payments Manual, 6th edition.","Preliminary","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2007","Demographic and Health Survey (DHS), 2011/12","Core Welfare Indicator Questionnaire Survey (CWIQ)/Priority survey (PS), 2011","","2013","2009","2010","2002",
-"COL","Colombia","Colombia","Republic of Colombia","CO","Colombian peso","","Latin America & Caribbean","Upper middle income","CO","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1992–94","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2006","Demographic and Health Survey (DHS), 2010","Integrated household survey (IHS), 2012","","2013","2010","2012","2000",
-"COM","Comoros","Comoros","Union of the Comoros","KM","Comorian franc","","Sub-Saharan Africa","Low income","KM","1990","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","","Actual","Special trade system","","General Data Dissemination System (GDDS)","2003","Demographic and Health Survey (DHS), 2012","Integrated household survey (IHS), 2004","","","","2009","1999",
-"CPV","Cabo Verde","Cabo Verde","Republic of Cabo Verde","CV","Cabo Verde escudo","Cabo Verde is the new name for the country previously listed as Cape Verde. Based on official government statistics and IMF data, national accounts data have been revised from 1990 onward; the new base year is 2007.","Sub-Saharan Africa","Lower middle income","CV","2007","","Value added at producer prices (VAP)","Blend","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Demographic and Health Survey (DHS), 2005","Expenditure survey/budget survey (ES/BS), 2007","Yes","2014","","2012","2001",
-"CRI","Costa Rica","Costa Rica","Republic of Costa Rica","CR","Costa Rican colon","","Latin America & Caribbean","Upper middle income","CR","1991","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2011","Integrated household survey (IHS), 2012","Yes","2014","2010","2012","1997",
-"CUB","Cuba","Cuba","Republic of Cuba","CU","Cuban peso","","Latin America & Caribbean","Upper middle income","CU","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","","","Special trade system","","","2012","Multiple Indicator Cluster Survey (MICS), 2010/11","","Yes","","","2006","2007",
-"CUW","Curaçao","Curaçao","Curaçao","CW","Netherlands Antilles guilder","","Latin America & Caribbean","High income: nonOECD","CW","","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","","","","","","","","","","","",
-"CYM","Cayman Islands","Cayman Islands","Cayman Islands","KY","Cayman Islands dollar","","Latin America & Caribbean","High income: nonOECD","KY","2007","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","General trade system","","","2010","","","Yes","","","","",
-"CYP","Cyprus","Cyprus","Republic of Cyprus","CY","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate entered into force on January 1, 2008: 1 euro = 0.585274 Cyprus pounds. Please note that historical data are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: nonOECD","CY","Original chained constant price data are rescaled.","2000","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","","Yes","2010","2010","2012","2009",
-"CZE","Czech Republic","Czech Republic","Czech Republic","CZ","Czech koruna","","Europe & Central Asia","High income: OECD","CZ","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","World Health Survey (WHS), 2003","Income survey (IS), 1996","Yes","2010","2007","2012","2007",
-"DEU","Germany","Germany","Federal Republic of Germany","DE","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 1.95583 German mark. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","DE","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Integrated household survey (IHS), 2000","Yes","2010","2009","2012","2007",
-"DJI","Djibouti","Djibouti","Republic of Djibouti","DJ","Djibouti franc","","Middle East & North Africa","Lower middle income","DJ","1990","","Value added at basic prices (VAB)","IDA","","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","General Data Dissemination System (GDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2006","Priority survey (PS), 2002","","","","2009","2000",
-"DMA","Dominica","Dominica","Commonwealth of Dominica","DM","East Caribbean dollar","April 2012 database update: Based on official government statistics, national accounts data were revised for 2000 onward; the base year changed to 2006.","Latin America & Caribbean","Upper middle income","DM","2006","","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","","","Yes","","","2012","2004",
-"DNK","Denmark","Denmark","Kingdom of Denmark","DK","Danish krone","","Europe & Central Asia","High income: OECD","DK","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Income tax registers (ITR), 1997","Yes","2010","2009","2012","2009",
-"DOM","Dominican Republic","Dominican Republic","Dominican Republic","DO","Dominican peso","","Latin America & Caribbean","Upper middle income","DO","1991","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","Demographic and Health Survey (DHS), 2013","Integrated household survey (IHS), 2012","","2012/13","","2012","2005",
-"DZA","Algeria","Algeria","People's Democratic Republic of Algeria","DZ","Algerian dinar","","Middle East & North Africa","Upper middle income","DZ","1980","","Value added at basic prices (VAB)","IBRD","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2008","Multiple Indicator Cluster Survey (MICS), 2012","Integrated household survey (IHS), 1995","","","","2012","2001",
-"EAP","East Asia & Pacific (developing only)","East Asia & Pacific","East Asia & Pacific (developing only)","4E","","East Asia and Pacific regional aggregate (does not include high-income economies).","","","4E","","","","","","","","","","","","","","","","","","","","","",
-"EAS","East Asia & Pacific (all income levels)","East Asia & Pacific (all income levels)","East Asia & Pacific (all income levels)","Z4","","East Asia and Pacific regional aggregate (including high-income economies).","","","Z4","","","","","","","","","","","","","","","","","","","","","",
-"ECA","Europe & Central Asia (developing only)","Europe & Central Asia","Europe & Central Asia (developing only)","7E","","Europe and Central Asia regional aggregate (does not include high-income economies).","","","7E","","","","","","","","","","","","","","","","","","","","","",
-"ECS","Europe & Central Asia (all income levels)","Europe & Central Asia (all income levels)","Europe & Central Asia (all income levels)","Z7","","Europe and Central Asia regional aggregate (including high-income economies).","","","Z7","","","","","","","","","","","","","","","","","","","","","",
-"ECU","Ecuador","Ecuador","Republic of Ecuador","EC","U.S. dollar","National accounts have been revised from 1965 onward based on official government data; the new base year is 2007. The large upward changes are due to an improved calculation method for nominal GDP.","Latin America & Caribbean","Upper middle income","EC","2007","","Value added at basic prices (VAB)","IBRD","","Country uses the 2008 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","Special Data Dissemination Standard (SDDS)","2010","Reproductive Health Survey (RHS), 2004","Integrated household survey (IHS), 2012","","2013/15","2008","2012","2005",
-"EGY","Egypt","Egypt, Arab Rep.","Arab Republic of Egypt","EG","Egyptian pound","Fiscal year end: June 30; reporting period for national accounts data: FY.","Middle East & North Africa","Lower middle income","EG","1991/92","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2006","Demographic and Health Survey (DHS), 2008","Expenditure survey/budget survey (ES/BS), 2011","Yes","2009/2010","2010","2012","2000",
-"EMU","Euro area","Euro area","Euro area","XC","","Euro area aggregate.","","","XC","","","","","","","","","","","","","","","","","","","","","",
-"ERI","Eritrea","Eritrea","State of Eritrea","ER","Eritrean nakfa","April 2013 database update: Based on IMF data, national accounts data were revised for 2000 onward; the base year changed to 2000.","Sub-Saharan Africa","Low income","ER","2000","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Estimate","","","","1984","Demographic and Health Survey (DHS), 2002","Priority survey (PS), 1993","","","2010","2003","2004",
-"ESP","Spain","Spain","Kingdom of Spain","ES","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 166.386 Spanish peseta. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","ES","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Integrated household survey (IHS), 2000","Yes","2010","2009","2012","2008",
-"EST","Estonia","Estonia","Republic of Estonia","EE","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate entered into force on January 1, 2011: 1 euro = 15.6466 Estonian kroon. Please note that historical data are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","EE","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","1987–95","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2012","World Health Survey (WHS), 2003","Expenditure survey/budget survey (ES/BS), 2004","Yes","2010","2010","2012","2007",
-"ETH","Ethiopia","Ethiopia","Federal Democratic Republic of Ethiopia","ET","Ethiopian birr","Fiscal year end: July 7; reporting period for national accounts data: FY. Based on IMF data, national accounts data have been revised for 2000 onward; the new base year is 2011.","Sub-Saharan Africa","Low income","ET","2011","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2007","Demographic and Health Survey (DHS), 2011","Expenditure survey/budget survey (ES/BS), 2010/11","","","2009","2012","2002",
-"EUU","European Union","European Union","European Union","EU","","European Union aggregate.","","","EU","","","","","","","","","","","","","","","","","","","","","",
-"FIN","Finland","Finland","Republic of Finland","FI","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 5.94573 Finnish markka. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","FI","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","","Income survey (IS), 2000","Yes","2010","2009","2012","2005",
-"FJI","Fiji","Fiji","Republic of Fiji","FJ","Fijian dollar","Based on data from the Bureau of Statistics, national accounts data on the expenditure side have been revised from 2005 onward; the new base year is 2005.","East Asia & Pacific","Upper middle income","FJ","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2007","","Expenditure survey/budget survey (ES/BS), 2009","Yes","2009","2009","2012","2000",
-"FRA","France","France","French Republic","FR","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 6.55957 French franc. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","FR","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2006. Rolling census based on continuous sample survey.","","Expenditure survey/budget survey (ES/BS), 1994/95","Yes","2010","2009","2012","2007",
-"FRO","Faeroe Islands","Faeroe Islands","Faeroe Islands","FO","Danish krone","","Europe & Central Asia","High income: nonOECD","FO","","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","","","2011","","","Yes","","","2009","",
-"FSM","Micronesia","Micronesia, Fed. Sts.","Federated States of Micronesia","FM","U.S. dollar","Fiscal year ends on September 30; reporting period for national accounts data: FY. Based on the Pacific and Virgin Islands Training Initiative, national accounts data have been revised from 2009 onward. 2013 estimates are based on the IMF Small States Monitor, Issue 1.2014. In 2010, the government statistical office revised national accounts data for 1995-2008.","East Asia & Pacific","Lower middle income","FM","2004","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","","","","","","2010","","Integrated household survey (IHS), 2000","","","","","",
-"GAB","Gabon","Gabon","Gabonese Republic","GA","CFA franc","","Sub-Saharan Africa","Upper middle income","GA","1991","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1993","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","","General Data Dissemination System (GDDS)","2013","Demographic and Health Survey (DHS), 2012","Core Welfare Indicator Questionnaire Survey (CWIQ)/Integrated household survey (IHS), 2005","","","","2009","2005",
-"GBR","United Kingdom","United Kingdom","United Kingdom of Great Britain and Northern Ireland","GB","Pound sterling","","Europe & Central Asia","High income: OECD","GB","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Income survey (IS), 1999","Yes","2010","2009","2012","2007",
-"GEO","Georgia","Georgia","Georgia","GE","Georgian lari","","Europe & Central Asia","Lower middle income","GE","Original chained constant price data are rescaled.","1996","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1990–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2002","Multiple Indicator Cluster Survey (MICS), 2005; Reproductive Health Survey (RHS), 2005","Integrated household survey (IHS), 2011","Yes","","2010","2012","2005",
-"GHA","Ghana","Ghana","Republic of Ghana","GH","New Ghanaian cedi","In 2010, the Ghana Statistical Service revised the base year for Ghana's national accounts series from 1993 to 2006. The new GDP data were about 60 percent higher than previously reported and incorporated improved data sources and methodology.","Sub-Saharan Africa","Lower middle income","GH","2006","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1973–87","2005","IMF Balance of Payments Manual, 6th edition.","Preliminary","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2011","Living Standards Measurement Study Survey (LSMS), 2005/06","","2013/ 2014","2003","2012","2000",
-"GIB","Gibraltar","Gibraltar","Gibraltar","GI","Gibraltar pound","","","","GI","","","","","","Country uses the 1968 System of National Accounts methodology.","","","","","","","","2012","","","","","","","",
-"GIN","Guinea","Guinea","Republic of Guinea","GN","Guinean franc","","Sub-Saharan Africa","Low income","GN","2003","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Estimate","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","1996","Demographic and Health Survey (DHS), 2012","Core Welfare Indicator Questionnaire Survey (CWIQ), 2012","","","","2008","2001",
-"GMB","The Gambia","Gambia, The","Republic of The Gambia","GM","Gambian dalasi","Fiscal year end: June 30; reporting period for national accounts data: CY. April 2013 database update: Based on official government statistics, national accounts data were revised for 2004 onward; the base year changed to 2004.","Sub-Saharan Africa","Low income","GM","2004","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2013","Demographic and Health Survey (DHS), 2013","Integrated household survey (IHS), 2010","","","2004","2011","2000",
-"GNB","Guinea-Bissau","Guinea-Bissau","Republic of Guinea-Bissau","GW","CFA franc","In 2010, national accounts data for 2003-09 were revised. The new data had broader coverage of all sectors of the economy, and GDP in current prices averaged 89 percent higher than previous estimates.","Sub-Saharan Africa","Low income","GW","2005","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Estimate","General trade system","","General Data Dissemination System (GDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2010","Core Welfare Indicator Questionnaire Survey (CWIQ), 2010","","","","2005","2000",
-"GNQ","Equatorial Guinea","Equatorial Guinea","Republic of Equatorial Guinea","GQ","CFA franc","National accounts have been revised from 1980 onward based on official government data; the new base year is 2006.","Sub-Saharan Africa","High income: nonOECD","GQ","2006","","Value added at basic prices (VAB)","IBRD","","Country uses the 1968 System of National Accounts methodology.","1965–84","2005","","","General trade system","Budgetary central government","","2002","Demographic and Health Survey (DHS), 2011","Priority survey (PS), 2006","","","","","2000",
-"GRC","Greece","Greece","Hellenic Republic","GR","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 340.75 Greek drachma. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","GR","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Integrated household survey (IHS), 2000","Yes","2009","2007","2012","2007",
-"GRD","Grenada","Grenada","Grenada","GD","East Caribbean dollar","April 2012 database update: Based on official government statistics, national accounts data were revised for 2000 onward; the base year changed to 2006.","Latin America & Caribbean","Upper middle income","GD","2006","","Value added at basic prices (VAB)","Blend","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Reproductive Health Survey (RHS), 1985","","Yes","2012","","2009","2005",
-"GRL","Greenland","Greenland","Greenland","GL","Danish krone","","Europe & Central Asia","High income: nonOECD","GL","1990","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","General trade system","","","2010","","","Yes","","","2012","",
-"GTM","Guatemala","Guatemala","Republic of Guatemala","GT","Guatemalan quetzal","","Latin America & Caribbean","Lower middle income","GT","2001","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Estimate","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2002","Reproductive Health Survey (RHS), 2008/09","Living Standards Measurement Study Survey (LSMS), 2011","Yes","2013","","2012","2006",
-"GUM","Guam","Guam","Guam","GU","U.S. dollar","","East Asia & Pacific","High income: nonOECD","GU","","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","General trade system","","","2010","","","Yes","2007","","","",
-"GUY","Guyana","Guyana","Co-operative Republic of Guyana","GY","Guyana dollar","In 2010, the Bureau of Statistics introduced a new series of GDP rebased to year 2006. Current price GDP averaged 63 percent higher than previous estimates.","Latin America & Caribbean","Lower middle income","GY","2006","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","","General Data Dissemination System (GDDS)","2012","Demographic and Health Survey (DHS), 2009","Integrated household survey (IHS), 1998","","","","2012","2000",
-"HIC","High income","High income","High income","XD","","High income group aggregate. High-income economies are those in which 2013 GNI per capita was $12,746 or more.","","","XD","","","","","","","","","","","","","","","","","","","","","",
-"HKG","Hong Kong SAR, China","Hong Kong SAR, China","Hong Kong Special Administrative Region of the People's Republic of China","HK","Hong Kong dollar","On 1 July 1997 China resumed its exercise of sovereignty over Hong Kong. Unless otherwise noted, data for China do not include data for Hong Kong SAR, China; Macao SAR, China; or Taiwan, China. Agriculture value added includes mining and quarrying.","East Asia & Pacific","High income: nonOECD","HK","Original chained constant price data are rescaled.","2012","Value added at basic prices (VAB)","","","Country uses the 2008 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011. The population censuses for 1986 and 1996 were based on a one-in-seven sample of the population, while that for 2006 was based on a one-in-ten sample of the population.","","","Yes","","2010","2012","",
-"HND","Honduras","Honduras","Republic of Honduras","HN","Honduran lempira","","Latin America & Caribbean","Lower middle income","HN","2000","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1988–89","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2013","Demographic and Health Survey (DHS), 2011/12","Integrated household survey (IHS), 2010","","2013","","2012","2006",
-"HPC","Heavily indebted poor countries (HIPC)","Heavily indebted poor countries (HIPC)","Heavily indebted poor countries (HIPC)","XE","","Heavily indebted poor countries aggregate.","","","XE","","","","","","","","","","","","","","","","","","","","","",
-"HRV","Croatia","Croatia","Republic of Croatia","HR","Croatian kuna","April 2013 database update: Based on official government statistics, the base year for constant price series changed to 2005.","Europe & Central Asia","High income: nonOECD","HR","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","World Health Survey (WHS), 2003","Expenditure survey/budget survey (ES/BS), 2008","Yes","2010","","2012","2010",
-"HTI","Haiti","Haiti","Republic of Haiti","HT","Haitian gourde","Fiscal year end: September 30; reporting period for national accounts data: FY. In 2010, the government revised national accounts data following changes in the methodology. Current price series since 1991 and constant price series since 1996 were revised.","Latin America & Caribbean","Low income","HT","1986/87","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","1991","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","General Data Dissemination System (GDDS)","2003","HIV/Maternal and Child Health (HIV/MCH) Service Provision Assessments (SPA), 2013","Integrated household survey (IHS), 2001","","2008/ 2009","","1997","2000",
-"HUN","Hungary","Hungary","Hungary","HU","Hungarian forint","April 2012 database update: Based on data from the Organisation for Economic Co-operation and Development, national accounts data were revised for 1991 onward.","Europe & Central Asia","Upper middle income","HU","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","World Health Survey (WHS), 2003","Expenditure survey/budget survey (ES/BS), 2007","Yes","2010","2009","2012","2007",
-"IDN","Indonesia","Indonesia","Republic of Indonesia","ID","Indonesian rupiah","Fiscal year end: March 31; reporting period for national accounts data: CY. Data for Indonesia include Timor-Leste through 1999 unless otherwise noted.","East Asia & Pacific","Lower middle income","ID","2000","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","Special Data Dissemination Standard (SDDS)","2010","Demographic and Health Survey (DHS), 2012","Integrated household survey (IHS), 2013","","2013","2009","2012","2000",
-"IMN","Isle of Man","Isle of Man","Isle of Man","IM","Pound sterling","","Europe & Central Asia","High income: nonOECD","IM","2003","","","","","Country uses the 1968 System of National Accounts methodology.","","","","","","","","2011","","","Yes","","","","",
-"IND","India","India","Republic of India","IN","Indian rupee","Fiscal year end: March 31; reporting period for national accounts data: FY. April 2013 database update: The India Central Statistical Office revised historical data series both current and constant going back to 1960 with 2004–05 as the base.","South Asia","Lower middle income","IN","2004/05","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Demographic and Health Survey (DHS), 2005/06","Integrated household survey (IHS), 2012","","2011","2009","2012","2010",
-"IRL","Ireland","Ireland","Ireland","IE","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 0.787564 Irish pound. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","IE","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Integrated household survey (IHS), 2000","Yes","2010","2009","2012","1979",
-"IRN","Iran","Iran, Islamic Rep.","Islamic Republic of Iran","IR","Iranian rial","Fiscal year end: March 20; reporting period for national accounts data: FY.","Middle East & North Africa","Upper middle income","IR","1997/98","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1980–2002","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 2000","Expenditure survey/budget survey (ES/BS), 2005","Yes","2013","2009","2011","2004",
-"IRQ","Iraq","Iraq","Republic of Iraq","IQ","Iraqi dinar","National accounts have been revised from 2000 onward based on official government data; the new base year is 1988. The new series raises GDP significantly from previous estimates.","Middle East & North Africa","Upper middle income","IQ","1988","","Value added at producer prices (VAP)","IBRD","","Country uses the 1968 System of National Accounts methodology.","1997, 2004","2005","IMF Balance of Payments Manual, 6th edition.","","","","General Data Dissemination System (GDDS)","1997","Multiple Indicator Cluster Survey (MICS), 2011","Integrated household survey (IHS), 2007","","2011/2012","","","2000",
-"ISL","Iceland","Iceland","Republic of Iceland","IS","Iceland krona","","Europe & Central Asia","High income: OECD","IS","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","","Yes","2010","2005","2012","2005",
-"ISR","Israel","Israel","State of Israel","IL","Israeli new shekel","","Middle East & North Africa","High income: OECD","IL","2005","","Value added at producer prices (VAP)","","","Country uses the 1993 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2009","","Expenditure survey/budget survey (ES/BS), 2001","Yes","","2009","2012","2004",
-"ITA","Italy","Italy","Italian Republic","IT","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 1936.27 Italian lira. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","IT","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2012","","Expenditure survey/budget survey (ES/BS), 2000","Yes","2010","2009","2012","2000",
-"JAM","Jamaica","Jamaica","Jamaica","JM","Jamaican dollar","April 2013 database update: Based on official government statistics, national accounts data were revised for 2002 onward; the base year changed to 2007.","Latin America & Caribbean","Upper middle income","JM","2007","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2011","Living Standards Measurement Study Survey (LSMS), 2010","","2007","","2012","1993",
-"JOR","Jordan","Jordan","Hashemite Kingdom of Jordan","JO","Jordanian dinar","","Middle East & North Africa","Upper middle income","JO","1994","","Value added at basic prices (VAB)","IBRD","","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","Special Data Dissemination Standard (SDDS)","2004","Demographic and Health Survey (DHS), 2012","Expenditure survey/budget survey (ES/BS), 2010","","2007","2010","2012","2005",
-"JPN","Japan","Japan","Japan","JP","Japanese yen","Fiscal year end: March 31; reporting period for national accounts data: CY.","East Asia & Pacific","High income: OECD","JP","2005","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","","Income survey (IS), 1993","Yes","2010","2010","2012","2001",
-"KAZ","Kazakhstan","Kazakhstan","Republic of Kazakhstan","KZ","Kazakh tenge","","Europe & Central Asia","Upper middle income","KZ","Original chained constant price data are rescaled.","2000","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1987–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2010/11","Expenditure survey/budget survey (ES/BS), 2012","Yes","","","2012","2010",
-"KEN","Kenya","Kenya","Republic of Kenya","KE","Kenyan shilling","Fiscal year end: June 30; reporting period for national accounts data: CY.","Sub-Saharan Africa","Low income","KE","2001","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2009","Malaria Indicator Survey (MIS), 2010; HIV/Maternal and Child Health (HIV/MCH) Service Provision Assessments (SPA), 2010","Integrated household survey (IHS), 2005/06","","2009. Population and Housing Census.","2010","2010","2003",
-"KGZ","Kyrgyz Republic","Kyrgyz Republic","Kyrgyz Republic","KG","Kyrgyz som","","Europe & Central Asia","Lower middle income","KG","Original chained constant price data are rescaled.","1995","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1990–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","Special Data Dissemination Standard (SDDS)","2009","Demographic and Health Survey (DHS), 2012","Expenditure survey/budget survey (ES/BS), 2012","Yes","2014","2010","2012","2006",
-"KHM","Cambodia","Cambodia","Kingdom of Cambodia","KH","Cambodian riel","","East Asia & Pacific","Low income","KH","2000","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2008","Demographic and Health Survey (DHS), 2010","Integrated household survey (IHS), 2011","","2013","2000","2012","2006",
-"KIR","Kiribati","Kiribati","Republic of Kiribati","KI","Australian dollar","Based on IMF and World Bank data, GDP in current and constant prices have been revised from 2000 onward. Value added components are calculated using shares from the Asian Development Bank.","East Asia & Pacific","Lower middle income","KI","2006","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","","","","","","2012","",
-"KNA","St. Kitts and Nevis","St. Kitts and Nevis","St. Kitts and Nevis","KN","East Caribbean dollar","April 2012 database update: Based on official government statistics, national accounts data were revised for 2000 onward; the base year changed to 2006.","Latin America & Caribbean","High income: nonOECD","KN","2006","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","","","Yes","","","2011","",
-"KOR","Korea","Korea, Rep.","Republic of Korea","KR","Korean won","New base year is 2010. GDP data are available from 1970 onward while components are revised from 2000 onward only. Historical data in constant prices are linked to preserve growth rates.","East Asia & Pacific","High income: OECD","KR","2010","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","","Expenditure survey/budget survey (ES/BS), 1998","Yes","2010","2008","2012","2002",
-"KWT","Kuwait","Kuwait","State of Kuwait","KW","Kuwaiti dinar","Fiscal year end: June 30; reporting period for national accounts data: CY.","Middle East & North Africa","High income: nonOECD","KW","1995","","Value added at producer prices (VAP)","","","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Family Health Survey (FHS), 1996","","Yes","","2010","2009","2002",
-"LAC","Latin America & Caribbean (developing only)","Latin America & Caribbean","Latin America & Caribbean (developing only)","XJ","","Latin America and Caribbean regional aggregate (does not include high-income economies).","","","XJ","","","","","","","","","","","","","","","","","","","","","",
-"LAO","Lao PDR","Lao PDR","Lao People's Democratic Republic","LA","Lao kip","","East Asia & Pacific","Lower middle income","LA","2002","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Preliminary","Special trade system","Budgetary central government","","2005","Multiple Indicator Cluster Survey (MICS), 2011/12","Expenditure survey/budget survey (ES/BS), 2008","","2010/11","","","2005",
-"LBN","Lebanon","Lebanon","Lebanese Republic","LB","Lebanese pound","","Middle East & North Africa","Upper middle income","LB","1997","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","1970","Multiple Indicator Cluster Survey (MICS), 2000","","Yes","2011","2007","2012","2005",
-"LBR","Liberia","Liberia","Republic of Liberia","LR","Liberian dollar","April 2013 database update: Based on IMF data, national accounts data were revised for 2000 onward; the base year changed to 2000.","Sub-Saharan Africa","Low income","LR","2000","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2008","Demographic and Health Survey (DHS), 2013","Core Welfare Indicator Questionnaire Survey (CWIQ), 2007","","2008. Population and Housing Census.","","","2000",
-"LBY","Libya","Libya","Socialist People's Libyan Arab Jamahiriya","LY","Libyan dinar","National accounts data are revised from 2010 to 2013 based on IMF and World Bank staff estimates.","Middle East & North Africa","Upper middle income","LY","1999","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1986","","IMF Balance of Payments Manual, 6th edition.","","General trade system","","General Data Dissemination System (GDDS)","2006","","","","2013/2014","","2010","2000",
-"LCA","St. Lucia","St. Lucia","St. Lucia","LC","East Caribbean dollar","April 2012 database update: Based on official government statistics, national accounts data were revised for 2000 onward; the base year changed to 2006.","Latin America & Caribbean","Upper middle income","LC","2006","","Value added at basic prices (VAB)","Blend","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2012","Integrated household survey (IHS), 1995","Yes","2007","","2008","2005",
-"LCN","Latin America & Caribbean (all income levels)","Latin America & Caribbean (all income levels)","Latin America & Caribbean (all income levels)","ZJ","","Latin America and Caribbean regional aggregate (including high-income economies).","","","ZJ","","","","","","","","","","","","","","","","","","","","","",
-"LDC","Least developed countries: UN classification","Least developed countries: UN classification","Least developed countries: UN classification","XL","","Least developed countries (UN classification) aggregate.","","","XL","","","","","","","","","","","","","","","","","","","","","",
-"LIC","Low income","Low income","Low income","XM","","Low income group aggregate. Low-income economies are those in which 2013 GNI per capita was $1,045 or less.","","","XM","","","","","","","","","","","","","","","","","","","","","",
-"LIE","Liechtenstein","Liechtenstein","Principality of Liechtenstein","LI","Swiss franc","","Europe & Central Asia","High income: nonOECD","LI","1990","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","","","Special trade system","","","2010","","","Yes","","","","",
-"LKA","Sri Lanka","Sri Lanka","Democratic Socialist Republic of Sri Lanka","LK","Sri Lankan rupee","","South Asia","Lower middle income","LK","2002","","Value added at producer prices (VAP)","Blend","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2012","Demographic and Health Survey (DHS), 2006/07","Expenditure survey/budget survey (ES/BS), 2010","Yes","2013/ 2014","2010","2012","2005",
-"LMC","Lower middle income","Lower middle income","Lower middle income","XN","","Lower middle income group aggregate. Lower-middle-income economies are those in which 2013 GNI per capita was between $1,046 and $4,125.","","","XN","","","","","","","","","","","","","","","","","","","","","",
-"LMY","Low & middle income","Low & middle income","Low & middle income","XO","","Low and middle income group aggregate (all developing economies). Low- and middle-income economies are those in which 2013 GNI per capita was $12,745 or less.","","","XO","","","","","","","","","","","","","","","","","","","","","",
-"LSO","Lesotho","Lesotho","Kingdom of Lesotho","LS","Lesotho loti","Fiscal year end: March 31; reporting period for national accounts data: CY.","Sub-Saharan Africa","Lower middle income","LS","2004","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2006","Demographic and Health Survey (DHS), 2009","Expenditure survey/budget survey (ES/BS), 2002/03","","2010","","2009","2000",
-"LTU","Lithuania","Lithuania","Republic of Lithuania","LT","Lithuanian litas","","Europe & Central Asia","High income: nonOECD","LT","2000","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","1990–95","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Expenditure survey/budget survey (ES/BS), 2008","Yes","2010","2010","2012","2007",
-"LUX","Luxembourg","Luxembourg","Grand Duchy of Luxembourg","LU","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 40.3399 Luxembourg franc. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","LU","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","","Yes","2010","2009","2012","1999",
-"LVA","Latvia","Latvia","Republic of Latvia","LV","Latvian lats","Country joined euro area on 1 January 2014; data in the WDI database are reported in lats.","Europe & Central Asia","High income: nonOECD","LV","2000","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","1987–95","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","World Health Survey (WHS), 2003","Integrated household survey (IHS), 2008","Yes","2010","2010","2012","2002",
-"MAC","Macao SAR, China","Macao SAR, China","Macao Special Administrative Region of the People's Republic of China","MO","Macao pataca","On 20 December 1999 China resumed its exercise of sovereignty over Macao. Unless otherwise noted, data for China do not include data for Hong Kong SAR, China; Macao SAR, China; or Taiwan, China.","East Asia & Pacific","High income: nonOECD","MO","2012","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","","","Yes","","2010","2012","",
-"MAF","St. Martin (French part)","St. Martin (French part)","St. Martin (French part)","MF","Euro","","Latin America & Caribbean","High income: nonOECD","MF","","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","","","","","","","","","","","",
-"MAR","Morocco","Morocco","Kingdom of Morocco","MA","Moroccan dirham","","Middle East & North Africa","Lower middle income","MA","1998","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2004","Multiple Indicator Cluster Survey (MICS)/Pan Arab Project for Family Health (PAPFAM), 2006","Expenditure survey/budget survey (ES/BS), 2007","","2012","2010","2012","2000",
-"MCO","Monaco","Monaco","Principality of Monaco","MC","Euro","","Europe & Central Asia","High income: nonOECD","MC","1990","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","Special trade system","","","2008","","","Yes","","","","2009",
-"MDA","Moldova","Moldova","Republic of Moldova","MD","Moldovan leu","","Europe & Central Asia","Lower middle income","MD","Original chained constant price data are rescaled.","1996","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","1990–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2004","Multiple Indicator Cluster Survey (MICS), 2012","Expenditure survey/budget survey (ES/BS), 2012","Yes","2011","2010","2012","2007",
-"MDG","Madagascar","Madagascar","Republic of Madagascar","MG","Malagasy ariary","","Sub-Saharan Africa","Low income","MG","1984","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","1993","Malaria Indicator Survey (MIS), 2013","Priority survey (PS), 2010","","","2006","2012","2000",
-"MDV","Maldives","Maldives","Republic of Maldives","MV","Maldivian rufiyaa","April 2012 database update: The Department of National Planning revised national accounts data for 2000 onward; the base year changed to 2003.","South Asia","Upper middle income","MV","2003","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2006","Demographic and Health Survey (DHS), 2009","Integrated household survey (IHS), 2010","Yes","","","2012","2008",
-"MEA","Middle East & North Africa (all income levels)","Middle East & North Africa (all income levels)","Middle East & North Africa (all income levels)","ZQ","","Middle East and North Africa regional aggregate (including high-income economies).","","","ZQ","","","","","","","","","","","","","","","","","","","","","",
-"MEX","Mexico","Mexico","United Mexican States","MX","Mexican peso","The new base year is 2008.","Latin America & Caribbean","Upper middle income","MX","2008","","Value added at basic prices (VAB)","IBRD","","Country uses the 2008 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","National Survey of Demographic Dynamics (ENADID), 2009","Integrated household survey (IHS), 2012","","2007","2010","2012","2009",
-"MHL","Marshall Islands","Marshall Islands","Republic of the Marshall Islands","MH","U.S. dollar","Fiscal year ends on September 30; reporting period for national accounts data: FY.","East Asia & Pacific","Upper middle income","MH","2004","","Value added at basic prices (VAB)","IDA","","Country uses the 1968 System of National Accounts methodology.","","","","","General trade system","","","2011","","","","2011. Population and Housing Census.","","","",
-"MIC","Middle income","Middle income","Middle income","XP","","Middle income group aggregate. Middle-income economies are those in which 2013 GNI per capita was between $1,046 and $12,745.","","","XP","","","","","","","","","","","","","","","","","","","","","",
-"MKD","Macedonia","Macedonia, FYR","Former Yugoslav Republic of Macedonia","MK","Macedonian denar","April 2012 database update: Based on official statistics, national accounts data were revised for 2003 onward.","Europe & Central Asia","Upper middle income","MK","1995","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2002","Multiple Indicator Cluster Survey (MICS), 2011","Expenditure survey/budget survey (ES/BS), 2009","Yes","2007","2010","2012","2007",
-"MLI","Mali","Mali","Republic of Mali","ML","CFA franc","","Sub-Saharan Africa","Low income","ML","1987","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2009","Demographic and Health Survey (DHS), 2012/13","Integrated household survey (IHS), 2009/10","","","","2012","2000",
-"MLT","Malta","Malta","Republic of Malta","MT","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate entered into force on January 1, 2008: 1 euro = 0.4293 Maltese lira. Please note that historical data are not actual euros and are not comparable or suitable for aggregation across countries.","Middle East & North Africa","High income: nonOECD","MT","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","","Yes","2010","2008","2012","2002",
-"MMR","Myanmar","Myanmar","Republic of the Union of Myanmar","MM","Myanmar kyat","Fiscal year end: March 31; reporting period for national accounts data: FY.","East Asia & Pacific","Low income","MM","2005/06","","Value added at producer prices (VAP)","IDA","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Estimate","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","1983","Multiple Indicator Cluster Survey (MICS), 2009/10","","","2010","2003","2010","2000",
-"MNA","Middle East & North Africa (developing only)","Middle East & North Africa","Middle East & North Africa (developing only)","XQ","","Middle East and North Africa regional aggregate (does not include high-income economies).","","","XQ","","","","","","","","","","","","","","","","","","","","","",
-"MNE","Montenegro","Montenegro","Montenegro","ME","Euro","Montenegro declared independence from Serbia and Montenegro on June 3, 2006. Where available, data for each country are shown separately. However, for Serbia, some indicators continue to include data for Montenegro through 2005.","Europe & Central Asia","Upper middle income","ME","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","","General Data Dissemination System (GDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2005/06","Expenditure survey/budget survey (ES/BS), 2011","Yes","2010","","2012","2010",
-"MNG","Mongolia","Mongolia","Mongolia","MN","Mongolian tugrik","","East Asia & Pacific","Lower middle income","MN","2005","","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2010","Living Standards Measurement Study Survey (LSMS), 2012","Yes","2012","2008","2007","2009",
-"MNP","Northern Mariana Islands","Northern Mariana Islands","Commonwealth of the Northern Mariana Islands","MP","U.S. dollar","","East Asia & Pacific","High income: nonOECD","MP","","","","","","Country uses the 1968 System of National Accounts methodology.","","","","","","","","2010","","","","2007","","","",
-"MOZ","Mozambique","Mozambique","Republic of Mozambique","MZ","New Mozambican metical","","Sub-Saharan Africa","Low income","MZ","2003","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1992–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2007","Demographic and Health Survey (DHS), 2011","Expenditure survey/budget survey (ES/BS), 2008/09","","2009/ 2010","","2012","2001",
-"MRT","Mauritania","Mauritania","Islamic Republic of Mauritania","MR","Mauritanian ouguiya","April 2012 database update: Based on official government statistics, data were revised for 1991 onward; the base year for constant price series changed to 2004.","Sub-Saharan Africa","Lower middle income","MR","2004","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","","General Data Dissemination System (GDDS)","2013","Multiple Indicator Cluster Survey (MICS), 2011","Integrated household survey (IHS), 2008","","","","2012","2005",
-"MUS","Mauritius","Mauritius","Republic of Mauritius","MU","Mauritian rupee","","Sub-Saharan Africa","Upper middle income","MU","2006","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","Special Data Dissemination Standard (SDDS)","2011","Reproductive Health Survey (RHS), 1991","","Yes","2013/ 2014","2010","2012","2003",
-"MWI","Malawi","Malawi","Republic of Malawi","MW","Malawi kwacha","Fiscal year end: March 31; reporting period for national accounts data: CY. Based on IMF data, national accounts data have been revised for 2000 onward; the new base year is 2009.","Sub-Saharan Africa","Low income","MW","2009","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","General Data Dissemination System (GDDS)","2008","HIV/Maternal and Child Health (HIV/MCH) Service Provision Assessments (SPA), 2013","Integrated household survey (IHS), 2010/11","","2006/ 2007","2009","2011","2005",
-"MYS","Malaysia","Malaysia","Malaysia","MY","Malaysian ringgit","Based on official government statistics, value added in services in constant and current prices have been revised from 1990 onward. National accounts data in constant prices have been linked back to 1960; the new base year is 2005.","East Asia & Pacific","Upper middle income","MY","2005","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Estimate","General trade system","Budgetary central government","Special Data Dissemination Standard (SDDS)","2010","World Health Survey (WHS), 2003","Expenditure survey/budget survey (ES/BS), 2012","Yes","2015","2010","2012","2005",
-"NAC","North America","North America","North America","XU","","North America regional aggregate. There are no economies in North America classified as low or middle income.","","","XU","","","","","","","","","","","","","","","","","","","","","",
-"NAM","Namibia","Namibia","Republic of Namibia","NA","Namibian dollar","Fiscal year end: March 31; reporting period for national accounts data: CY. Based on official government statistics, national accounts data have been revised from 1980 onward; the new base year is 2010.","Sub-Saharan Africa","Upper middle income","NA","2010","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 2013","Expenditure survey/budget survey (ES/BS), 2009/10","","2014","","2012","2002",
-"NCL","New Caledonia","New Caledonia","New Caledonia","NC","CFP franc","","East Asia & Pacific","High income: nonOECD","NC","1990","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","Special trade system","","","2009","","","Yes","","","2012","",
-"NER","Niger","Niger","Republic of Niger","NE","CFA franc","Based on official government statistics, national accounts data have been revised from 2006 onward; the new base year is 2006.","Sub-Saharan Africa","Low income","NE","2006","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1993","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2012","Demographic and Health Survey (DHS), 2012","Core Welfare Indicator Questionnaire Survey (CWIQ)/Priority survey (PS), 2007","","2004-2008","2002","2012","2005",
-"NGA","Nigeria","Nigeria","Federal Republic of Nigeria","NG","Nigerian naira","Based on official government statistics released 6 April, 2014, national accounts data have been revised from 2010 onward; the new base year is 2010. The new GDP data are 60 to 75 percent higher than previously reported and incorporate improved data sources and methodology.","Sub-Saharan Africa","Lower middle income","NG","2010","","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","1971–98","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2006","Demographic and Health Survey (DHS), 2013","Integrated household survey (IHS), 2010","","2013","","2012","2005",
-"NIC","Nicaragua","Nicaragua","Republic of Nicaragua","NI","Nicaraguan gold cordoba","April 2013 database update: Based on official government statistics, national accounts data were revised for 1994 onward; the base year changed to 2006.","Latin America & Caribbean","Lower middle income","NI","2006","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1965–95","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2005","Reproductive Health Survey (RHS), 2006/2007","Living Standards Measurement Study Survey (LSMS), 2009","","2011","","2012","2001",
-"NLD","Netherlands","Netherlands","Kingdom of the Netherlands","NL","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 2.20371 Netherlands guilder. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","NL","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Integrated household survey (IHS), 1999","Yes","2010","2008","2012","2008",
-"NOR","Norway","Norway","Kingdom of Norway","NO","Norwegian krone","","Europe & Central Asia","High income: OECD","NO","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Income survey (IS), 2000","Yes","2010","2008","2012","2006",
-"NPL","Nepal","Nepal","Nepal","NP","Nepalese rupee","Fiscal year end: July 14; reporting period for national accounts data: FY.","South Asia","Low income","NP","2000/01","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 2011","Living Standards Measurement Study Survey (LSMS), 2011","","2011/ 2012","2008","2011","2006",
-"NRU","Nauru","Nauru","Nauru","NR","","","","","NR","","","","","","","","","","","","","","","","","","","","","",
-"NZL","New Zealand","New Zealand","New Zealand","NZ","New Zealand dollar","Fiscal year end: March 31; reporting period for national accounts data: FY.","East Asia & Pacific","High income: OECD","NZ","2005/06","","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","","2013","","Income survey (IS), 1997","Yes","2012","2009","2012","2002",
-"OED","OECD members","OECD members","OECD members","OE","","OECD members aggregate (all, including developing countries).","","","OE","","","","","","","","","","","","","","","","","","","","","",
-"OMN","Oman","Oman","Sultanate of Oman","OM","Rial Omani","","Middle East & North Africa","High income: nonOECD","OM","1988","","Value added at producer prices (VAP)","","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2012","","","2012/ 2013","2010","2012","2003",
-"PAK","Pakistan","Pakistan","Islamic Republic of Pakistan","PK","Pakistani rupee","Fiscal year end: June 30; reporting period for national accounts data: FY. The new base year is 2005/06.","South Asia","Lower middle income","PK","2005/2006","","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","1998","Demographic and Health Survey (DHS), 2012/13","Integrated household survey (IHS), 2008","","2010","2006","2012","2008",
-"PAN","Panama","Panama","Republic of Panama","PA","Panamanian balboa","","Latin America & Caribbean","Upper middle income","PA","2007","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","Living Standards Measurement Study Survey (LSMS), 2008","Integrated household survey (IHS), 2011","","2011","2001","2011","2000",
-"PER","Peru","Peru","Republic of Peru","PE","Peruvian new sol","","Latin America & Caribbean","Upper middle income","PE","2007","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1985–90","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2007","Continuous Demographic and Health Survey (DHS), 2013","Integrated household survey (IHS), 2012","","2012","2010","2012","2000",
-"PHL","Philippines","Philippines","Republic of the Philippines","PH","Philippine peso","Source for GNI and net income from abroad is changed to national statistical office from central bank. April 2012 database update: National accounts data were revised for 1998 onward. Because intellectual property products are now reported as a part of gross fixed capital formation, gross domestic product (GDP) in current prices averaged 4 percent higher than previous estimates.","East Asia & Pacific","Lower middle income","PH","2000","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","Special Data Dissemination Standard (SDDS)","2010","Demographic and Health Survey (DHS), 2013","Expenditure survey/budget survey (ES/BS), 2012","Yes","2012","2008","2012","2009",
-"PLW","Palau","Palau","Republic of Palau","PW","U.S. dollar","Fiscal year ends on September 30; reporting period for national accounts data: FY. National accounts data are revised based on IMF reports.","East Asia & Pacific","Upper middle income","PW","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","","","Special trade system","","General Data Dissemination System (GDDS)","2010","","","Yes","","","2012","",
-"PNG","Papua New Guinea","Papua New Guinea","The Independent State of Papua New Guinea","PG","Papua New Guinea kina","","East Asia & Pacific","Lower middle income","PG","1998","","Value added at producer prices (VAP)","Blend","","Country uses the 1993 System of National Accounts methodology.","1989","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Living Standards Measurement Study Survey (LSMS), 1996","Integrated household survey (IHS), 2009/10","","","","2012","2005",
-"POL","Poland","Poland","Republic of Poland","PL","Polish zloty","","Europe & Central Asia","High income: OECD","PL","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Expenditure survey/budget survey (ES/BS), 2010","Yes","2010","2009","2012","2009",
-"PRI","Puerto Rico","Puerto Rico","Puerto Rico","PR","U.S. dollar","Fiscal year end: June 30; reporting period for national accounts data: FY. April 2012 database update: Based on data from the Instituto de Estadísticas de Puerto Rico, national accounts data were revised for 2001 onward.","Latin America & Caribbean","High income: nonOECD","PR","1954","","Value added at producer prices (VAP)","","","Country uses the 1968 System of National Accounts methodology.","","","","","General trade system","","","2010","Reproductive Health Survey (RHS), 1995/96","","Yes","2007","2006","","2005",
-"PRK","Dem. People's Rep. Korea","Korea, Dem. Rep.","Democratic People's Republic of Korea","KP","Democratic People's Republic of Korean won","","East Asia & Pacific","Low income","KP","","","","","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","","","","2008","Multiple Indicator Cluster Survey (MICS), 2009","","","","","","2005",
-"PRT","Portugal","Portugal","Portuguese Republic","PT","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate was adopted by the EU Council on January 1, 1999: 1 euro = 200.482 Portuguese escudo. Please note that historical data before 1999 are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","PT","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Income survey (IS), 1997","Yes","2009","2009","2012","2002",
-"PRY","Paraguay","Paraguay","Republic of Paraguay","PY","Paraguayan guarani","National accounts data have been revised from 1960 onward. The methodology and base year have not changed but the output of two hydroelectric plants (shared with neighboring countries) has been added raising GDP from previous estimates. On the supply side, it was added in ""gas, electricity and water."" On the demand side changes were mainly to exports, but also for imports, investment and consumption. National accounts price valuations for 1991 to 2012 have also been corrected and changed from VAP to VAB.","Latin America & Caribbean","Lower middle income","PY","1994","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2012","Reproductive Health Survey (RHS), 2008","Integrated household survey (IHS), 2011","","2008","2002","2012","2000",
-"PSE","West Bank and Gaza","West Bank and Gaza","West Bank and Gaza","PS","Israeli new shekel","","Middle East & North Africa","Lower middle income","GZ","2004","","Value added at basic prices (VAB)","","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Budgetary central government","Special Data Dissemination Standard (SDDS)","2007","Multiple Indicator Cluster Survey (MICS), 2010","Integrated household survey (IHS), 2009","","","2010","","2005",
-"PYF","French Polynesia","French Polynesia","French Polynesia","PF","CFP franc","","East Asia & Pacific","High income: nonOECD","PF","1990/91","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","Special trade system","","","2007","","","Yes","","","2012","",
-"QAT","Qatar","Qatar","State of Qatar","QA","Qatari riyal","","Middle East & North Africa","High income: nonOECD","QA","2001","","Value added at producer prices (VAP)","","","Country uses the 1993 System of National Accounts methodology.","","2005","","","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2012","","Yes","","2010","2012","2005",
-"ROU","Romania","Romania","Romania","RO","New Romanian leu","National accounts have been revised based on data from the National Statistical Institute; the new base year is 2000.","Europe & Central Asia","Upper middle income","RO","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1987–89, 1992","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Reproductive Health Survey (RHS), 1999","Labor force survey (LFS), 2010","Yes","2010","2010","2012","2009",
-"RUS","Russia","Russian Federation","Russian Federation","RU","Russian ruble","","Europe & Central Asia","High income: nonOECD","RU","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1987–95","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","World Health Survey (WHS), 2003","Integrated household survey (IHS), 2012","Yes","2014","2010","2012","2001",
-"RWA","Rwanda","Rwanda","Republic of Rwanda","RW","Rwandan franc","Based on official government statistics, national accounts data are revised for 2006 onward; the new base year is 2011.","Sub-Saharan Africa","Low income","RW","2011","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","1994","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2012","Malaria Indicator Survey (MIS), 2013","Integrated household survey (IHS), 2011","","2008","","2012","2000",
-"SAS","South Asia","South Asia","South Asia","8S","","South Asia regional aggregate. There are no economies in South Asia classified as high income.","","","8S","","","","","","","","","","","","","","","","","","","","","",
-"SAU","Saudi Arabia","Saudi Arabia","Kingdom of Saudi Arabia","SA","Saudi Arabian riyal","","Middle East & North Africa","High income: nonOECD","SA","1999","","Value added at producer prices (VAP)","","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","Special trade system","","General Data Dissemination System (GDDS)","2010","Demographic survey, 2007","","","2010","2006","2011","2006",
-"SDN","Sudan","Sudan","Republic of the Sudan","SD","Sudanese pound","Total population data are reported separately for Sudan and South Sudan; see specific notes for other demographic-related series. National accounts data exclude South Sudan after July 9, 2011. Other data reported for Sudan include South Sudan unless otherwise noted.","Sub-Saharan Africa","Lower middle income","SD","1981/82. Reporting period switch from fiscal year to calendar year from 1996. Pre-1996 data converted to calendar year.","1996","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2008","Sudan Household Health Survey (SHHS), 2010","Expenditure survey/budget survey (ES/BS), 2009","","2013/ 2014","2001","2011","2005. Includes South Sudan.",
-"SEN","Senegal","Senegal","Republic of Senegal","SN","CFA franc","","Sub-Saharan Africa","Lower middle income","SN","1999","1987","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2013","Continuous Demographic and Health Survey (DHS), 2013/14; HIV/Maternal and Child Health (HIV/MCH) Service Provision Assessments (SPA), 2013/14","Priority survey (PS), 2010/11","","2013","2010","2012","2002",
-"SGP","Singapore","Singapore","Republic of Singapore","SG","Singapore dollar","Fiscal year end: March 31; reporting period for national accounts data: CY. Country reports using a blend of SNA 1993 and SNA 2008. April 2012 database update: National accounts time series were replaced with official government statistics.","East Asia & Pacific","High income: nonOECD","SG","2010","","Value added at basic prices (VAB)","","","Country uses the 2008 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","National Health Survey (NHS), 2010","","Yes","","2010","2012","1975",
-"SLB","Solomon Islands","Solomon Islands","Solomon Islands","SB","Solomon Islands dollar","National accounts data have been revised from 2007 to 2013 based on IMF reports.","East Asia & Pacific","Lower middle income","SB","2004","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","","General Data Dissemination System (GDDS)","2009","","Integrated household survey (IHS), 2005/06","","2012/13","","2012","",
-"SLE","Sierra Leone","Sierra Leone","Republic of Sierra Leone","SL","Sierra Leonean leone","Fiscal year end: June 30; reporting period for national accounts data: CY. April 2013 database update: Based on official government statistics, national accounts data were revised for 1990 onward; the base year changed to 2006.","Sub-Saharan Africa","Low income","SL","2006","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2004","Demographic and Health Survey (DHS), 2013; Malaria Indicator Survey (MIS), 2013","Integrated household survey (IHS), 2011","","","","2002","2005",
-"SLV","El Salvador","El Salvador","Republic of El Salvador","SV","U.S. dollar","","Latin America & Caribbean","Lower middle income","SV","1990","","Value added at basic prices (VAB)","IBRD","","Country uses the 1968 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2007","Reproductive Health Survey (RHS), 2008","Integrated household survey (IHS), 2012","Yes","2007/2008","","2012","2007",
-"SMR","San Marino","San Marino","Republic of San Marino","SM","Euro","","Europe & Central Asia","High income: nonOECD","SM","1990","2000","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","","","","","Consolidated central government","General Data Dissemination System (GDDS)","2010","","","Yes","","","","",
-"SOM","Somalia","Somalia","Somali Democratic Republic","SO","Somali shilling","","Sub-Saharan Africa","Low income","SO","1985","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","1977–90","","","Estimate","","","","1987","Multiple Indicator Cluster Survey (MICS), 2006","","","","","","2003",
-"SRB","Serbia","Serbia","Republic of Serbia","RS","New Serbian dinar","Montenegro declared independence from Serbia and Montenegro on June 3, 2006. Where available, data for each country are shown separately. However, for Serbia, some indicators, such as those series for which data appear only for Serbia and not Montenegro--e.g., aid, environment, external debt, balance of payments, various social indicators excluding population--continue to include data for Montenegro through 2005. Moreover, data from 1999 onward for Serbia for most indicators exclude data for Kosovo, 1999 being the year when Kosovo became a territory under international administration pursuant to UN Security Council Resolution 1244 (1999); any exceptions are noted. Kosovo became a World Bank member on June 29, 2009; available data are shown separately for Kosovo. In 2011, the Statistical Office of Serbia improved the methodology of national accounts data for 2003 onward. Specifically, the classification of sectors was revised, and GDP is now calculated using chain linked volumes in 2005 prices.","Europe & Central Asia","Upper middle income","YF","Original chained constant price data are rescaled.","2002","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2010","Integrated household survey (IHS), 2010","Yes","2012","2010","","2009",
-"SSA","Sub-Saharan Africa (developing only)","Sub-Saharan Africa","Sub-Saharan Africa (developing only)","ZF","","Sub-Saharan Africa regional aggregate (does not include high-income economies).","","","ZF","","","","","","","","","","","","","","","","","","","","","",
-"SSD","South Sudan","South Sudan","Republic of South Sudan","SS","South Sudanese Pound","South Sudan declared its independence on July 9, 2011. Data are shown separately for South Sudan where available. However, data reported for Sudan include South Sudan unless otherwise noted. Though limited data are available in the WDI database for South Sudan, additional data are available from South Sudan's National Bureau of Statistics (http://ssnbs.org/).","Sub-Saharan Africa","Lower middle income","SS","2009","","","IDA","","Country uses the 1993 System of National Accounts methodology.","","","","","","","","2008","","Expenditure survey/budget survey (ES/BS), 2009","","","","","",
-"SSF","Sub-Saharan Africa (all income levels)","Sub-Saharan Africa (all income levels)","Sub-Saharan Africa (all income levels)","ZG","","Sub-Saharan Africa regional aggregate (including high-income economies).","","","ZG","","","","","","","","","","","","","","","","","","","","","",
-"STP","São Tomé and Principe","São Tomé and Principe","Democratic Republic of São Tomé and Principe","ST","São Tomé and Principe dobra","Based on IMF data, national accounts data have been revised for 2000 onward; the new base year is 2000.","Sub-Saharan Africa","Lower middle income","ST","2000","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2012","Demographic and Health Survey (DHS), 2008/09","Priority survey (PS), 2009/10","","2011/12","","2012","1993",
-"SUR","Suriname","Suriname","Republic of Suriname","SR","Suriname dollar","","Latin America & Caribbean","Upper middle income","SR","2007","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2012","Multiple Indicator Cluster Survey (MICS), 2010","Expenditure survey/budget survey (ES/BS), 1999","Yes","2008","","2011","2000",
-"SVK","Slovak Republic","Slovak Republic","Slovak Republic","SK","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate entered into force on January 1, 2009: 1 euro = 30.126 Slovak koruna. Please note that historical data are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","SK","2005","","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","World Health Survey (WHS), 2003","Income survey (IS), 2009","Yes","2010","2009","2012","2007",
-"SVN","Slovenia","Slovenia","Republic of Slovenia","SI","Euro","A simple multiplier is used to convert the national currencies of EMU members to euros. The following irrevocable euro conversion rate entered into force on January 1, 2007: 1 euro = 239.64 Slovenian tolar. Please note that historical data are not actual euros and are not comparable or suitable for aggregation across countries.","Europe & Central Asia","High income: OECD","SI","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","Euro area","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011. Population figures compiled from administrative registers.","World Health Survey (WHS), 2003","Expenditure survey/budget survey (ES/BS), 2004","Yes","2010","2010","2012","2009",
-"SWE","Sweden","Sweden","Kingdom of Sweden","SE","Swedish krona","Fiscal year end: June 30; reporting period for national accounts data: CY.","Europe & Central Asia","High income: OECD","SE","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","","Income survey (IS), 2000","Yes","2010","2009","2012","2007",
-"SWZ","Swaziland","Swaziland","Kingdom of Swaziland","SZ","Swaziland lilangeni","Fiscal year end: March 31; reporting period for national accounts data: CY. In 2011, the Central Statistical Office revised national accounts data for 1990 onward.","Sub-Saharan Africa","Lower middle income","SZ","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2007","Multiple Indicator Cluster Survey (MICS), 2010","Expenditure survey/budget survey (ES/BS), 2009/10","","2007. Population and Housing Census.","","2007","2000",
-"SXM","Sint Maarten (Dutch part)","Sint Maarten (Dutch part)","Sint Maarten (Dutch part)","SX","Netherlands Antilles guilder","","Latin America & Caribbean","High income: nonOECD","SX","","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","","","","2011","","","Yes","","","","",
-"SYC","Seychelles","Seychelles","Republic of Seychelles","SC","Seychelles rupee","April 2013 database update: Based on official government statistics, national accounts data were revised for 1976 onward; the base year changed to 2006.","Sub-Saharan Africa","Upper middle income","SC","2006","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","","Budget survey (BS), 2006/07","Yes","2011","","2008","2005",
-"SYR","Syrian Arab Republic","Syrian Arab Republic","Syrian Arab Republic","SY","Syrian pound","April 2013 database update: Based on data from the Central Bureau of Statistics, national accounts data were revised for 2003 onward.","Middle East & North Africa","Lower middle income","SY","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1968 System of National Accounts methodology.","1970–2010","2005","IMF Balance of Payments Manual, 6th edition.","Estimate","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2004","Multiple Indicator Cluster Survey (MICS), 2006","Expenditure survey/budget survey (ES/BS), 2004","","2014","","2010","2005",
-"TCA","Turks and Caicos Islands","Turks and Caicos Islands","Turks and Caicos Islands","TC","U.S. dollar","","Latin America & Caribbean","High income: nonOECD","TC","","","","","","Country uses the 1993 System of National Accounts methodology.","","","","","General trade system","","","2012","","","Yes","","","2012","",
-"TCD","Chad","Chad","Republic of Chad","TD","CFA franc","Based on IMF data, national accounts data have been revised for 2005 onward; the new base year is 2005.","Sub-Saharan Africa","Low income","TD","2005","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Preliminary","Special trade system","","General Data Dissemination System (GDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2010","Priority survey (PS), 2002/03","","2010/ 2011","","1995","2005",
-"TGO","Togo","Togo","Republic of Togo","TG","CFA franc","April 2013 database update: Based on IMF data, national accounts data have been revised for 2000; the new base year is 2000.","Sub-Saharan Africa","Low income","TG","2000","","Value added at producer prices (VAP)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Demographic and Health Survey (DHS), 2013","Core Welfare Indicator Questionnaire Survey (CWIQ), 2011","","2011/2012","","2012","2002",
-"THA","Thailand","Thailand","Kingdom of Thailand","TH","Thai baht","Fiscal year end: September 30; reporting period for national accounts data: CY.","East Asia & Pacific","Upper middle income","TH","1988","","Value added at producer prices (VAP)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","Multiple Indicator Cluster Survey (MICS), 2012","Integrated household survey (IHS), 2011","","2013","2006","2012","2007",
-"TJK","Tajikistan","Tajikistan","Republic of Tajikistan","TJ","Tajik somoni","","Europe & Central Asia","Low income","TJ","Original chained constant price data are rescaled.","2000","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","1990–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2010","Demographic and Health Survey (DHS), 2012","Living Standards Measurement Study Survey (LSMS), 2009","","2013","","2000","2006",
-"TKM","Turkmenistan","Turkmenistan","Turkmenistan","TM","New Turkmen manat","On January 1, 2009, the Turkmen manat was redenominated (1 new manat = 5,000 old manats).","Europe & Central Asia","Upper middle income","TM","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1987–95, 1997–2007","","IMF Balance of Payments Manual, 6th edition.","Estimate","General trade system","","","2012","Multiple Indicator Cluster Survey (MICS), 2011","Living Standards Measurement Study Survey (LSMS), 1998","Yes","","","2000","2004",
-"TLS","Timor-Leste","Timor-Leste","Democratic Republic of Timor-Leste","TL","U.S. dollar","Based on official government statistics, national account data have been revised, and value added is measured at basic prices; the new base year is 2010.","East Asia & Pacific","Lower middle income","TP","2010","","Value added at basic prices (VAB)","Blend","","Country uses the 2008 System of National Accounts methodology.","","","","","Special trade system","","General Data Dissemination System (GDDS)","2010","Demographic and Health Survey (DHS), 2009/10","Living Standards Measurement Study Survey (LSMS), 2007","","2010. Population and Housing Census.","","2005","2004",
-"TON","Tonga","Tonga","Kingdom of Tonga","TO","Tongan pa'anga","Fiscal year ends on June 30; reporting period for national accounts data: FY. April 2013 database update: Based on data from the National Bureau of Statistics, national accounts data were revised; the base year changed to 2010/11.","East Asia & Pacific","Upper middle income","TO","2010/11","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","General Data Dissemination System (GDDS)","2006","","2013 national accounts estimates are based on IMF reports.","","","","2012","",
-"TTO","Trinidad and Tobago","Trinidad and Tobago","Republic of Trinidad and Tobago","TT","Trinidad and Tobago dollar","","Latin America & Caribbean","High income: nonOECD","TT","2000","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","","Special trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2011","Integrated household survey (IHS), 1992","Yes","","2006","2010","2000",
-"TUN","Tunisia","Tunisia","Republic of Tunisia","TN","Tunisian dinar","National accounts data from 2005 onward have been revised based on data published by the Tunisian authorities. April 2012 database update: Based on data from the Central Bank and its Statistical Bulletin, national accounts data were revised for 1997 onward.","Middle East & North Africa","Upper middle income","TN","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2004","Multiple Indicator Cluster Survey (MICS), 2011/12","Integrated household survey (IHS), 2010","","2014/ 2015","2006","2011","2001",
-"TUR","Turkey","Turkey","Republic of Turkey","TR","New Turkish lira","","Europe & Central Asia","Upper middle income","TR","1998","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","Rolling","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Demographic and Health Survey (DHS), 2003; World Health Survey (WHS), 2003","Labor force survey (LFS), 2009","","","2009","2012","2003",
-"TUV","Tuvalu","Tuvalu","Tuvalu","TV","Australian dollar","Based on data from the IMF, World Bank and government official statistics, national accounts data have been revised from 2006 onward. Value added is measured at producer prices up to 1999 and at basic prices from 2000 onward.","East Asia & Pacific","Upper middle income","TV","2005","","Value added at basic prices (VAB)","IDA","","Country uses the 1968 System of National Accounts methodology.","","","","","General trade system","","General Data Dissemination System (GDDS)","2012","","2013 national accounts estimates are based on IMF reports.","","","","2008","",
-"TZA","Tanzania","Tanzania","United Republic of Tanzania","TZ","Tanzanian shilling","","Sub-Saharan Africa","Low income","TZ","Original chained constant price data are rescaled.","2001","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2012","HIV/Maternal and Child Health (HIV/MCH) Service Provision Assessments (SPA), 2013/14","Expenditure survey/budget survey (ES/BS), 2011/12","","2007/08","2007","2012","2002",
-"UGA","Uganda","Uganda","Republic of Uganda","UG","Ugandan shilling","Fiscal year end: June 30; reporting period for national accounts data: FY. In 2011, the Bureau of Statistics revised national accounts series for 1998 onward; the base year for constant price series changed to 2001/02.","Sub-Saharan Africa","Low income","UG","2001/02","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2002","HIV/AIDS Indicator Survey (AIS), 2011; Demographic and Health Survey (DHS), 2011","Priority survey (PS), 2009/10","","2008/ 2009","2000","2012","2002",
-"UKR","Ukraine","Ukraine","Ukraine","UA","Ukrainian hryvnia","","Europe & Central Asia","Lower middle income","UA","Original chained constant price data are rescaled.","2003","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","1987–95","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2001","Multiple Indicator Cluster Survey (MICS), 2012","Expenditure survey/budget survey (ES/BS), 2009","Yes","2012 /2013","","2012","2005",
-"UMC","Upper middle income","Upper middle income","Upper middle income","XT","","Upper middle income group aggregate. Upper-middle-income economies are those in which 2013 GNI per capita was between $4,126 and $12,745.","","","XT","","","","","","","","","","","","","","","","","","","","","",
-"URY","Uruguay","Uruguay","Oriental Republic of Uruguay","UY","Uruguayan peso","In 2011, the Central Bank revised national accounts data for 2006 onward.","Latin America & Caribbean","High income: nonOECD","UY","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2012","Integrated household survey (IHS), 2012","Yes","2011","2008","2012","2000",
-"USA","United States","United States","United States of America","US","U.S. dollar","Fiscal year end: September 30; reporting period for national accounts data: CY.","North America","High income: OECD","US","Original chained constant price data are rescaled.","2005","Value added at basic prices (VAB)","","","Country uses the 2008 System of National Accounts methodology.","","2011","IMF Balance of Payments Manual, 6th edition.","","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2010","","Labor force survey (LFS), 2000","Yes","2012","2008","2012","2005",
-"UZB","Uzbekistan","Uzbekistan","Republic of Uzbekistan","UZ","Uzbek sum","","Europe & Central Asia","Lower middle income","UZ","Original chained constant price data are rescaled.","1997","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","1990–95","","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","","1989","Multiple Indicator Cluster Survey (MICS), 2006","Expenditure survey/budget survey (ES/BS), 2011","Yes","","","","2005",
-"VCT","St. Vincent and the Grenadines","St. Vincent and the Grenadines","St. Vincent and the Grenadines","VC","East Caribbean dollar","April 2012 database update: Based on official government statistics, national accounts data were revised for 2000 onward; the base year changed to 2006.","Latin America & Caribbean","Upper middle income","VC","2006","","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","","","Yes","","","2012","1995",
-"VEN","Venezuela","Venezuela, RB","República Bolivariana de Venezuela","VE","Venezuelan bolivar fuerte","","Latin America & Caribbean","Upper middle income","VE","1997","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2011","Multiple Indicator Cluster Survey (MICS), 2000","Integrated household survey (IHS), 2012","Yes","2007","","2011","2000",
-"VIR","Virgin Islands","Virgin Islands (U.S.)","Virgin Islands of the United States","VI","U.S. dollar","","Latin America & Caribbean","High income: nonOECD","VI","1982","","","","","Country uses the 1968 System of National Accounts methodology.","","","","","General trade system","","","2010","","","Yes","2007","","","",
-"VNM","Vietnam","Vietnam","Socialist Republic of Vietnam","VN","Vietnamese dong","Based on data from the Vietnam Statistics Office, national accounts data have been revised from 2000 onward; the new base year is 2010.","East Asia & Pacific","Lower middle income","VN","2010","","Value added at producer prices (VAP)","Blend","","Country uses the 1993 System of National Accounts methodology.","1991","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","","General Data Dissemination System (GDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2010/11","Integrated household survey (IHS), 2010","Yes","2011/ 2012","2010","2011","2005",
-"VUT","Vanuatu","Vanuatu","Republic of Vanuatu","VU","Vanuatu vatu","Based on official government statistics, value added is measured at producer prices through 1997 and at basic prices from 1998 onward.","East Asia & Pacific","Lower middle income","VU","2006","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Estimate","General trade system","Budgetary central government","General Data Dissemination System (GDDS)","2009","Multiple Indicator Cluster Survey (MICS), 2007","2013 national accounts estimates are based on IMF reports.","","2007","","2011","",
-"WLD","World","World","World","1W","","World aggregate.","","","1W","","","","","","","","","","","","","","","","","","","","","",
-"WSM","Samoa","Samoa","Samoa","WS","Samoan tala","Fiscal year ends on June 30; reporting period for national accounts data: FY. Data are revised from Samoa Bureau of Statistics and Central Bank of Samoa.","East Asia & Pacific","Lower middle income","WS","2002","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2011","Demographic and Health Survey (DHS), 2009","","","2009","","2012","",
-"XKX","Kosovo","Kosovo","Republic of Kosovo","","Euro","Kosovo became a World Bank member on June 29, 2009. Since 1999, Kosovo has been a territory under international administration pursuant to UN Security Council Resolution 1244 (1999).","Europe & Central Asia","Lower middle income","KV","2008","","Value added at basic prices (VAB)","IDA","","Country uses the 1993 System of National Accounts methodology.","","","","Actual","","","General Data Dissemination System (GDDS)","2011","","Integrated household survey (IHS), 2011","","","","","",
-"YEM","Yemen","Yemen, Rep.","Republic of Yemen","YE","Yemeni rial","Based on official government statistics and International Monetary Fund data, national accounts data have been revised for 1990 onward.","Middle East & North Africa","Lower middle income","RY","2007","","Value added at producer prices (VAP)","IDA","","Country uses the 1993 System of National Accounts methodology.","1990–96","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2004","Demographic and Health Survey (DHS), 2013","Expenditure survey/budget survey (ES/BS), 2005","","","2006","2012","2005",
-"ZAF","South Africa","South Africa","Republic of South Africa","ZA","South African rand","Fiscal year end: March 31; reporting period for national accounts data: CY.","Sub-Saharan Africa","Upper middle income","ZA","2005","","Value added at basic prices (VAB)","IBRD","","Country uses the 1993 System of National Accounts methodology.","","2005","IMF Balance of Payments Manual, 6th edition.","Preliminary","General trade system","Consolidated central government","Special Data Dissemination Standard (SDDS)","2011","Demographic and Health Survey (DHS), 2003; World Health Survey (WHS), 2003","Expenditure survey/budget survey (ES/BS), 2010","","2007","2010","2012","2000",
-"ZMB","Zambia","Zambia","Republic of Zambia","ZM","New Zambian kwacha","National accounts data have rebased to reflect the January 1, 2013, introduction of the new Zambian kwacha at a rate of 1,000 old kwacha = 1 new kwacha.","Sub-Saharan Africa","Lower middle income","ZM","1994","","Value added at basic prices (VAB)","IDA","HIPC","Country uses the 1968 System of National Accounts methodology.","1990–92","2005","IMF Balance of Payments Manual, 6th edition.","Actual","Special trade system","Budgetary central government","General Data Dissemination System (GDDS)","2010","Demographic and Health Survey (DHS), 2013","Integrated household survey (IHS), 2010","","2010. Population and Housing Census.","","2011","2002",
-"ZWE","Zimbabwe","Zimbabwe","Republic of Zimbabwe","ZW","U.S. dollar","Fiscal year end: June 30; reporting period for national accounts data: CY. As of January 2009, multiple hard currencies, such as rand, pound sterling, euro and U.S. dollar are in use. Data are reported in U.S. dollars, the most-used currency.","Sub-Saharan Africa","Low income","ZW","2009","","Value added at basic prices (VAB)","Blend","","Country uses the 1993 System of National Accounts methodology.","1991, 1998","2005","IMF Balance of Payments Manual, 6th edition.","Actual","General trade system","Consolidated central government","General Data Dissemination System (GDDS)","2012","Demographic and Health Survey (DHS), 2010/11","Integrated household survey (IHS), 2011/12","","","","2012","2002",
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import timedelta\nfrom flask import Flask, Blueprint, jsonify, request, session\nfrom flask_jwt_extended import JWTManager, jwt_required, decode_token, create_access_token, \\\n    get_raw_jwt, get_jti\nfrom authlib.integrations.flask_oauth2 import ResourceProtector, AuthorizationServer, \\\n    BearerTokenValidator\nfrom authlib.specs.rfc6749 import GrantType\nfrom werkzeug.security import safe_str_cmp\nfrom sqlalchemy import create_engine, Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\nfrom flask import abort\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String  # Add this line to import the missing modules\nfrom sqlalchemy.orm import sessionmaker, relationship  # Add this line to import the missing module\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef dashboard():\n    return render_template('dashboard.html')  # This will be your Figma dashboard\n\nif __name__ == '__main__':\n    app.run(debug=True)\nBase = declarative_base()\n\nclass Role(Base):\n    id = Column(Integer, primary_key=True)\n    name = Column(String(80), nullable=False, index=True)\n    users = relationship(\"User\", backref=\"role\")\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    username = Column(String(80), unique=True, nullable=False, index=True)\n    password = Column(String(120), nullable=False)\n    email = Column(String(120), unique=True, nullable=False, index=True)\n    role_id = Column(Integer, ForeignKey(\"role.id\"), default=1)\n    created_at = Column(func.now(), default=None)\n    modified_at = Column(func.now(), onupdate=None)\n\nclass TokenBlocklist(Base):\n    id = Column(Integer, primary_key=True)\n    jti = Column(String(128), nullable=False, index=True)\n    created_at = Column(func.now(), default=None)\n\nclass UserService():\n    def __init__(self, db_uri):\n        engine = create_engine(db_uri)\n        Base.metadata.create_all(bind=engine)\n        Session = sessionmaker(bind=engine)\n        self._session = Session()\n\n    @staticmethod\n    def identity_lookup(payload):\n        user_id = payload[\"sub\"]\n        return User.query.filter_by(id=user_id).first()\n\n    def register_user(self, username, password, email, role_name):\n        user = User(username=username, password=password, email=email, role_name=role_name)\n        try:\n            self._session.add(user)\n            self._session.commit()\n        except Exception as e:\n            print(f\"Error occurred while inserting user {e}\")\n\n    def authenticate_user(self, username, password):\n        user = User.query.filter_by(username=username).first()\n        if user and safe_str_cmp(user.password.encode(\"utf-8\"), password.encode(\"utf-8\")):\n            return user\n\n    def revoke_token(self, jti):\n        blocklist = TokenBlocklist(jti=jti)\n        try:\n            self._session.add(blocklist)\n            self._session.commit()\n        except Exception as e:\n            print(f\"Error occurred while inserting blacklisted token {e}\")\n\n    def get_revoked_token(self, jti):\n        query = TokenBlocklist.query.filter_by(jti=jti).first()\n        if query is None:\n            return False\n        else:\n            return True\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = '<insert secret key>'\napp.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(days=1)\napp.config['JWT_BLACKLIST_ENABLED'] = True\napp.config['JWT_BLACKLIST_TOKEN_CHECKS'] = ['access', 'refresh']\njwt = JWTManager(app)\n\n@app.before_request\ndef protect_bearer_only():\n    protector = ResourceProtector()\n    authorized = protector.check_AuthorizationHeader(\n        request.headers.get(\"Authorization\", \"\")\n    )\n    if not authorized:\n        abort(401)\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n    pass\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    pass\n\n@app.route(\"/logout\", methods=[\"POST\"])\n@jwt_required()\ndef logout():\n    jti = get_raw_jwt()[\"jti\"]\n    user_svc = UserService(\"<insert postgres uri>\")\n    user_svc.revoke_token(jti)\n    return {\"message\": \"Successfully logged out\"}, 200\n\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    jti = decrypted_token[\"jti\"]\n    user_svc = UserService(\"<insert postgres uri>\")\n    if user_svc.get_revoked_token(jti):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    app.run()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ b/app.py	(date 1722312020835)
@@ -1,24 +1,16 @@
 from datetime import timedelta
-from flask import Flask, Blueprint, jsonify, request, session
-from flask_jwt_extended import JWTManager, jwt_required, decode_token, create_access_token, \
-    get_raw_jwt, get_jti
-from authlib.integrations.flask_oauth2 import ResourceProtector, AuthorizationServer, \
-    BearerTokenValidator
-from authlib.specs.rfc6749 import GrantType
-from werkzeug.security import safe_str_cmp
-from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
-from sqlalchemy.orm import sessionmaker, relationship
-from sqlalchemy.ext.declarative import declarative_base
-from sqlalchemy.sql import func
+
+from authlib.integrations.flask_oauth2 import ResourceProtector
+from flask import Flask, render_template
 from flask import abort
-from sqlalchemy import Column, Integer, String
-from sqlalchemy.orm import relationship
-from sqlalchemy.ext.declarative import declarative_base
-from sqlalchemy.orm import sessionmaker, relationship
-from sqlalchemy.ext.declarative import declarative_base
+from flask import request
+from flask_jwt_extended import JWTManager, jwt_required, get_raw_jwt
 from sqlalchemy import Column, Integer, String  # Add this line to import the missing modules
+from sqlalchemy import create_engine, ForeignKey
+from sqlalchemy.ext.declarative import declarative_base
 from sqlalchemy.orm import sessionmaker, relationship  # Add this line to import the missing module
-from flask import Flask, render_template
+from sqlalchemy.sql import func
+from werkzeug.security import safe_str_cmp
 
 app = Flask(__name__)
 
Index: src/user_controller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nsys.path.append('/Users/derrickbass/Desktop/Autonomod/src')  # Add the path to the missing package\n\nfrom flask import Blueprint, request\nfrom http import HTTPStatus\n\nfrom .user_services import UserService  # Fix the import statement\n\nfrom src import ResponseUtils\n\napi = Blueprint('api', __name__)\n\nuser_service = UserService()\n\n@api.route('/users', methods=['POST'])\ndef create_user():\n    req_body = request.get_json()\n    response = user_service.create_user(req_body)\n    return ResponseUtils.send_response(HTTPStatus.CREATED, response)\n\n@api.route('/users/login', methods=['POST'])\ndef login_user():\n    req_body = request.get_json()\n    response = user_service.login_user(req_body)\n    return ResponseUtils.send_response(HTTPStatus.OK, response)\n\n@api.route('/users', methods=['GET'])\ndef get_users():\n    response = user_service.get_users()\n    return ResponseUtils.send_response(HTTPStatus.OK, response)\n\n@api.route('/users/<int:id>', methods=['GET'])\ndef get_user_by_id(id: int):\n    response = user_service.get_user_by_id(id)\n    return ResponseUtils.send_response(HTTPStatus.OK, response)\n\n@api.route('/users/<int:id>', methods=['PUT'])\ndef update_user(id: int):\n    req_body = request.get_json()\n    response = user_service.update_user(id, req_body)\n    return ResponseUtils.send_response(HTTPStatus.OK, response)\n\n@api.route('/users/<int:id>', methods=['DELETE'])\ndef delete_user(id: int):\n    response = user_service.delete_user(id)\n    return ResponseUtils.send_response(HTTPStatus.NO_CONTENT, None)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/user_controller.py b/src/user_controller.py
--- a/src/user_controller.py	(revision e3d2509005997d546924a8deccad0ccc0ef18b7b)
+++ b/src/user_controller.py	(date 1722305885998)
@@ -1,5 +1,6 @@
 import sys
-sys.path.append('/Users/derrickbass/Desktop/Autonomod/src')  # Add the path to the missing package
+
+sys.path.append('/Users/derrickbass/Public/adaptai/src')  # Add the path to the missing package
 
 from flask import Blueprint, request
 from http import HTTPStatus
@@ -12,35 +13,41 @@
 
 user_service = UserService()
 
+
 @api.route('/users', methods=['POST'])
 def create_user():
     req_body = request.get_json()
     response = user_service.create_user(req_body)
     return ResponseUtils.send_response(HTTPStatus.CREATED, response)
 
+
 @api.route('/users/login', methods=['POST'])
 def login_user():
     req_body = request.get_json()
     response = user_service.login_user(req_body)
     return ResponseUtils.send_response(HTTPStatus.OK, response)
 
+
 @api.route('/users', methods=['GET'])
 def get_users():
     response = user_service.get_users()
     return ResponseUtils.send_response(HTTPStatus.OK, response)
 
+
 @api.route('/users/<int:id>', methods=['GET'])
 def get_user_by_id(id: int):
     response = user_service.get_user_by_id(id)
     return ResponseUtils.send_response(HTTPStatus.OK, response)
 
+
 @api.route('/users/<int:id>', methods=['PUT'])
 def update_user(id: int):
     req_body = request.get_json()
     response = user_service.update_user(id, req_body)
     return ResponseUtils.send_response(HTTPStatus.OK, response)
 
+
 @api.route('/users/<int:id>', methods=['DELETE'])
 def delete_user(id: int):
-    response = user_service.delete_user(id)
-    return ResponseUtils.send_response(HTTPStatus.NO_CONTENT, None)
\ No newline at end of file
+    user_service.delete_user(id)
+    return ResponseUtils.send_response(HTTPStatus.NO_CONTENT, None)
diff --git a/cffi/_imp_emulation.py b/datasets/edstats-csv-zip-32-mb-/cffi/_imp_emulation.py
rename from cffi/_imp_emulation.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/_imp_emulation.py
diff --git a/cffi/cffi_opcode.py b/datasets/edstats-csv-zip-32-mb-/cffi/cffi_opcode.py
rename from cffi/cffi_opcode.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/cffi_opcode.py
diff --git a/cffi/_cffi_errors.h b/datasets/edstats-csv-zip-32-mb-/cffi/_cffi_errors.h
rename from cffi/_cffi_errors.h
rename to datasets/edstats-csv-zip-32-mb-/cffi/_cffi_errors.h
diff --git a/cffi/setuptools_ext.py b/datasets/edstats-csv-zip-32-mb-/cffi/setuptools_ext.py
rename from cffi/setuptools_ext.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/setuptools_ext.py
diff --git a/cffi/error 2.py b/datasets/edstats-csv-zip-32-mb-/cffi/error 2.py
rename from cffi/error 2.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/error 2.py
diff --git a/datasets/edstats-csv-zip-32-mb-/__init__.py b/datasets/edstats-csv-zip-32-mb-/__init__.py
new file mode 100644
diff --git a/cffi/backend_ctypes.py b/datasets/edstats-csv-zip-32-mb-/cffi/backend_ctypes.py
rename from cffi/backend_ctypes.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/backend_ctypes.py
diff --git a/cffi/_shimmed_dist_utils.py b/datasets/edstats-csv-zip-32-mb-/cffi/_shimmed_dist_utils.py
rename from cffi/_shimmed_dist_utils.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/_shimmed_dist_utils.py
diff --git a/cffi/error.py b/datasets/edstats-csv-zip-32-mb-/cffi/error.py
rename from cffi/error.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/error.py
diff --git a/cffi/vengine_gen.py b/datasets/edstats-csv-zip-32-mb-/cffi/vengine_gen.py
rename from cffi/vengine_gen.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/vengine_gen.py
diff --git a/cffi/_cffi_include.h b/datasets/edstats-csv-zip-32-mb-/cffi/_cffi_include.h
rename from cffi/_cffi_include.h
rename to datasets/edstats-csv-zip-32-mb-/cffi/_cffi_include.h
diff --git a/EdStatsSeries.csv b/datasets/edstats-csv-zip-32-mb-/EdStatsSeries.csv
rename from EdStatsSeries.csv
rename to datasets/edstats-csv-zip-32-mb-/EdStatsSeries.csv
diff --git a/cffi/__init__.py b/datasets/edstats-csv-zip-32-mb-/cffi/__init__.py
rename from cffi/__init__.py
rename to datasets/edstats-csv-zip-32-mb-/cffi/__init__.py
